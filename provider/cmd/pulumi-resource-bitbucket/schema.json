{
    "name": "bitbucket",
    "displayName": "Bitbucket Cloud",
    "description": "A Pulumi package for creating and managing bitbucket cloud resources.",
    "keywords": [
        "pulumi",
        "bitbucket",
        "category/vcs"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`bitbucket` Terraform Provider](https://github.com/DrFaust92/terraform-provider-bitbucket).",
    "repository": "https://github.com/ryan-pip/pulumi-bitbucket",
    "pluginDownloadURL": "github://api.github.com/ryan-pip",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing bitbucket cloud resources.. Based on terraform-provider-bitbucket: version v2.40.0",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/DrFaust92/terraform-provider-bitbucket)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-bitbucket` repo](https://github.com/ryan-pip/pulumi-bitbucket/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-bitbucket` repo](https://github.com/DrFaust92/terraform-provider-bitbucket/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/DrFaust92/terraform-provider-bitbucket)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-bitbucket` repo](https://github.com/ryan-pip/pulumi-bitbucket/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-bitbucket` repo](https://github.com/DrFaust92/terraform-provider-bitbucket/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "oauthClientId": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "BITBUCKET_OAUTH_CLIENT_ID"
                    ]
                }
            },
            "oauthClientSecret": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "BITBUCKET_OAUTH_CLIENT_SECRET"
                    ]
                }
            },
            "oauthToken": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "BITBUCKET_OAUTH_TOKEN"
                    ]
                }
            },
            "password": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "BITBUCKET_PASSWORD"
                    ]
                }
            },
            "username": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "BITBUCKET_USERNAME"
                    ]
                }
            }
        }
    },
    "types": {
        "bitbucket:index/BranchRestrictionGroup:BranchRestrictionGroup": {
            "properties": {
                "owner": {
                    "type": "string",
                    "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n"
                },
                "slug": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "slug"
            ]
        },
        "bitbucket:index/BranchingModelBranchType:BranchingModelBranchType": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the branch type. Valid values are `feature`, `bugfix`, `release`, `hotfix`.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The prefix for this branch type. A branch with this prefix will be classified as per kind. The prefix of an enabled branch type must be a valid branch prefix. Additionally, it cannot be blank, empty or null. The prefix for a disabled branch type can be empty or invalid.\n"
                }
            },
            "type": "object",
            "required": [
                "kind"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "kind"
                    ]
                }
            }
        },
        "bitbucket:index/BranchingModelDevelopment:BranchingModelDevelopment": {
            "properties": {
                "branchDoesNotExist": {
                    "type": "boolean",
                    "description": "Optional and only returned for a repository's branching model. Indicates if the indicated branch exists on the repository (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a repository is inheriting its project's branching model.\n"
                },
                "isValid": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The configured branch. It must be null when `use_mainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).\n"
                },
                "useMainbranch": {
                    "type": "boolean",
                    "description": "Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isValid"
                    ]
                }
            }
        },
        "bitbucket:index/BranchingModelProduction:BranchingModelProduction": {
            "properties": {
                "branchDoesNotExist": {
                    "type": "boolean",
                    "description": "Optional and only returned for a repository's branching model. Indicates if the indicated branch exists on the repository (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a repository is inheriting its project's branching model.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates if branch is enabled or not.\n"
                },
                "isValid": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The configured branch. It must be null when `use_mainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).\n"
                },
                "useMainbranch": {
                    "type": "boolean",
                    "description": "Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isValid"
                    ]
                }
            }
        },
        "bitbucket:index/DeploymentRestrictions:DeploymentRestrictions": {
            "properties": {
                "adminOnly": {
                    "type": "boolean",
                    "description": "Only Admins can deploy this deployment stage.\n"
                }
            },
            "type": "object"
        },
        "bitbucket:index/ForkedRepositoryLink:ForkedRepositoryLink": {
            "properties": {
                "avatar": {
                    "$ref": "#/types/bitbucket:index/ForkedRepositoryLinkAvatar:ForkedRepositoryLinkAvatar",
                    "description": "An avatar link to a resource related to this object. See Avatar Below.\n"
                }
            },
            "type": "object"
        },
        "bitbucket:index/ForkedRepositoryLinkAvatar:ForkedRepositoryLinkAvatar": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "href of the avatar.\n"
                }
            },
            "type": "object"
        },
        "bitbucket:index/PipelineScheduleTarget:PipelineScheduleTarget": {
            "properties": {
                "refName": {
                    "type": "string",
                    "description": "The name of the reference.\n",
                    "willReplaceOnChanges": true
                },
                "refType": {
                    "type": "string",
                    "description": "The type of reference. Valid values are `branch` and `tag`.\n",
                    "willReplaceOnChanges": true
                },
                "selector": {
                    "$ref": "#/types/bitbucket:index/PipelineScheduleTargetSelector:PipelineScheduleTargetSelector",
                    "description": "Selector spec. See Selector below.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "refName",
                "refType",
                "selector"
            ]
        },
        "bitbucket:index/PipelineScheduleTargetSelector:PipelineScheduleTargetSelector": {
            "properties": {
                "pattern": {
                    "type": "string",
                    "description": "The name of the matching pipeline definition.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Selector type. Default value is `branches`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "pattern"
            ]
        },
        "bitbucket:index/PipelineSshKnownHostPublicKey:PipelineSshKnownHostPublicKey": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The plain public key.\n"
                },
                "keyType": {
                    "type": "string",
                    "description": "The type of the public key. Valid values are `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ssh-rsa`, and `ssh-dss`.\n"
                },
                "md5Fingerprint": {
                    "type": "string"
                },
                "sha256Fingerprint": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "keyType"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "keyType",
                        "md5Fingerprint",
                        "sha256Fingerprint"
                    ]
                }
            }
        },
        "bitbucket:index/ProjectBranchingModelBranchType:ProjectBranchingModelBranchType": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the branch type. Valid values are `feature`, `bugfix`, `release`, `hotfix`.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The prefix for this branch type. A branch with this prefix will be classified as per kind. The prefix of an enabled branch type must be a valid branch prefix. Additionally, it cannot be blank, empty or null. The prefix for a disabled branch type can be empty or invalid.\n"
                }
            },
            "type": "object",
            "required": [
                "kind"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "kind"
                    ]
                }
            }
        },
        "bitbucket:index/ProjectBranchingModelDevelopment:ProjectBranchingModelDevelopment": {
            "properties": {
                "branchDoesNotExist": {
                    "type": "boolean",
                    "description": "Optional and only returned for a project's branching model. Indicates if the indicated branch exists on the project (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a project is inheriting its project's branching model.\n"
                },
                "isValid": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The configured branch. It must be null when `use_mainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).\n"
                },
                "useMainbranch": {
                    "type": "boolean",
                    "description": "Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isValid"
                    ]
                }
            }
        },
        "bitbucket:index/ProjectBranchingModelProduction:ProjectBranchingModelProduction": {
            "properties": {
                "branchDoesNotExist": {
                    "type": "boolean",
                    "description": "Optional and only returned for a project's branching model. Indicates if the indicated branch exists on the project (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a project is inheriting its project's branching model.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates if branch is enabled or not.\n"
                },
                "isValid": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The configured branch. It must be null when `use_mainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).\n"
                },
                "useMainbranch": {
                    "type": "boolean",
                    "description": "Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isValid"
                    ]
                }
            }
        },
        "bitbucket:index/ProjectLink:ProjectLink": {
            "properties": {
                "avatar": {
                    "$ref": "#/types/bitbucket:index/ProjectLinkAvatar:ProjectLinkAvatar",
                    "description": "An avatar link to a resource related to this object. See Avatar Below.\n"
                }
            },
            "type": "object"
        },
        "bitbucket:index/ProjectLinkAvatar:ProjectLinkAvatar": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "href of the avatar.\n"
                }
            },
            "type": "object"
        },
        "bitbucket:index/RepositoryLink:RepositoryLink": {
            "properties": {
                "avatar": {
                    "$ref": "#/types/bitbucket:index/RepositoryLinkAvatar:RepositoryLinkAvatar",
                    "description": "An avatar link to a resource related to this object. See Avatar Below.\n"
                }
            },
            "type": "object"
        },
        "bitbucket:index/RepositoryLinkAvatar:RepositoryLinkAvatar": {
            "properties": {
                "href": {
                    "type": "string",
                    "description": "href of the avatar.\n"
                }
            },
            "type": "object"
        },
        "bitbucket:index/getCurrentUserEmail:getCurrentUserEmail": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The email address.\n"
                },
                "isConfirmed": {
                    "type": "boolean",
                    "description": "Whether the email is confirmed.\n"
                },
                "isPrimary": {
                    "type": "boolean",
                    "description": "Whether is primary email for the user.\n"
                }
            },
            "type": "object",
            "required": [
                "email",
                "isConfirmed",
                "isPrimary"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bitbucket:index/getGroupMembersGroupMember:getGroupMembersGroupMember": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "The User display name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The Username.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "User UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "username",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bitbucket:index/getGroupsGroup:getGroupsGroup": {
            "properties": {
                "autoAdd": {
                    "type": "boolean",
                    "description": "Whether to automatically add users the groups\n"
                },
                "emailForwardingDisabled": {
                    "type": "boolean",
                    "description": "Whether to disable email forwarding for group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the groups.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "One of `read`, `write`, and `admin`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The groups's slug.\n"
                }
            },
            "type": "object",
            "required": [
                "autoAdd",
                "emailForwardingDisabled",
                "name",
                "permission",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bitbucket:index/getHookTypesHookType:getHookTypesHookType": {
            "properties": {
                "category": {
                    "type": "string",
                    "description": "The category this event belongs to.\n"
                },
                "description": {
                    "type": "string",
                    "description": "More detailed description of the webhook event type.\n"
                },
                "event": {
                    "type": "string",
                    "description": "The event identifier.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Summary of the webhook event type.\n"
                }
            },
            "type": "object",
            "required": [
                "category",
                "description",
                "event",
                "label"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bitbucket:index/getIpRangesRange:getIpRangesRange": {
            "properties": {
                "cidr": {
                    "type": "string",
                    "description": "The CIDR of the range.\n"
                },
                "directions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A Set of directions (Ingress/Egress) the range is associated with.\n"
                },
                "mask": {
                    "type": "string",
                    "description": "More mask of the range.\n"
                },
                "maskLen": {
                    "type": "integer",
                    "description": "The make length of the range.\n"
                },
                "network": {
                    "type": "string",
                    "description": "The network of the range.\n"
                },
                "perimeter": {
                    "type": "string",
                    "description": "The allowed perimeter of the range.\n"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A Set of Atlasian products (Bitbucket, Jira, etc) the range is associated with.\n"
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A Set of regions the range is associated with.\n"
                }
            },
            "type": "object",
            "required": [
                "cidr",
                "directions",
                "mask",
                "maskLen",
                "network",
                "perimeter",
                "products",
                "regions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "bitbucket:index/getWorkspaceMembersWorkspaceMember:getWorkspaceMembersWorkspaceMember": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "The User display name.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The Username.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "User UUID.\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "username",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the bitbucket package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "oauthClientId": {
                "type": "string"
            },
            "oauthClientSecret": {
                "type": "string"
            },
            "oauthToken": {
                "type": "string"
            },
            "password": {
                "type": "string"
            },
            "username": {
                "type": "string"
            }
        },
        "inputProperties": {
            "oauthClientId": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "BITBUCKET_OAUTH_CLIENT_ID"
                    ]
                }
            },
            "oauthClientSecret": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "BITBUCKET_OAUTH_CLIENT_SECRET"
                    ]
                }
            },
            "oauthToken": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "BITBUCKET_OAUTH_TOKEN"
                    ]
                }
            },
            "password": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "BITBUCKET_PASSWORD"
                    ]
                }
            },
            "username": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "BITBUCKET_USERNAME"
                    ]
                }
            }
        }
    },
    "resources": {
        "bitbucket:index/branchRestriction:BranchRestriction": {
            "description": "Provides a Bitbucket branch restriction resource.\n\nThis allows you for setting up branch restrictions for your repository.\n\nOAuth2 Scopes: `repository:admin`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst master = new bitbucket.BranchRestriction(\"master\", {\n    groups: [{\n        owner: \"my-owner\",\n        slug: \"my-group\",\n    }],\n    kind: \"push\",\n    owner: \"myteam\",\n    pattern: \"master\",\n    repository: \"terraform-code\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nmaster = bitbucket.BranchRestriction(\"master\",\n    groups=[bitbucket.BranchRestrictionGroupArgs(\n        owner=\"my-owner\",\n        slug=\"my-group\",\n    )],\n    kind=\"push\",\n    owner=\"myteam\",\n    pattern=\"master\",\n    repository=\"terraform-code\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var master = new Bitbucket.BranchRestriction(\"master\", new()\n    {\n        Groups = new[]\n        {\n            new Bitbucket.Inputs.BranchRestrictionGroupArgs\n            {\n                Owner = \"my-owner\",\n                Slug = \"my-group\",\n            },\n        },\n        Kind = \"push\",\n        Owner = \"myteam\",\n        Pattern = \"master\",\n        Repository = \"terraform-code\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewBranchRestriction(ctx, \"master\", \u0026bitbucket.BranchRestrictionArgs{\n\t\t\tGroups: bitbucket.BranchRestrictionGroupArray{\n\t\t\t\t\u0026bitbucket.BranchRestrictionGroupArgs{\n\t\t\t\t\tOwner: pulumi.String(\"my-owner\"),\n\t\t\t\t\tSlug:  pulumi.String(\"my-group\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tKind:       pulumi.String(\"push\"),\n\t\t\tOwner:      pulumi.String(\"myteam\"),\n\t\t\tPattern:    pulumi.String(\"master\"),\n\t\t\tRepository: pulumi.String(\"terraform-code\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BranchRestriction;\nimport com.pulumi.bitbucket.BranchRestrictionArgs;\nimport com.pulumi.bitbucket.inputs.BranchRestrictionGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var master = new BranchRestriction(\"master\", BranchRestrictionArgs.builder()        \n            .groups(BranchRestrictionGroupArgs.builder()\n                .owner(\"my-owner\")\n                .slug(\"my-group\")\n                .build())\n            .kind(\"push\")\n            .owner(\"myteam\")\n            .pattern(\"master\")\n            .repository(\"terraform-code\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  master:\n    type: bitbucket:BranchRestriction\n    properties:\n      groups:\n        - owner: my-owner\n          slug: my-group\n      kind: push\n      owner: myteam\n      pattern: master\n      repository: terraform-code\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nBranch Restrictions can be imported using their `owner/repo-name/branch-restriction-id` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/branchRestriction:BranchRestriction example my-account/my-repo/branch-rest-id\n```\n\n ",
            "properties": {
                "branchMatchKind": {
                    "type": "string",
                    "description": "Indicates how the restriction is matched against a branch. The default is `glob`. Valid values: `branching_model`, `glob`.\n"
                },
                "branchType": {
                    "type": "string",
                    "description": "Apply the restriction to branches of this type. Active when `branch_match_kind` is `branching_model`. The branch type will be calculated using the branching model configured for the repository. Valid values: `feature`, `bugfix`, `release`, `hotfix`, `development`, `production`.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bitbucket:index/BranchRestrictionGroup:BranchRestrictionGroup"
                    },
                    "description": "A list of groups to use.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The type of restriction that is being applied. Valid values can be found in [docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-branch-restrictions/#api-group-branch-restrictions).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Apply the restriction to branches that match this pattern. Active when `branch_match_kind` is `glob`. Will be empty when `branch_match_kind` is `branching_model`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users to use.\n"
                },
                "value": {
                    "type": "integer",
                    "description": "A value applied to the restriction kind. Currently only applicable to `require_passing_builds_to_merge`, `require_default_reviewer_approvals_to_merge` and `require_approvals_to_merge`.\n"
                }
            },
            "required": [
                "kind",
                "owner",
                "repository"
            ],
            "inputProperties": {
                "branchMatchKind": {
                    "type": "string",
                    "description": "Indicates how the restriction is matched against a branch. The default is `glob`. Valid values: `branching_model`, `glob`.\n"
                },
                "branchType": {
                    "type": "string",
                    "description": "Apply the restriction to branches of this type. Active when `branch_match_kind` is `branching_model`. The branch type will be calculated using the branching model configured for the repository. Valid values: `feature`, `bugfix`, `release`, `hotfix`, `development`, `production`.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bitbucket:index/BranchRestrictionGroup:BranchRestrictionGroup"
                    },
                    "description": "A list of groups to use.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The type of restriction that is being applied. Valid values can be found in [docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-branch-restrictions/#api-group-branch-restrictions).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n",
                    "willReplaceOnChanges": true
                },
                "pattern": {
                    "type": "string",
                    "description": "Apply the restriction to branches that match this pattern. Active when `branch_match_kind` is `glob`. Will be empty when `branch_match_kind` is `branching_model`.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the repository.\n",
                    "willReplaceOnChanges": true
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users to use.\n"
                },
                "value": {
                    "type": "integer",
                    "description": "A value applied to the restriction kind. Currently only applicable to `require_passing_builds_to_merge`, `require_default_reviewer_approvals_to_merge` and `require_approvals_to_merge`.\n"
                }
            },
            "requiredInputs": [
                "kind",
                "owner",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchRestriction resources.\n",
                "properties": {
                    "branchMatchKind": {
                        "type": "string",
                        "description": "Indicates how the restriction is matched against a branch. The default is `glob`. Valid values: `branching_model`, `glob`.\n"
                    },
                    "branchType": {
                        "type": "string",
                        "description": "Apply the restriction to branches of this type. Active when `branch_match_kind` is `branching_model`. The branch type will be calculated using the branching model configured for the repository. Valid values: `feature`, `bugfix`, `release`, `hotfix`, `development`, `production`.\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bitbucket:index/BranchRestrictionGroup:BranchRestrictionGroup"
                        },
                        "description": "A list of groups to use.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The type of restriction that is being applied. Valid values can be found in [docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-branch-restrictions/#api-group-branch-restrictions).\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n",
                        "willReplaceOnChanges": true
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Apply the restriction to branches that match this pattern. Active when `branch_match_kind` is `glob`. Will be empty when `branch_match_kind` is `branching_model`.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the repository.\n",
                        "willReplaceOnChanges": true
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of users to use.\n"
                    },
                    "value": {
                        "type": "integer",
                        "description": "A value applied to the restriction kind. Currently only applicable to `require_passing_builds_to_merge`, `require_default_reviewer_approvals_to_merge` and `require_approvals_to_merge`.\n"
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/branchingModel:BranchingModel": {
            "description": "Provides a Bitbucket branching model resource.\n\nThis allows you for setting up branching models for your repository.\n\nOAuth2 Scopes: `repository:admin`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\n// Manage your repositories branching models\nconst testRepository = new bitbucket.Repository(\"testRepository\", {owner: \"example\"});\nconst testBranchingModel = new bitbucket.BranchingModel(\"testBranchingModel\", {\n    owner: \"example\",\n    repository: testRepository.name,\n    development: {\n        useMainbranch: true,\n    },\n    branchTypes: [\n        {\n            enabled: true,\n            kind: \"feature\",\n            prefix: \"test/\",\n        },\n        {\n            enabled: true,\n            kind: \"hotfix\",\n            prefix: \"hotfix/\",\n        },\n        {\n            enabled: true,\n            kind: \"release\",\n            prefix: \"release/\",\n        },\n        {\n            enabled: true,\n            kind: \"bugfix\",\n            prefix: \"bugfix/\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\n# Manage your repositories branching models\ntest_repository = bitbucket.Repository(\"testRepository\", owner=\"example\")\ntest_branching_model = bitbucket.BranchingModel(\"testBranchingModel\",\n    owner=\"example\",\n    repository=test_repository.name,\n    development=bitbucket.BranchingModelDevelopmentArgs(\n        use_mainbranch=True,\n    ),\n    branch_types=[\n        bitbucket.BranchingModelBranchTypeArgs(\n            enabled=True,\n            kind=\"feature\",\n            prefix=\"test/\",\n        ),\n        bitbucket.BranchingModelBranchTypeArgs(\n            enabled=True,\n            kind=\"hotfix\",\n            prefix=\"hotfix/\",\n        ),\n        bitbucket.BranchingModelBranchTypeArgs(\n            enabled=True,\n            kind=\"release\",\n            prefix=\"release/\",\n        ),\n        bitbucket.BranchingModelBranchTypeArgs(\n            enabled=True,\n            kind=\"bugfix\",\n            prefix=\"bugfix/\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Manage your repositories branching models\n    var testRepository = new Bitbucket.Repository(\"testRepository\", new()\n    {\n        Owner = \"example\",\n    });\n\n    var testBranchingModel = new Bitbucket.BranchingModel(\"testBranchingModel\", new()\n    {\n        Owner = \"example\",\n        Repository = testRepository.Name,\n        Development = new Bitbucket.Inputs.BranchingModelDevelopmentArgs\n        {\n            UseMainbranch = true,\n        },\n        BranchTypes = new[]\n        {\n            new Bitbucket.Inputs.BranchingModelBranchTypeArgs\n            {\n                Enabled = true,\n                Kind = \"feature\",\n                Prefix = \"test/\",\n            },\n            new Bitbucket.Inputs.BranchingModelBranchTypeArgs\n            {\n                Enabled = true,\n                Kind = \"hotfix\",\n                Prefix = \"hotfix/\",\n            },\n            new Bitbucket.Inputs.BranchingModelBranchTypeArgs\n            {\n                Enabled = true,\n                Kind = \"release\",\n                Prefix = \"release/\",\n            },\n            new Bitbucket.Inputs.BranchingModelBranchTypeArgs\n            {\n                Enabled = true,\n                Kind = \"bugfix\",\n                Prefix = \"bugfix/\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Manage your repositories branching models\n\t\ttestRepository, err := bitbucket.NewRepository(ctx, \"testRepository\", \u0026bitbucket.RepositoryArgs{\n\t\t\tOwner: pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = bitbucket.NewBranchingModel(ctx, \"testBranchingModel\", \u0026bitbucket.BranchingModelArgs{\n\t\t\tOwner:      pulumi.String(\"example\"),\n\t\t\tRepository: testRepository.Name,\n\t\t\tDevelopment: \u0026bitbucket.BranchingModelDevelopmentArgs{\n\t\t\t\tUseMainbranch: pulumi.Bool(true),\n\t\t\t},\n\t\t\tBranchTypes: bitbucket.BranchingModelBranchTypeArray{\n\t\t\t\t\u0026bitbucket.BranchingModelBranchTypeArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tKind:    pulumi.String(\"feature\"),\n\t\t\t\t\tPrefix:  pulumi.String(\"test/\"),\n\t\t\t\t},\n\t\t\t\t\u0026bitbucket.BranchingModelBranchTypeArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tKind:    pulumi.String(\"hotfix\"),\n\t\t\t\t\tPrefix:  pulumi.String(\"hotfix/\"),\n\t\t\t\t},\n\t\t\t\t\u0026bitbucket.BranchingModelBranchTypeArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tKind:    pulumi.String(\"release\"),\n\t\t\t\t\tPrefix:  pulumi.String(\"release/\"),\n\t\t\t\t},\n\t\t\t\t\u0026bitbucket.BranchingModelBranchTypeArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tKind:    pulumi.String(\"bugfix\"),\n\t\t\t\t\tPrefix:  pulumi.String(\"bugfix/\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.Repository;\nimport com.pulumi.bitbucket.RepositoryArgs;\nimport com.pulumi.bitbucket.BranchingModel;\nimport com.pulumi.bitbucket.BranchingModelArgs;\nimport com.pulumi.bitbucket.inputs.BranchingModelDevelopmentArgs;\nimport com.pulumi.bitbucket.inputs.BranchingModelBranchTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testRepository = new Repository(\"testRepository\", RepositoryArgs.builder()        \n            .owner(\"example\")\n            .build());\n\n        var testBranchingModel = new BranchingModel(\"testBranchingModel\", BranchingModelArgs.builder()        \n            .owner(\"example\")\n            .repository(testRepository.name())\n            .development(BranchingModelDevelopmentArgs.builder()\n                .useMainbranch(true)\n                .build())\n            .branchTypes(            \n                BranchingModelBranchTypeArgs.builder()\n                    .enabled(true)\n                    .kind(\"feature\")\n                    .prefix(\"test/\")\n                    .build(),\n                BranchingModelBranchTypeArgs.builder()\n                    .enabled(true)\n                    .kind(\"hotfix\")\n                    .prefix(\"hotfix/\")\n                    .build(),\n                BranchingModelBranchTypeArgs.builder()\n                    .enabled(true)\n                    .kind(\"release\")\n                    .prefix(\"release/\")\n                    .build(),\n                BranchingModelBranchTypeArgs.builder()\n                    .enabled(true)\n                    .kind(\"bugfix\")\n                    .prefix(\"bugfix/\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Manage your repositories branching models\n  testRepository:\n    type: bitbucket:Repository\n    properties:\n      owner: example\n  testBranchingModel:\n    type: bitbucket:BranchingModel\n    properties:\n      owner: example\n      repository: ${testRepository.name}\n      development:\n        useMainbranch: true\n      branchTypes:\n        - enabled: true\n          kind: feature\n          prefix: test/\n        - enabled: true\n          kind: hotfix\n          prefix: hotfix/\n        - enabled: true\n          kind: release\n          prefix: release/\n        - enabled: true\n          kind: bugfix\n          prefix: bugfix/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nBranching Models can be imported using the owner and repo separated by a (`/`), e.g.,\n\n```sh\n $ pulumi import bitbucket:index/branchingModel:BranchingModel example owner/repo\n```\n\n ",
            "properties": {
                "branchTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bitbucket:index/BranchingModelBranchType:BranchingModelBranchType"
                    },
                    "description": "A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.\n"
                },
                "development": {
                    "$ref": "#/types/bitbucket:index/BranchingModelDevelopment:BranchingModelDevelopment",
                    "description": "The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n"
                },
                "production": {
                    "$ref": "#/types/bitbucket:index/BranchingModelProduction:BranchingModelProduction",
                    "description": "The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                }
            },
            "required": [
                "branchTypes",
                "development",
                "owner",
                "repository"
            ],
            "inputProperties": {
                "branchTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bitbucket:index/BranchingModelBranchType:BranchingModelBranchType"
                    },
                    "description": "A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.\n"
                },
                "development": {
                    "$ref": "#/types/bitbucket:index/BranchingModelDevelopment:BranchingModelDevelopment",
                    "description": "The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n",
                    "willReplaceOnChanges": true
                },
                "production": {
                    "$ref": "#/types/bitbucket:index/BranchingModelProduction:BranchingModelProduction",
                    "description": "The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the repository.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "development",
                "owner",
                "repository"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BranchingModel resources.\n",
                "properties": {
                    "branchTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bitbucket:index/BranchingModelBranchType:BranchingModelBranchType"
                        },
                        "description": "A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.\n"
                    },
                    "development": {
                        "$ref": "#/types/bitbucket:index/BranchingModelDevelopment:BranchingModelDevelopment",
                        "description": "The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n",
                        "willReplaceOnChanges": true
                    },
                    "production": {
                        "$ref": "#/types/bitbucket:index/BranchingModelProduction:BranchingModelProduction",
                        "description": "The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the repository.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/commitFile:CommitFile": {
            "description": "Commit a file.\n\nThis resource allows you to create a commit within a Bitbucket repository.\n\nOAuth2 Scopes: `repository:write`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst test = new bitbucket.CommitFile(\"test\", {\n    branch: \"main\",\n    commitAuthor: \"Test \u003ctest@test.local\u003e\",\n    commitMessage: \"test\",\n    content: \"abc\",\n    filename: \"README.md\",\n    repoSlug: \"test\",\n    workspace: \"test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ntest = bitbucket.CommitFile(\"test\",\n    branch=\"main\",\n    commit_author=\"Test \u003ctest@test.local\u003e\",\n    commit_message=\"test\",\n    content=\"abc\",\n    filename=\"README.md\",\n    repo_slug=\"test\",\n    workspace=\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Bitbucket.CommitFile(\"test\", new()\n    {\n        Branch = \"main\",\n        CommitAuthor = \"Test \u003ctest@test.local\u003e\",\n        CommitMessage = \"test\",\n        Content = \"abc\",\n        Filename = \"README.md\",\n        RepoSlug = \"test\",\n        Workspace = \"test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewCommitFile(ctx, \"test\", \u0026bitbucket.CommitFileArgs{\n\t\t\tBranch:        pulumi.String(\"main\"),\n\t\t\tCommitAuthor:  pulumi.String(\"Test \u003ctest@test.local\u003e\"),\n\t\t\tCommitMessage: pulumi.String(\"test\"),\n\t\t\tContent:       pulumi.String(\"abc\"),\n\t\t\tFilename:      pulumi.String(\"README.md\"),\n\t\t\tRepoSlug:      pulumi.String(\"test\"),\n\t\t\tWorkspace:     pulumi.String(\"test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.CommitFile;\nimport com.pulumi.bitbucket.CommitFileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new CommitFile(\"test\", CommitFileArgs.builder()        \n            .branch(\"main\")\n            .commitAuthor(\"Test \u003ctest@test.local\u003e\")\n            .commitMessage(\"test\")\n            .content(\"abc\")\n            .filename(\"README.md\")\n            .repoSlug(\"test\")\n            .workspace(\"test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: bitbucket:CommitFile\n    properties:\n      branch: main\n      commitAuthor: Test \u003ctest@test.local\u003e\n      commitMessage: test\n      content: abc\n      filename: README.md\n      repoSlug: test\n      workspace: test\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "Git branch.\n"
                },
                "commitAuthor": {
                    "type": "string",
                    "description": "Committer author to use.\n"
                },
                "commitMessage": {
                    "type": "string",
                    "description": "The message of the commit.\n"
                },
                "commitSha": {
                    "type": "string",
                    "description": "The SHA of the commit that modified the file\n"
                },
                "content": {
                    "type": "string",
                    "description": "The file content.\n"
                },
                "filename": {
                    "type": "string",
                    "description": "The path of the file to manage.\n"
                },
                "repoSlug": {
                    "type": "string",
                    "description": "The repository slug.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace id.\n"
                }
            },
            "required": [
                "branch",
                "commitAuthor",
                "commitMessage",
                "commitSha",
                "content",
                "filename",
                "repoSlug",
                "workspace"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "Git branch.\n",
                    "willReplaceOnChanges": true
                },
                "commitAuthor": {
                    "type": "string",
                    "description": "Committer author to use.\n",
                    "willReplaceOnChanges": true
                },
                "commitMessage": {
                    "type": "string",
                    "description": "The message of the commit.\n",
                    "willReplaceOnChanges": true
                },
                "content": {
                    "type": "string",
                    "description": "The file content.\n",
                    "willReplaceOnChanges": true
                },
                "filename": {
                    "type": "string",
                    "description": "The path of the file to manage.\n",
                    "willReplaceOnChanges": true
                },
                "repoSlug": {
                    "type": "string",
                    "description": "The repository slug.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "branch",
                "commitAuthor",
                "commitMessage",
                "content",
                "filename",
                "repoSlug",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CommitFile resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "Git branch.\n",
                        "willReplaceOnChanges": true
                    },
                    "commitAuthor": {
                        "type": "string",
                        "description": "Committer author to use.\n",
                        "willReplaceOnChanges": true
                    },
                    "commitMessage": {
                        "type": "string",
                        "description": "The message of the commit.\n",
                        "willReplaceOnChanges": true
                    },
                    "commitSha": {
                        "type": "string",
                        "description": "The SHA of the commit that modified the file\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "The file content.\n",
                        "willReplaceOnChanges": true
                    },
                    "filename": {
                        "type": "string",
                        "description": "The path of the file to manage.\n",
                        "willReplaceOnChanges": true
                    },
                    "repoSlug": {
                        "type": "string",
                        "description": "The repository slug.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/defaultReviewers:DefaultReviewers": {
            "description": "Provides support for setting up default reviewers for your repository. You must however have the UUID of the user available. Since Bitbucket has removed usernames from its APIs the best case is to use the UUID via the data provider.\n\nOAuth2 Scopes: `pullrequest` and `repository:admin`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst reviewer = bitbucket.getUser({\n    uuid: \"{account UUID}\",\n});\nconst infrastructure = new bitbucket.DefaultReviewers(\"infrastructure\", {\n    owner: \"myteam\",\n    repository: \"terraform-code\",\n    reviewers: [reviewer.then(reviewer =\u003e reviewer.uuid)],\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nreviewer = bitbucket.get_user(uuid=\"{account UUID}\")\ninfrastructure = bitbucket.DefaultReviewers(\"infrastructure\",\n    owner=\"myteam\",\n    repository=\"terraform-code\",\n    reviewers=[reviewer.uuid])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var reviewer = Bitbucket.GetUser.Invoke(new()\n    {\n        Uuid = \"{account UUID}\",\n    });\n\n    var infrastructure = new Bitbucket.DefaultReviewers(\"infrastructure\", new()\n    {\n        Owner = \"myteam\",\n        Repository = \"terraform-code\",\n        Reviewers = new[]\n        {\n            reviewer.Apply(getUserResult =\u003e getUserResult.Uuid),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treviewer, err := bitbucket.GetUser(ctx, \u0026bitbucket.GetUserArgs{\n\t\t\tUuid: pulumi.StringRef(\"{account UUID}\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = bitbucket.NewDefaultReviewers(ctx, \"infrastructure\", \u0026bitbucket.DefaultReviewersArgs{\n\t\t\tOwner:      pulumi.String(\"myteam\"),\n\t\t\tRepository: pulumi.String(\"terraform-code\"),\n\t\t\tReviewers: pulumi.StringArray{\n\t\t\t\t*pulumi.String(reviewer.Uuid),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetUserArgs;\nimport com.pulumi.bitbucket.DefaultReviewers;\nimport com.pulumi.bitbucket.DefaultReviewersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var reviewer = BitbucketFunctions.getUser(GetUserArgs.builder()\n            .uuid(\"{account UUID}\")\n            .build());\n\n        var infrastructure = new DefaultReviewers(\"infrastructure\", DefaultReviewersArgs.builder()        \n            .owner(\"myteam\")\n            .repository(\"terraform-code\")\n            .reviewers(reviewer.applyValue(getUserResult -\u003e getUserResult.uuid()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infrastructure:\n    type: bitbucket:DefaultReviewers\n    properties:\n      owner: myteam\n      repository: terraform-code\n      reviewers:\n        - ${reviewer.uuid}\nvariables:\n  reviewer:\n    fn::invoke:\n      Function: bitbucket:getUser\n      Arguments:\n        uuid: '{account UUID}'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDefault Reviewers can be imported using the owner and repo separated by a (`/`) and the string `reviewers` and the end, e.g.,\n\n```sh\n $ pulumi import bitbucket:index/defaultReviewers:DefaultReviewers example myteam/terraform-code/reviewers\n```\n\n ",
            "properties": {
                "owner": {
                    "type": "string",
                    "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "reviewers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of reviewers to use.\n"
                }
            },
            "required": [
                "owner",
                "repository",
                "reviewers"
            ],
            "inputProperties": {
                "owner": {
                    "type": "string",
                    "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n",
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the repository.\n",
                    "willReplaceOnChanges": true
                },
                "reviewers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of reviewers to use.\n"
                }
            },
            "requiredInputs": [
                "owner",
                "repository",
                "reviewers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DefaultReviewers resources.\n",
                "properties": {
                    "owner": {
                        "type": "string",
                        "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the repository.\n",
                        "willReplaceOnChanges": true
                    },
                    "reviewers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of reviewers to use.\n"
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/deployKey:DeployKey": {
            "description": "Provides a Bitbucket Deploy Key resource.\n\nThis allows you to manage your Deploy Keys for a repository.\n\nOAuth2 Scopes: `repository` and `repository:admin`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst test = new bitbucket.DeployKey(\"test\", {\n    key: \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",\n    label: \"test-key\",\n    repository: \"example\",\n    workspace: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ntest = bitbucket.DeployKey(\"test\",\n    key=\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",\n    label=\"test-key\",\n    repository=\"example\",\n    workspace=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Bitbucket.DeployKey(\"test\", new()\n    {\n        Key = \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",\n        Label = \"test-key\",\n        Repository = \"example\",\n        Workspace = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewDeployKey(ctx, \"test\", \u0026bitbucket.DeployKeyArgs{\n\t\t\tKey:        pulumi.String(\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\"),\n\t\t\tLabel:      pulumi.String(\"test-key\"),\n\t\t\tRepository: pulumi.String(\"example\"),\n\t\t\tWorkspace:  pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.DeployKey;\nimport com.pulumi.bitbucket.DeployKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new DeployKey(\"test\", DeployKeyArgs.builder()        \n            .key(\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\")\n            .label(\"test-key\")\n            .repository(\"example\")\n            .workspace(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: bitbucket:DeployKey\n    properties:\n      key: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\n      label: test-key\n      repository: example\n      workspace: example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDeploy Keys can be imported using their `workspace/repo-slug/key-id` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/deployKey:DeployKey key workspace/repo-slug/key-id\n```\n\n ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment parsed from the Deploy key (if present)\n"
                },
                "key": {
                    "type": "string",
                    "description": "The SSH public key value in OpenSSH format.\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "The Deploy key's ID.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The user-defined label for the Deploy key\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The Repository to create deploy key in.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The Workspace where the repository resides.\n"
                }
            },
            "required": [
                "comment",
                "keyId",
                "repository",
                "workspace"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The SSH public key value in OpenSSH format.\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "The user-defined label for the Deploy key\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The Repository to create deploy key in.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The Workspace where the repository resides.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "repository",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeployKey resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The comment parsed from the Deploy key (if present)\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The SSH public key value in OpenSSH format.\n",
                        "willReplaceOnChanges": true
                    },
                    "keyId": {
                        "type": "string",
                        "description": "The Deploy key's ID.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The user-defined label for the Deploy key\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The Repository to create deploy key in.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The Workspace where the repository resides.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/deployment:Deployment": {
            "description": "This resource allows you to setup pipelines deployment environments.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst monorepo = new bitbucket.Repository(\"monorepo\", {\n    owner: \"gob\",\n    pipelinesEnabled: true,\n});\nconst test = new bitbucket.Deployment(\"test\", {\n    repository: monorepo.id,\n    stage: \"Test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nmonorepo = bitbucket.Repository(\"monorepo\",\n    owner=\"gob\",\n    pipelines_enabled=True)\ntest = bitbucket.Deployment(\"test\",\n    repository=monorepo.id,\n    stage=\"Test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var monorepo = new Bitbucket.Repository(\"monorepo\", new()\n    {\n        Owner = \"gob\",\n        PipelinesEnabled = true,\n    });\n\n    var test = new Bitbucket.Deployment(\"test\", new()\n    {\n        Repository = monorepo.Id,\n        Stage = \"Test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmonorepo, err := bitbucket.NewRepository(ctx, \"monorepo\", \u0026bitbucket.RepositoryArgs{\n\t\t\tOwner:            pulumi.String(\"gob\"),\n\t\t\tPipelinesEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = bitbucket.NewDeployment(ctx, \"test\", \u0026bitbucket.DeploymentArgs{\n\t\t\tRepository: monorepo.ID(),\n\t\t\tStage:      pulumi.String(\"Test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.Repository;\nimport com.pulumi.bitbucket.RepositoryArgs;\nimport com.pulumi.bitbucket.Deployment;\nimport com.pulumi.bitbucket.DeploymentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var monorepo = new Repository(\"monorepo\", RepositoryArgs.builder()        \n            .owner(\"gob\")\n            .pipelinesEnabled(true)\n            .build());\n\n        var test = new Deployment(\"test\", DeploymentArgs.builder()        \n            .repository(monorepo.id())\n            .stage(\"Test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  monorepo:\n    type: bitbucket:Repository\n    properties:\n      owner: gob\n      pipelinesEnabled: true\n  test:\n    type: bitbucket:Deployment\n    properties:\n      repository: ${monorepo.id}\n      stage: Test\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDeployments can be imported using their `repository/uuid` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/deployment:Deployment example repository/uuid\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the deployment environment\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository ID to which you want to assign this deployment environment to\n"
                },
                "restrictions": {
                    "$ref": "#/types/bitbucket:index/DeploymentRestrictions:DeploymentRestrictions",
                    "description": "Deployment restrictions. See Restrictions below.\n"
                },
                "stage": {
                    "type": "string",
                    "description": "The stage (Test, Staging, Production)\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Computed) The UUID identifying the deployment.\n"
                }
            },
            "required": [
                "name",
                "repository",
                "restrictions",
                "stage",
                "uuid"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the deployment environment\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository ID to which you want to assign this deployment environment to\n",
                    "willReplaceOnChanges": true
                },
                "restrictions": {
                    "$ref": "#/types/bitbucket:index/DeploymentRestrictions:DeploymentRestrictions",
                    "description": "Deployment restrictions. See Restrictions below.\n"
                },
                "stage": {
                    "type": "string",
                    "description": "The stage (Test, Staging, Production)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "repository",
                "stage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Deployment resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the deployment environment\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository ID to which you want to assign this deployment environment to\n",
                        "willReplaceOnChanges": true
                    },
                    "restrictions": {
                        "$ref": "#/types/bitbucket:index/DeploymentRestrictions:DeploymentRestrictions",
                        "description": "Deployment restrictions. See Restrictions below.\n"
                    },
                    "stage": {
                        "type": "string",
                        "description": "The stage (Test, Staging, Production)\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "(Computed) The UUID identifying the deployment.\n"
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/deploymentVariable:DeploymentVariable": {
            "description": "This resource allows you to configure deployment variables.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst monorepo = new bitbucket.Repository(\"monorepo\", {\n    owner: \"gob\",\n    pipelinesEnabled: true,\n});\nconst test = new bitbucket.Deployment(\"test\", {\n    repository: monorepo.id,\n    stage: \"Test\",\n});\nconst country = new bitbucket.DeploymentVariable(\"country\", {\n    deployment: test.id,\n    key: \"COUNTRY\",\n    value: \"Kenya\",\n    secured: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nmonorepo = bitbucket.Repository(\"monorepo\",\n    owner=\"gob\",\n    pipelines_enabled=True)\ntest = bitbucket.Deployment(\"test\",\n    repository=monorepo.id,\n    stage=\"Test\")\ncountry = bitbucket.DeploymentVariable(\"country\",\n    deployment=test.id,\n    key=\"COUNTRY\",\n    value=\"Kenya\",\n    secured=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var monorepo = new Bitbucket.Repository(\"monorepo\", new()\n    {\n        Owner = \"gob\",\n        PipelinesEnabled = true,\n    });\n\n    var test = new Bitbucket.Deployment(\"test\", new()\n    {\n        Repository = monorepo.Id,\n        Stage = \"Test\",\n    });\n\n    var country = new Bitbucket.DeploymentVariable(\"country\", new()\n    {\n        Deployment = test.Id,\n        Key = \"COUNTRY\",\n        Value = \"Kenya\",\n        Secured = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmonorepo, err := bitbucket.NewRepository(ctx, \"monorepo\", \u0026bitbucket.RepositoryArgs{\n\t\t\tOwner:            pulumi.String(\"gob\"),\n\t\t\tPipelinesEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttest, err := bitbucket.NewDeployment(ctx, \"test\", \u0026bitbucket.DeploymentArgs{\n\t\t\tRepository: monorepo.ID(),\n\t\t\tStage:      pulumi.String(\"Test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = bitbucket.NewDeploymentVariable(ctx, \"country\", \u0026bitbucket.DeploymentVariableArgs{\n\t\t\tDeployment: test.ID(),\n\t\t\tKey:        pulumi.String(\"COUNTRY\"),\n\t\t\tValue:      pulumi.String(\"Kenya\"),\n\t\t\tSecured:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.Repository;\nimport com.pulumi.bitbucket.RepositoryArgs;\nimport com.pulumi.bitbucket.Deployment;\nimport com.pulumi.bitbucket.DeploymentArgs;\nimport com.pulumi.bitbucket.DeploymentVariable;\nimport com.pulumi.bitbucket.DeploymentVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var monorepo = new Repository(\"monorepo\", RepositoryArgs.builder()        \n            .owner(\"gob\")\n            .pipelinesEnabled(true)\n            .build());\n\n        var test = new Deployment(\"test\", DeploymentArgs.builder()        \n            .repository(monorepo.id())\n            .stage(\"Test\")\n            .build());\n\n        var country = new DeploymentVariable(\"country\", DeploymentVariableArgs.builder()        \n            .deployment(test.id())\n            .key(\"COUNTRY\")\n            .value(\"Kenya\")\n            .secured(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  monorepo:\n    type: bitbucket:Repository\n    properties:\n      owner: gob\n      pipelinesEnabled: true\n  test:\n    type: bitbucket:Deployment\n    properties:\n      repository: ${monorepo.id}\n      stage: Test\n  country:\n    type: bitbucket:DeploymentVariable\n    properties:\n      deployment: ${test.id}\n      key: COUNTRY\n      value: Kenya\n      secured: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDeployment Variables can be imported using their `deployment-id/uuid` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/deploymentVariable:DeploymentVariable example deployment-id/uuid\n```\n\n ",
            "properties": {
                "deployment": {
                    "type": "string",
                    "description": "The deployment ID you want to assign this variable to.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The unique name of the variable.\n"
                },
                "secured": {
                    "type": "boolean",
                    "description": "If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Computed) The UUID identifying the variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n",
                    "secret": true
                }
            },
            "required": [
                "deployment",
                "key",
                "uuid",
                "value"
            ],
            "inputProperties": {
                "deployment": {
                    "type": "string",
                    "description": "The deployment ID you want to assign this variable to.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The unique name of the variable.\n"
                },
                "secured": {
                    "type": "boolean",
                    "description": "If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "deployment",
                "key",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeploymentVariable resources.\n",
                "properties": {
                    "deployment": {
                        "type": "string",
                        "description": "The deployment ID you want to assign this variable to.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The unique name of the variable.\n"
                    },
                    "secured": {
                        "type": "boolean",
                        "description": "If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "(Computed) The UUID identifying the variable.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the variable.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/forkedRepository:ForkedRepository": {
            "description": "Provides a Bitbucket repository resource that is forked from a parent repo.\n\nThis resource allows you manage properties of the fork, if it is\nprivate, how to fork the repository and other options. SCM cannot be overridden,\nas it is inherited from the parent repository. Creation will fail if the parent\nrepo has `no_forks` as its fork policy.\n\nOAuth2 Scopes: `repository`, `repository:admin`, and `repository:delete`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst infrastructure = new bitbucket.ForkedRepository(\"infrastructure\", {owner: \"myteam\"});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ninfrastructure = bitbucket.ForkedRepository(\"infrastructure\", owner=\"myteam\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infrastructure = new Bitbucket.ForkedRepository(\"infrastructure\", new()\n    {\n        Owner = \"myteam\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewForkedRepository(ctx, \"infrastructure\", \u0026bitbucket.ForkedRepositoryArgs{\n\t\t\tOwner: pulumi.String(\"myteam\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.ForkedRepository;\nimport com.pulumi.bitbucket.ForkedRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var infrastructure = new ForkedRepository(\"infrastructure\", ForkedRepositoryArgs.builder()        \n            .owner(\"myteam\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infrastructure:\n    type: bitbucket:ForkedRepository\n    properties:\n      owner: myteam\n```\n\nIf you want to create a repository with a CamelCase name, you should provide\na separate slug\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst infrastructure = new bitbucket.ForkedRepository(\"infrastructure\", {\n    owner: \"myteam\",\n    slug: \"terraform-code\",\n    parent: {\n        owner: bitbucket_repository.test.owner,\n        slug: bitbucket_repository.test.slug,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ninfrastructure = bitbucket.ForkedRepository(\"infrastructure\",\n    owner=\"myteam\",\n    slug=\"terraform-code\",\n    parent={\n        \"owner\": bitbucket_repository[\"test\"][\"owner\"],\n        \"slug\": bitbucket_repository[\"test\"][\"slug\"],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infrastructure = new Bitbucket.ForkedRepository(\"infrastructure\", new()\n    {\n        Owner = \"myteam\",\n        Slug = \"terraform-code\",\n        Parent = \n        {\n            { \"owner\", bitbucket_repository.Test.Owner },\n            { \"slug\", bitbucket_repository.Test.Slug },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewForkedRepository(ctx, \"infrastructure\", \u0026bitbucket.ForkedRepositoryArgs{\n\t\t\tOwner: pulumi.String(\"myteam\"),\n\t\t\tSlug:  pulumi.String(\"terraform-code\"),\n\t\t\tParent: pulumi.StringMap{\n\t\t\t\t\"owner\": pulumi.Any(bitbucket_repository.Test.Owner),\n\t\t\t\t\"slug\":  pulumi.Any(bitbucket_repository.Test.Slug),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.ForkedRepository;\nimport com.pulumi.bitbucket.ForkedRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var infrastructure = new ForkedRepository(\"infrastructure\", ForkedRepositoryArgs.builder()        \n            .owner(\"myteam\")\n            .slug(\"terraform-code\")\n            .parent(Map.ofEntries(\n                Map.entry(\"owner\", bitbucket_repository.test().owner()),\n                Map.entry(\"slug\", bitbucket_repository.test().slug())\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infrastructure:\n    type: bitbucket:ForkedRepository\n    properties:\n      owner: myteam\n      slug: terraform-code\n      parent:\n        owner: ${bitbucket_repository.test.owner}\n        slug: ${bitbucket_repository.test.slug}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepositories can be imported using their `owner/name` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/forkedRepository:ForkedRepository my-repo my-account/my-repo\n```\n\n ",
            "properties": {
                "cloneHttps": {
                    "type": "string",
                    "description": "The HTTPS clone URL.\n"
                },
                "cloneSsh": {
                    "type": "string",
                    "description": "The SSH clone URL.\n"
                },
                "description": {
                    "type": "string",
                    "description": "What the description of the repo is.\n"
                },
                "forkPolicy": {
                    "type": "string",
                    "description": "What the fork policy should be. Defaults to\n`allow_forks`. Valid values are `allow_forks`, `no_public_forks`, `no_forks`.\n"
                },
                "hasIssues": {
                    "type": "boolean",
                    "description": "If this should have issues turned on or not.\n"
                },
                "hasWiki": {
                    "type": "boolean",
                    "description": "If this should have wiki turned on or not.\n"
                },
                "isPrivate": {
                    "type": "boolean",
                    "description": "If this should be private or not. Defaults to `true`. Note that if\nthe parent repo has `no_public_forks` as its fork policy, the resource may\nfail to be created.\n"
                },
                "language": {
                    "type": "string",
                    "description": "What the language of this repository should be.\n"
                },
                "link": {
                    "$ref": "#/types/bitbucket:index/ForkedRepositoryLink:ForkedRepositoryLink",
                    "description": "A set of links to a resource related to this object. See Link Below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n"
                },
                "parent": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The repository to fork from. See Parent below.\n"
                },
                "pipelinesEnabled": {
                    "type": "boolean",
                    "description": "Turn on to enable pipelines support.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "If you want to have this repo associated with a\nproject.\n"
                },
                "scm": {
                    "type": "string",
                    "description": "The SCM of the resource. Either `hg` or `git`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the repository.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The uuid of the repository resource.\n"
                },
                "website": {
                    "type": "string",
                    "description": "URL of website associated with this repository.\n"
                }
            },
            "required": [
                "cloneHttps",
                "cloneSsh",
                "link",
                "name",
                "owner",
                "parent",
                "projectKey",
                "scm",
                "slug",
                "uuid"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "What the description of the repo is.\n"
                },
                "forkPolicy": {
                    "type": "string",
                    "description": "What the fork policy should be. Defaults to\n`allow_forks`. Valid values are `allow_forks`, `no_public_forks`, `no_forks`.\n"
                },
                "hasIssues": {
                    "type": "boolean",
                    "description": "If this should have issues turned on or not.\n"
                },
                "hasWiki": {
                    "type": "boolean",
                    "description": "If this should have wiki turned on or not.\n"
                },
                "isPrivate": {
                    "type": "boolean",
                    "description": "If this should be private or not. Defaults to `true`. Note that if\nthe parent repo has `no_public_forks` as its fork policy, the resource may\nfail to be created.\n"
                },
                "language": {
                    "type": "string",
                    "description": "What the language of this repository should be.\n"
                },
                "link": {
                    "$ref": "#/types/bitbucket:index/ForkedRepositoryLink:ForkedRepositoryLink",
                    "description": "A set of links to a resource related to this object. See Link Below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n"
                },
                "parent": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The repository to fork from. See Parent below.\n",
                    "willReplaceOnChanges": true
                },
                "pipelinesEnabled": {
                    "type": "boolean",
                    "description": "Turn on to enable pipelines support.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "If you want to have this repo associated with a\nproject.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the repository.\n"
                },
                "website": {
                    "type": "string",
                    "description": "URL of website associated with this repository.\n"
                }
            },
            "requiredInputs": [
                "owner",
                "parent"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ForkedRepository resources.\n",
                "properties": {
                    "cloneHttps": {
                        "type": "string",
                        "description": "The HTTPS clone URL.\n"
                    },
                    "cloneSsh": {
                        "type": "string",
                        "description": "The SSH clone URL.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "What the description of the repo is.\n"
                    },
                    "forkPolicy": {
                        "type": "string",
                        "description": "What the fork policy should be. Defaults to\n`allow_forks`. Valid values are `allow_forks`, `no_public_forks`, `no_forks`.\n"
                    },
                    "hasIssues": {
                        "type": "boolean",
                        "description": "If this should have issues turned on or not.\n"
                    },
                    "hasWiki": {
                        "type": "boolean",
                        "description": "If this should have wiki turned on or not.\n"
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "description": "If this should be private or not. Defaults to `true`. Note that if\nthe parent repo has `no_public_forks` as its fork policy, the resource may\nfail to be created.\n"
                    },
                    "language": {
                        "type": "string",
                        "description": "What the language of this repository should be.\n"
                    },
                    "link": {
                        "$ref": "#/types/bitbucket:index/ForkedRepositoryLink:ForkedRepositoryLink",
                        "description": "A set of links to a resource related to this object. See Link Below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n"
                    },
                    "parent": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The repository to fork from. See Parent below.\n",
                        "willReplaceOnChanges": true
                    },
                    "pipelinesEnabled": {
                        "type": "boolean",
                        "description": "Turn on to enable pipelines support.\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "If you want to have this repo associated with a\nproject.\n"
                    },
                    "scm": {
                        "type": "string",
                        "description": "The SCM of the resource. Either `hg` or `git`.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the repository.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The uuid of the repository resource.\n"
                    },
                    "website": {
                        "type": "string",
                        "description": "URL of website associated with this repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/group:Group": {
            "description": "Provides a Bitbucket group resource.\n\nThis allows you to manage your groups.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst testWorkspace = bitbucket.getWorkspace({\n    workspace: \"example\",\n});\nconst testGroup = new bitbucket.Group(\"testGroup\", {\n    workspace: testWorkspace.then(testWorkspace =\u003e testWorkspace.id),\n    autoAdd: true,\n    permission: \"read\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ntest_workspace = bitbucket.get_workspace(workspace=\"example\")\ntest_group = bitbucket.Group(\"testGroup\",\n    workspace=test_workspace.id,\n    auto_add=True,\n    permission=\"read\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testWorkspace = Bitbucket.GetWorkspace.Invoke(new()\n    {\n        Workspace = \"example\",\n    });\n\n    var testGroup = new Bitbucket.Group(\"testGroup\", new()\n    {\n        Workspace = testWorkspace.Apply(getWorkspaceResult =\u003e getWorkspaceResult.Id),\n        AutoAdd = true,\n        Permission = \"read\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestWorkspace, err := bitbucket.GetWorkspace(ctx, \u0026bitbucket.GetWorkspaceArgs{\n\t\t\tWorkspace: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = bitbucket.NewGroup(ctx, \"testGroup\", \u0026bitbucket.GroupArgs{\n\t\t\tWorkspace:  *pulumi.String(testWorkspace.Id),\n\t\t\tAutoAdd:    pulumi.Bool(true),\n\t\t\tPermission: pulumi.String(\"read\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetWorkspaceArgs;\nimport com.pulumi.bitbucket.Group;\nimport com.pulumi.bitbucket.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testWorkspace = BitbucketFunctions.getWorkspace(GetWorkspaceArgs.builder()\n            .workspace(\"example\")\n            .build());\n\n        var testGroup = new Group(\"testGroup\", GroupArgs.builder()        \n            .workspace(testWorkspace.applyValue(getWorkspaceResult -\u003e getWorkspaceResult.id()))\n            .autoAdd(true)\n            .permission(\"read\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testGroup:\n    type: bitbucket:Group\n    properties:\n      workspace: ${testWorkspace.id}\n      autoAdd: true\n      permission: read\nvariables:\n  testWorkspace:\n    fn::invoke:\n      Function: bitbucket:getWorkspace\n      Arguments:\n        workspace: example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGroups can be imported using their `workspace/group-slug` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/group:Group group my-workspace/group-slug\n```\n\n ",
            "properties": {
                "autoAdd": {
                    "type": "boolean",
                    "description": "Whether to automatically add users the group\n"
                },
                "emailForwardingDisabled": {
                    "type": "boolean",
                    "description": "Whether to disable email forwarding for group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "One of `read`, `write`, and `admin`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The groups slug.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace of this repository.\n"
                }
            },
            "required": [
                "name",
                "slug",
                "workspace"
            ],
            "inputProperties": {
                "autoAdd": {
                    "type": "boolean",
                    "description": "Whether to automatically add users the group\n"
                },
                "emailForwardingDisabled": {
                    "type": "boolean",
                    "description": "Whether to disable email forwarding for group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "One of `read`, `write`, and `admin`.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace of this repository.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "autoAdd": {
                        "type": "boolean",
                        "description": "Whether to automatically add users the group\n"
                    },
                    "emailForwardingDisabled": {
                        "type": "boolean",
                        "description": "Whether to disable email forwarding for group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the group.\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "One of `read`, `write`, and `admin`.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The groups slug.\n"
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace of this repository.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/groupMembership:GroupMembership": {
            "description": "Provides a Bitbucket group membership resource.\n\nThis allows you to manage your group membership.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst testWorkspace = bitbucket.getWorkspace({\n    workspace: \"example\",\n});\nconst testGroup = new bitbucket.Group(\"testGroup\", {workspace: testWorkspace.then(testWorkspace =\u003e testWorkspace.id)});\nconst testCurrentUser = bitbucket.getCurrentUser({});\nconst testGroupMembership = new bitbucket.GroupMembership(\"testGroupMembership\", {\n    workspace: testGroup.workspace,\n    groupSlug: testGroup.slug,\n    uuid: testCurrentUser.then(testCurrentUser =\u003e testCurrentUser.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ntest_workspace = bitbucket.get_workspace(workspace=\"example\")\ntest_group = bitbucket.Group(\"testGroup\", workspace=test_workspace.id)\ntest_current_user = bitbucket.get_current_user()\ntest_group_membership = bitbucket.GroupMembership(\"testGroupMembership\",\n    workspace=test_group.workspace,\n    group_slug=test_group.slug,\n    uuid=test_current_user.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testWorkspace = Bitbucket.GetWorkspace.Invoke(new()\n    {\n        Workspace = \"example\",\n    });\n\n    var testGroup = new Bitbucket.Group(\"testGroup\", new()\n    {\n        Workspace = testWorkspace.Apply(getWorkspaceResult =\u003e getWorkspaceResult.Id),\n    });\n\n    var testCurrentUser = Bitbucket.GetCurrentUser.Invoke();\n\n    var testGroupMembership = new Bitbucket.GroupMembership(\"testGroupMembership\", new()\n    {\n        Workspace = testGroup.Workspace,\n        GroupSlug = testGroup.Slug,\n        Uuid = testCurrentUser.Apply(getCurrentUserResult =\u003e getCurrentUserResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestWorkspace, err := bitbucket.GetWorkspace(ctx, \u0026bitbucket.GetWorkspaceArgs{\n\t\t\tWorkspace: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestGroup, err := bitbucket.NewGroup(ctx, \"testGroup\", \u0026bitbucket.GroupArgs{\n\t\t\tWorkspace: *pulumi.String(testWorkspace.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestCurrentUser, err := bitbucket.GetCurrentUser(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = bitbucket.NewGroupMembership(ctx, \"testGroupMembership\", \u0026bitbucket.GroupMembershipArgs{\n\t\t\tWorkspace: testGroup.Workspace,\n\t\t\tGroupSlug: testGroup.Slug,\n\t\t\tUuid:      *pulumi.String(testCurrentUser.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetWorkspaceArgs;\nimport com.pulumi.bitbucket.Group;\nimport com.pulumi.bitbucket.GroupArgs;\nimport com.pulumi.bitbucket.GroupMembership;\nimport com.pulumi.bitbucket.GroupMembershipArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testWorkspace = BitbucketFunctions.getWorkspace(GetWorkspaceArgs.builder()\n            .workspace(\"example\")\n            .build());\n\n        var testGroup = new Group(\"testGroup\", GroupArgs.builder()        \n            .workspace(testWorkspace.applyValue(getWorkspaceResult -\u003e getWorkspaceResult.id()))\n            .build());\n\n        final var testCurrentUser = BitbucketFunctions.getCurrentUser();\n\n        var testGroupMembership = new GroupMembership(\"testGroupMembership\", GroupMembershipArgs.builder()        \n            .workspace(testGroup.workspace())\n            .groupSlug(testGroup.slug())\n            .uuid(testCurrentUser.applyValue(getCurrentUserResult -\u003e getCurrentUserResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testGroup:\n    type: bitbucket:Group\n    properties:\n      workspace: ${testWorkspace.id}\n  testGroupMembership:\n    type: bitbucket:GroupMembership\n    properties:\n      workspace: ${testGroup.workspace}\n      groupSlug: ${testGroup.slug}\n      uuid: ${testCurrentUser.id}\nvariables:\n  testWorkspace:\n    fn::invoke:\n      Function: bitbucket:getWorkspace\n      Arguments:\n        workspace: example\n  testCurrentUser:\n    fn::invoke:\n      Function: bitbucket:getCurrentUser\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nGroup Members can be imported using their `workspace/group-slug/member-uuid` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/groupMembership:GroupMembership group my-workspace/group-slug/member-uuid\n```\n\n ",
            "properties": {
                "groupSlug": {
                    "type": "string",
                    "description": "The slug of the group.\n"
                },
                "slug": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "The member UUID to add to the group.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace of this repository.\n"
                }
            },
            "required": [
                "groupSlug",
                "slug",
                "uuid",
                "workspace"
            ],
            "inputProperties": {
                "groupSlug": {
                    "type": "string",
                    "description": "The slug of the group.\n",
                    "willReplaceOnChanges": true
                },
                "uuid": {
                    "type": "string",
                    "description": "The member UUID to add to the group.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace of this repository.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupSlug",
                "uuid",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GroupMembership resources.\n",
                "properties": {
                    "groupSlug": {
                        "type": "string",
                        "description": "The slug of the group.\n",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The member UUID to add to the group.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace of this repository.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/hook:Hook": {
            "description": "Provides a Bitbucket hook resource.\n\nThis allows you to manage your webhooks on a repository.\n\nOAuth2 Scopes: `webhook`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst deployOnPush = new bitbucket.Hook(\"deployOnPush\", {\n    description: \"Deploy the code via my webhook\",\n    events: [\"repo:push\"],\n    owner: \"myteam\",\n    repository: \"terraform-code\",\n    url: \"https://mywebhookservice.mycompany.com/deploy-on-push\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ndeploy_on_push = bitbucket.Hook(\"deployOnPush\",\n    description=\"Deploy the code via my webhook\",\n    events=[\"repo:push\"],\n    owner=\"myteam\",\n    repository=\"terraform-code\",\n    url=\"https://mywebhookservice.mycompany.com/deploy-on-push\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var deployOnPush = new Bitbucket.Hook(\"deployOnPush\", new()\n    {\n        Description = \"Deploy the code via my webhook\",\n        Events = new[]\n        {\n            \"repo:push\",\n        },\n        Owner = \"myteam\",\n        Repository = \"terraform-code\",\n        Url = \"https://mywebhookservice.mycompany.com/deploy-on-push\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewHook(ctx, \"deployOnPush\", \u0026bitbucket.HookArgs{\n\t\t\tDescription: pulumi.String(\"Deploy the code via my webhook\"),\n\t\t\tEvents: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"repo:push\"),\n\t\t\t},\n\t\t\tOwner:      pulumi.String(\"myteam\"),\n\t\t\tRepository: pulumi.String(\"terraform-code\"),\n\t\t\tUrl:        pulumi.String(\"https://mywebhookservice.mycompany.com/deploy-on-push\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.Hook;\nimport com.pulumi.bitbucket.HookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var deployOnPush = new Hook(\"deployOnPush\", HookArgs.builder()        \n            .description(\"Deploy the code via my webhook\")\n            .events(\"repo:push\")\n            .owner(\"myteam\")\n            .repository(\"terraform-code\")\n            .url(\"https://mywebhookservice.mycompany.com/deploy-on-push\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  deployOnPush:\n    type: bitbucket:Hook\n    properties:\n      description: Deploy the code via my webhook\n      events:\n        - repo:push\n      owner: myteam\n      repository: terraform-code\n      url: https://mywebhookservice.mycompany.com/deploy-on-push\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nHooks can be imported using their `owner/repo-name/hook-id` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/hook:Hook hook my-account/my-repo/hook-id\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether the webhook configuration is active or not (Default: `true`).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The name / description to show in the UI.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).\n"
                },
                "historyEnabled": {
                    "type": "boolean",
                    "description": "Whether a webhook history is enabled.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.\n",
                    "secret": true
                },
                "secretSet": {
                    "type": "boolean",
                    "description": "Whether a webhook secret is set.\n"
                },
                "skipCertVerification": {
                    "type": "boolean",
                    "description": "Whether to skip certificate verification or not (Default: `true`).\n"
                },
                "url": {
                    "type": "string",
                    "description": "Where to POST to.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID of the workspace webhook.\n"
                }
            },
            "required": [
                "description",
                "events",
                "owner",
                "repository",
                "secretSet",
                "url",
                "uuid"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether the webhook configuration is active or not (Default: `true`).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The name / description to show in the UI.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).\n"
                },
                "historyEnabled": {
                    "type": "boolean",
                    "description": "Whether a webhook history is enabled.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n",
                    "willReplaceOnChanges": true
                },
                "repository": {
                    "type": "string",
                    "description": "The name of the repository.\n",
                    "willReplaceOnChanges": true
                },
                "secret": {
                    "type": "string",
                    "description": "A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.\n",
                    "secret": true
                },
                "skipCertVerification": {
                    "type": "boolean",
                    "description": "Whether to skip certificate verification or not (Default: `true`).\n"
                },
                "url": {
                    "type": "string",
                    "description": "Where to POST to.\n"
                }
            },
            "requiredInputs": [
                "description",
                "events",
                "owner",
                "repository",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Hook resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Whether the webhook configuration is active or not (Default: `true`).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The name / description to show in the UI.\n"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).\n"
                    },
                    "historyEnabled": {
                        "type": "boolean",
                        "description": "Whether a webhook history is enabled.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n",
                        "willReplaceOnChanges": true
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the repository.\n",
                        "willReplaceOnChanges": true
                    },
                    "secret": {
                        "type": "string",
                        "description": "A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.\n",
                        "secret": true
                    },
                    "secretSet": {
                        "type": "boolean",
                        "description": "Whether a webhook secret is set.\n"
                    },
                    "skipCertVerification": {
                        "type": "boolean",
                        "description": "Whether to skip certificate verification or not (Default: `true`).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Where to POST to.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of the workspace webhook.\n"
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/pipelineSchedule:PipelineSchedule": {
            "description": "Provides a Bitbucket Pipeline Schedule resource.\n\nThis allows you to manage your Pipeline Schedules for a repository.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst test = new bitbucket.PipelineSchedule(\"test\", {\n    workspace: \"example\",\n    repository: bitbucket_repository.test.name,\n    cronPattern: \"0 30 * * * ? *\",\n    enabled: true,\n    target: {\n        refName: \"master\",\n        refType: \"branch\",\n        selector: {\n            pattern: \"staging\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ntest = bitbucket.PipelineSchedule(\"test\",\n    workspace=\"example\",\n    repository=bitbucket_repository[\"test\"][\"name\"],\n    cron_pattern=\"0 30 * * * ? *\",\n    enabled=True,\n    target=bitbucket.PipelineScheduleTargetArgs(\n        ref_name=\"master\",\n        ref_type=\"branch\",\n        selector=bitbucket.PipelineScheduleTargetSelectorArgs(\n            pattern=\"staging\",\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Bitbucket.PipelineSchedule(\"test\", new()\n    {\n        Workspace = \"example\",\n        Repository = bitbucket_repository.Test.Name,\n        CronPattern = \"0 30 * * * ? *\",\n        Enabled = true,\n        Target = new Bitbucket.Inputs.PipelineScheduleTargetArgs\n        {\n            RefName = \"master\",\n            RefType = \"branch\",\n            Selector = new Bitbucket.Inputs.PipelineScheduleTargetSelectorArgs\n            {\n                Pattern = \"staging\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewPipelineSchedule(ctx, \"test\", \u0026bitbucket.PipelineScheduleArgs{\n\t\t\tWorkspace:   pulumi.String(\"example\"),\n\t\t\tRepository:  pulumi.Any(bitbucket_repository.Test.Name),\n\t\t\tCronPattern: pulumi.String(\"0 30 * * * ? *\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tTarget: \u0026bitbucket.PipelineScheduleTargetArgs{\n\t\t\t\tRefName: pulumi.String(\"master\"),\n\t\t\t\tRefType: pulumi.String(\"branch\"),\n\t\t\t\tSelector: \u0026bitbucket.PipelineScheduleTargetSelectorArgs{\n\t\t\t\t\tPattern: pulumi.String(\"staging\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.PipelineSchedule;\nimport com.pulumi.bitbucket.PipelineScheduleArgs;\nimport com.pulumi.bitbucket.inputs.PipelineScheduleTargetArgs;\nimport com.pulumi.bitbucket.inputs.PipelineScheduleTargetSelectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new PipelineSchedule(\"test\", PipelineScheduleArgs.builder()        \n            .workspace(\"example\")\n            .repository(bitbucket_repository.test().name())\n            .cronPattern(\"0 30 * * * ? *\")\n            .enabled(true)\n            .target(PipelineScheduleTargetArgs.builder()\n                .refName(\"master\")\n                .refType(\"branch\")\n                .selector(PipelineScheduleTargetSelectorArgs.builder()\n                    .pattern(\"staging\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: bitbucket:PipelineSchedule\n    properties:\n      workspace: example\n      repository: ${bitbucket_repository.test.name}\n      cronPattern: 0 30 * * * ? *\n      enabled: true\n      target:\n        refName: master\n        refType: branch\n        selector:\n          pattern: staging\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPipeline Schedules can be imported using their `workspace/repo-slug/uuid` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/pipelineSchedule:PipelineSchedule schedule workspace/repo-slug/uuid\n```\n\n ",
            "properties": {
                "cronPattern": {
                    "type": "string",
                    "description": "The cron expression that the schedule applies.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the schedule is enabled.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The Repository to create schedule in.\n"
                },
                "target": {
                    "$ref": "#/types/bitbucket:index/PipelineScheduleTarget:PipelineScheduleTarget",
                    "description": "Schedule Target definition. See Target below.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID identifying the schedule.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The Workspace where the repository resides.\n"
                }
            },
            "required": [
                "cronPattern",
                "enabled",
                "repository",
                "target",
                "uuid",
                "workspace"
            ],
            "inputProperties": {
                "cronPattern": {
                    "type": "string",
                    "description": "The cron expression that the schedule applies.\n",
                    "willReplaceOnChanges": true
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the schedule is enabled.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The Repository to create schedule in.\n",
                    "willReplaceOnChanges": true
                },
                "target": {
                    "$ref": "#/types/bitbucket:index/PipelineScheduleTarget:PipelineScheduleTarget",
                    "description": "Schedule Target definition. See Target below.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The Workspace where the repository resides.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cronPattern",
                "enabled",
                "repository",
                "target",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineSchedule resources.\n",
                "properties": {
                    "cronPattern": {
                        "type": "string",
                        "description": "The cron expression that the schedule applies.\n",
                        "willReplaceOnChanges": true
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the schedule is enabled.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The Repository to create schedule in.\n",
                        "willReplaceOnChanges": true
                    },
                    "target": {
                        "$ref": "#/types/bitbucket:index/PipelineScheduleTarget:PipelineScheduleTarget",
                        "description": "Schedule Target definition. See Target below.\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID identifying the schedule.\n"
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The Workspace where the repository resides.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/pipelineSshKey:PipelineSshKey": {
            "description": "Provides a Bitbucket Pipeline Ssh Key resource.\n\nThis allows you to manage your Pipeline Ssh Keys for a repository.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst test = new bitbucket.PipelineSshKey(\"test\", {\n    privateKey: \"test-key\",\n    publicKey: \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",\n    repository: \"example\",\n    workspace: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ntest = bitbucket.PipelineSshKey(\"test\",\n    private_key=\"test-key\",\n    public_key=\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",\n    repository=\"example\",\n    workspace=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Bitbucket.PipelineSshKey(\"test\", new()\n    {\n        PrivateKey = \"test-key\",\n        PublicKey = \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",\n        Repository = \"example\",\n        Workspace = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewPipelineSshKey(ctx, \"test\", \u0026bitbucket.PipelineSshKeyArgs{\n\t\t\tPrivateKey: pulumi.String(\"test-key\"),\n\t\t\tPublicKey:  pulumi.String(\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\"),\n\t\t\tRepository: pulumi.String(\"example\"),\n\t\t\tWorkspace:  pulumi.String(\"example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.PipelineSshKey;\nimport com.pulumi.bitbucket.PipelineSshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new PipelineSshKey(\"test\", PipelineSshKeyArgs.builder()        \n            .privateKey(\"test-key\")\n            .publicKey(\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\")\n            .repository(\"example\")\n            .workspace(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: bitbucket:PipelineSshKey\n    properties:\n      privateKey: test-key\n      publicKey: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\n      repository: example\n      workspace: example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPipeline Ssh Keys can be imported using their `workspace/repo-slug` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/pipelineSshKey:PipelineSshKey key workspace/repo-slug\n```\n\n ",
            "properties": {
                "privateKey": {
                    "type": "string",
                    "description": "The SSH private key value in OpenSSH format.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The SSH public key value in OpenSSH format.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The Repository to create ssh key in.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The Workspace where the repository resides.\n"
                }
            },
            "required": [
                "repository",
                "workspace"
            ],
            "inputProperties": {
                "privateKey": {
                    "type": "string",
                    "description": "The SSH private key value in OpenSSH format.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The SSH public key value in OpenSSH format.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The Repository to create ssh key in.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The Workspace where the repository resides.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "repository",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineSshKey resources.\n",
                "properties": {
                    "privateKey": {
                        "type": "string",
                        "description": "The SSH private key value in OpenSSH format.\n"
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The SSH public key value in OpenSSH format.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The Repository to create ssh key in.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The Workspace where the repository resides.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/pipelineSshKnownHost:PipelineSshKnownHost": {
            "description": "Provides a Bitbucket Pipeline Ssh Known Host resource.\n\nThis allows you to manage your Pipeline Ssh Known Hosts for a repository.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst test = new bitbucket.PipelineSshKnownHost(\"test\", {\n    workspace: \"example\",\n    repository: bitbucket_repository.test.name,\n    hostname: \"[example.com]:22\",\n    publicKey: {\n        keyType: \"ssh-ed25519\",\n        key: \"AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ntest = bitbucket.PipelineSshKnownHost(\"test\",\n    workspace=\"example\",\n    repository=bitbucket_repository[\"test\"][\"name\"],\n    hostname=\"[example.com]:22\",\n    public_key=bitbucket.PipelineSshKnownHostPublicKeyArgs(\n        key_type=\"ssh-ed25519\",\n        key=\"AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Bitbucket.PipelineSshKnownHost(\"test\", new()\n    {\n        Workspace = \"example\",\n        Repository = bitbucket_repository.Test.Name,\n        Hostname = \"[example.com]:22\",\n        PublicKey = new Bitbucket.Inputs.PipelineSshKnownHostPublicKeyArgs\n        {\n            KeyType = \"ssh-ed25519\",\n            Key = \"AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewPipelineSshKnownHost(ctx, \"test\", \u0026bitbucket.PipelineSshKnownHostArgs{\n\t\t\tWorkspace:  pulumi.String(\"example\"),\n\t\t\tRepository: pulumi.Any(bitbucket_repository.Test.Name),\n\t\t\tHostname:   pulumi.String(\"[example.com]:22\"),\n\t\t\tPublicKey: \u0026bitbucket.PipelineSshKnownHostPublicKeyArgs{\n\t\t\t\tKeyType: pulumi.String(\"ssh-ed25519\"),\n\t\t\t\tKey:     pulumi.String(\"AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.PipelineSshKnownHost;\nimport com.pulumi.bitbucket.PipelineSshKnownHostArgs;\nimport com.pulumi.bitbucket.inputs.PipelineSshKnownHostPublicKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new PipelineSshKnownHost(\"test\", PipelineSshKnownHostArgs.builder()        \n            .workspace(\"example\")\n            .repository(bitbucket_repository.test().name())\n            .hostname(\"[example.com]:22\")\n            .publicKey(PipelineSshKnownHostPublicKeyArgs.builder()\n                .keyType(\"ssh-ed25519\")\n                .key(\"AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: bitbucket:PipelineSshKnownHost\n    properties:\n      workspace: example\n      repository: ${bitbucket_repository.test.name}\n      hostname: '[example.com]:22'\n      publicKey:\n        keyType: ssh-ed25519\n        key: AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPipeline Ssh Known Hosts can be imported using their `workspace/repo-slug/uuid` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/pipelineSshKnownHost:PipelineSshKnownHost key workspace/repo-slug/uuid\n```\n\n ",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the known host.\n"
                },
                "publicKey": {
                    "$ref": "#/types/bitbucket:index/PipelineSshKnownHostPublicKey:PipelineSshKnownHostPublicKey",
                    "description": "The Public key config for the known host.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The Repository to create config for the known host in.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID identifying the known host.\n* `public_key.0.md5_fingerprint` - The MD5 fingerprint of the public key.\n* `public_key.0.sha256_fingerprint` - The SHA-256 fingerprint of the public key.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The Workspace where the repository resides.\n"
                }
            },
            "required": [
                "publicKey",
                "repository",
                "uuid",
                "workspace"
            ],
            "inputProperties": {
                "hostname": {
                    "type": "string",
                    "description": "The hostname of the known host.\n"
                },
                "publicKey": {
                    "$ref": "#/types/bitbucket:index/PipelineSshKnownHostPublicKey:PipelineSshKnownHostPublicKey",
                    "description": "The Public key config for the known host.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The Repository to create config for the known host in.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The Workspace where the repository resides.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "publicKey",
                "repository",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineSshKnownHost resources.\n",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the known host.\n"
                    },
                    "publicKey": {
                        "$ref": "#/types/bitbucket:index/PipelineSshKnownHostPublicKey:PipelineSshKnownHostPublicKey",
                        "description": "The Public key config for the known host.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The Repository to create config for the known host in.\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID identifying the known host.\n* `public_key.0.md5_fingerprint` - The MD5 fingerprint of the public key.\n* `public_key.0.sha256_fingerprint` - The SHA-256 fingerprint of the public key.\n"
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The Workspace where the repository resides.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/project:Project": {
            "description": "This resource allows you to manage your projects in your bitbucket team.\n\nOAuth2 Scopes: `project` and `project:admin`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst devops = new bitbucket.Project(\"devops\", {\n    key: \"DEVOPS\",\n    owner: \"my-team\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ndevops = bitbucket.Project(\"devops\",\n    key=\"DEVOPS\",\n    owner=\"my-team\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var devops = new Bitbucket.Project(\"devops\", new()\n    {\n        Key = \"DEVOPS\",\n        Owner = \"my-team\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewProject(ctx, \"devops\", \u0026bitbucket.ProjectArgs{\n\t\t\tKey:   pulumi.String(\"DEVOPS\"),\n\t\t\tOwner: pulumi.String(\"my-team\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.Project;\nimport com.pulumi.bitbucket.ProjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var devops = new Project(\"devops\", ProjectArgs.builder()        \n            .key(\"DEVOPS\")\n            .owner(\"my-team\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  devops:\n    type: bitbucket:Project\n    properties:\n      key: DEVOPS\n      owner: my-team\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepositories can be imported using their `owner/key` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/project:Project my_project my-account/project_key\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the project\n"
                },
                "hasPubliclyVisibleRepos": {
                    "type": "boolean",
                    "description": "Indicates whether the project contains publicly visible repositories. Note that private projects cannot contain public repositories.\n"
                },
                "isPrivate": {
                    "type": "boolean",
                    "description": "If you want to keep the project private - defaults to `true`\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key used for this project\n"
                },
                "link": {
                    "$ref": "#/types/bitbucket:index/ProjectLink:ProjectLink",
                    "description": "A set of links to a resource related to this object. See Link Below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of this project. Can be you or any team you have write access to.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The project's immutable id.\n"
                }
            },
            "required": [
                "hasPubliclyVisibleRepos",
                "key",
                "link",
                "name",
                "owner",
                "uuid"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the project\n"
                },
                "isPrivate": {
                    "type": "boolean",
                    "description": "If you want to keep the project private - defaults to `true`\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key used for this project\n"
                },
                "link": {
                    "$ref": "#/types/bitbucket:index/ProjectLink:ProjectLink",
                    "description": "A set of links to a resource related to this object. See Link Below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of this project. Can be you or any team you have write access to.\n"
                }
            },
            "requiredInputs": [
                "key",
                "owner"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the project\n"
                    },
                    "hasPubliclyVisibleRepos": {
                        "type": "boolean",
                        "description": "Indicates whether the project contains publicly visible repositories. Note that private projects cannot contain public repositories.\n"
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "description": "If you want to keep the project private - defaults to `true`\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The key used for this project\n"
                    },
                    "link": {
                        "$ref": "#/types/bitbucket:index/ProjectLink:ProjectLink",
                        "description": "A set of links to a resource related to this object. See Link Below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The owner of this project. Can be you or any team you have write access to.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The project's immutable id.\n"
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/projectBranchingModel:ProjectBranchingModel": {
            "description": "Provides a Bitbucket project branching model resource.\n\nThis allows you for setting up branching models for your project.\n\nOAuth2 Scopes: `project:admin`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst exampleProject = new bitbucket.Project(\"exampleProject\", {\n    owner: \"example\",\n    key: \"FFFFF\",\n});\nconst exampleProjectBranchingModel = new bitbucket.ProjectBranchingModel(\"exampleProjectBranchingModel\", {\n    workspace: \"example\",\n    project: exampleProject.key,\n    development: {\n        useMainbranch: true,\n    },\n    branchTypes: [\n        {\n            enabled: true,\n            kind: \"feature\",\n            prefix: \"example/\",\n        },\n        {\n            enabled: true,\n            kind: \"hotfix\",\n            prefix: \"hotfix/\",\n        },\n        {\n            enabled: true,\n            kind: \"release\",\n            prefix: \"release/\",\n        },\n        {\n            enabled: true,\n            kind: \"bugfix\",\n            prefix: \"bugfix/\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample_project = bitbucket.Project(\"exampleProject\",\n    owner=\"example\",\n    key=\"FFFFF\")\nexample_project_branching_model = bitbucket.ProjectBranchingModel(\"exampleProjectBranchingModel\",\n    workspace=\"example\",\n    project=example_project.key,\n    development=bitbucket.ProjectBranchingModelDevelopmentArgs(\n        use_mainbranch=True,\n    ),\n    branch_types=[\n        bitbucket.ProjectBranchingModelBranchTypeArgs(\n            enabled=True,\n            kind=\"feature\",\n            prefix=\"example/\",\n        ),\n        bitbucket.ProjectBranchingModelBranchTypeArgs(\n            enabled=True,\n            kind=\"hotfix\",\n            prefix=\"hotfix/\",\n        ),\n        bitbucket.ProjectBranchingModelBranchTypeArgs(\n            enabled=True,\n            kind=\"release\",\n            prefix=\"release/\",\n        ),\n        bitbucket.ProjectBranchingModelBranchTypeArgs(\n            enabled=True,\n            kind=\"bugfix\",\n            prefix=\"bugfix/\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleProject = new Bitbucket.Project(\"exampleProject\", new()\n    {\n        Owner = \"example\",\n        Key = \"FFFFF\",\n    });\n\n    var exampleProjectBranchingModel = new Bitbucket.ProjectBranchingModel(\"exampleProjectBranchingModel\", new()\n    {\n        Workspace = \"example\",\n        Project = exampleProject.Key,\n        Development = new Bitbucket.Inputs.ProjectBranchingModelDevelopmentArgs\n        {\n            UseMainbranch = true,\n        },\n        BranchTypes = new[]\n        {\n            new Bitbucket.Inputs.ProjectBranchingModelBranchTypeArgs\n            {\n                Enabled = true,\n                Kind = \"feature\",\n                Prefix = \"example/\",\n            },\n            new Bitbucket.Inputs.ProjectBranchingModelBranchTypeArgs\n            {\n                Enabled = true,\n                Kind = \"hotfix\",\n                Prefix = \"hotfix/\",\n            },\n            new Bitbucket.Inputs.ProjectBranchingModelBranchTypeArgs\n            {\n                Enabled = true,\n                Kind = \"release\",\n                Prefix = \"release/\",\n            },\n            new Bitbucket.Inputs.ProjectBranchingModelBranchTypeArgs\n            {\n                Enabled = true,\n                Kind = \"bugfix\",\n                Prefix = \"bugfix/\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleProject, err := bitbucket.NewProject(ctx, \"exampleProject\", \u0026bitbucket.ProjectArgs{\n\t\t\tOwner: pulumi.String(\"example\"),\n\t\t\tKey:   pulumi.String(\"FFFFF\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = bitbucket.NewProjectBranchingModel(ctx, \"exampleProjectBranchingModel\", \u0026bitbucket.ProjectBranchingModelArgs{\n\t\t\tWorkspace: pulumi.String(\"example\"),\n\t\t\tProject:   exampleProject.Key,\n\t\t\tDevelopment: \u0026bitbucket.ProjectBranchingModelDevelopmentArgs{\n\t\t\t\tUseMainbranch: pulumi.Bool(true),\n\t\t\t},\n\t\t\tBranchTypes: bitbucket.ProjectBranchingModelBranchTypeArray{\n\t\t\t\t\u0026bitbucket.ProjectBranchingModelBranchTypeArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tKind:    pulumi.String(\"feature\"),\n\t\t\t\t\tPrefix:  pulumi.String(\"example/\"),\n\t\t\t\t},\n\t\t\t\t\u0026bitbucket.ProjectBranchingModelBranchTypeArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tKind:    pulumi.String(\"hotfix\"),\n\t\t\t\t\tPrefix:  pulumi.String(\"hotfix/\"),\n\t\t\t\t},\n\t\t\t\t\u0026bitbucket.ProjectBranchingModelBranchTypeArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tKind:    pulumi.String(\"release\"),\n\t\t\t\t\tPrefix:  pulumi.String(\"release/\"),\n\t\t\t\t},\n\t\t\t\t\u0026bitbucket.ProjectBranchingModelBranchTypeArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tKind:    pulumi.String(\"bugfix\"),\n\t\t\t\t\tPrefix:  pulumi.String(\"bugfix/\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.Project;\nimport com.pulumi.bitbucket.ProjectArgs;\nimport com.pulumi.bitbucket.ProjectBranchingModel;\nimport com.pulumi.bitbucket.ProjectBranchingModelArgs;\nimport com.pulumi.bitbucket.inputs.ProjectBranchingModelDevelopmentArgs;\nimport com.pulumi.bitbucket.inputs.ProjectBranchingModelBranchTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleProject = new Project(\"exampleProject\", ProjectArgs.builder()        \n            .owner(\"example\")\n            .key(\"FFFFF\")\n            .build());\n\n        var exampleProjectBranchingModel = new ProjectBranchingModel(\"exampleProjectBranchingModel\", ProjectBranchingModelArgs.builder()        \n            .workspace(\"example\")\n            .project(exampleProject.key())\n            .development(ProjectBranchingModelDevelopmentArgs.builder()\n                .useMainbranch(true)\n                .build())\n            .branchTypes(            \n                ProjectBranchingModelBranchTypeArgs.builder()\n                    .enabled(true)\n                    .kind(\"feature\")\n                    .prefix(\"example/\")\n                    .build(),\n                ProjectBranchingModelBranchTypeArgs.builder()\n                    .enabled(true)\n                    .kind(\"hotfix\")\n                    .prefix(\"hotfix/\")\n                    .build(),\n                ProjectBranchingModelBranchTypeArgs.builder()\n                    .enabled(true)\n                    .kind(\"release\")\n                    .prefix(\"release/\")\n                    .build(),\n                ProjectBranchingModelBranchTypeArgs.builder()\n                    .enabled(true)\n                    .kind(\"bugfix\")\n                    .prefix(\"bugfix/\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleProject:\n    type: bitbucket:Project\n    properties:\n      owner: example\n      key: FFFFF\n  exampleProjectBranchingModel:\n    type: bitbucket:ProjectBranchingModel\n    properties:\n      workspace: example\n      project: ${exampleProject.key}\n      development:\n        useMainbranch: true\n      branchTypes:\n        - enabled: true\n          kind: feature\n          prefix: example/\n        - enabled: true\n          kind: hotfix\n          prefix: hotfix/\n        - enabled: true\n          kind: release\n          prefix: release/\n        - enabled: true\n          kind: bugfix\n          prefix: bugfix/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nBranching Models can be imported using the workspace and project separated by a (`/`), e.g.,\n\n```sh\n $ pulumi import bitbucket:index/projectBranchingModel:ProjectBranchingModel example workspace/project\n```\n\n ",
            "properties": {
                "branchTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bitbucket:index/ProjectBranchingModelBranchType:ProjectBranchingModelBranchType"
                    },
                    "description": "A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.\n"
                },
                "development": {
                    "$ref": "#/types/bitbucket:index/ProjectBranchingModelDevelopment:ProjectBranchingModelDevelopment",
                    "description": "The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.\n"
                },
                "production": {
                    "$ref": "#/types/bitbucket:index/ProjectBranchingModelProduction:ProjectBranchingModelProduction",
                    "description": "The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The key of the project.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace of this project. Can be you or any team you\nhave write access to.\n"
                }
            },
            "required": [
                "branchTypes",
                "development",
                "project",
                "workspace"
            ],
            "inputProperties": {
                "branchTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/bitbucket:index/ProjectBranchingModelBranchType:ProjectBranchingModelBranchType"
                    },
                    "description": "A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.\n"
                },
                "development": {
                    "$ref": "#/types/bitbucket:index/ProjectBranchingModelDevelopment:ProjectBranchingModelDevelopment",
                    "description": "The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.\n"
                },
                "production": {
                    "$ref": "#/types/bitbucket:index/ProjectBranchingModelProduction:ProjectBranchingModelProduction",
                    "description": "The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The key of the project.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace of this project. Can be you or any team you\nhave write access to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "development",
                "project",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectBranchingModel resources.\n",
                "properties": {
                    "branchTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bitbucket:index/ProjectBranchingModelBranchType:ProjectBranchingModelBranchType"
                        },
                        "description": "A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.\n"
                    },
                    "development": {
                        "$ref": "#/types/bitbucket:index/ProjectBranchingModelDevelopment:ProjectBranchingModelDevelopment",
                        "description": "The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.\n"
                    },
                    "production": {
                        "$ref": "#/types/bitbucket:index/ProjectBranchingModelProduction:ProjectBranchingModelProduction",
                        "description": "The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The key of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace of this project. Can be you or any team you\nhave write access to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers": {
            "description": "Provides support for setting up default reviewers for your project. You must however have the UUID of the user available. Since Bitbucket has removed usernames from its APIs the best case is to use the UUID via the data provider.\n\nOAuth2 Scopes: `project:admin`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst reviewer = bitbucket.getUser({\n    uuid: \"{account UUID}\",\n});\nconst infrastructure = new bitbucket.ProjectDefaultReviewers(\"infrastructure\", {\n    workspace: \"myteam\",\n    project: \"TERRAFORM\",\n    reviewers: [reviewer.then(reviewer =\u003e reviewer.uuid)],\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nreviewer = bitbucket.get_user(uuid=\"{account UUID}\")\ninfrastructure = bitbucket.ProjectDefaultReviewers(\"infrastructure\",\n    workspace=\"myteam\",\n    project=\"TERRAFORM\",\n    reviewers=[reviewer.uuid])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var reviewer = Bitbucket.GetUser.Invoke(new()\n    {\n        Uuid = \"{account UUID}\",\n    });\n\n    var infrastructure = new Bitbucket.ProjectDefaultReviewers(\"infrastructure\", new()\n    {\n        Workspace = \"myteam\",\n        Project = \"TERRAFORM\",\n        Reviewers = new[]\n        {\n            reviewer.Apply(getUserResult =\u003e getUserResult.Uuid),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\treviewer, err := bitbucket.GetUser(ctx, \u0026bitbucket.GetUserArgs{\n\t\t\tUuid: pulumi.StringRef(\"{account UUID}\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = bitbucket.NewProjectDefaultReviewers(ctx, \"infrastructure\", \u0026bitbucket.ProjectDefaultReviewersArgs{\n\t\t\tWorkspace: pulumi.String(\"myteam\"),\n\t\t\tProject:   pulumi.String(\"TERRAFORM\"),\n\t\t\tReviewers: pulumi.StringArray{\n\t\t\t\t*pulumi.String(reviewer.Uuid),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetUserArgs;\nimport com.pulumi.bitbucket.ProjectDefaultReviewers;\nimport com.pulumi.bitbucket.ProjectDefaultReviewersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var reviewer = BitbucketFunctions.getUser(GetUserArgs.builder()\n            .uuid(\"{account UUID}\")\n            .build());\n\n        var infrastructure = new ProjectDefaultReviewers(\"infrastructure\", ProjectDefaultReviewersArgs.builder()        \n            .workspace(\"myteam\")\n            .project(\"TERRAFORM\")\n            .reviewers(reviewer.applyValue(getUserResult -\u003e getUserResult.uuid()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infrastructure:\n    type: bitbucket:ProjectDefaultReviewers\n    properties:\n      workspace: myteam\n      project: TERRAFORM\n      reviewers:\n        - ${reviewer.uuid}\nvariables:\n  reviewer:\n    fn::invoke:\n      Function: bitbucket:getUser\n      Arguments:\n        uuid: '{account UUID}'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nProject Default Reviewers can be imported using the workspace and project separated by a (`/`) and the end, e.g.,\n\n```sh\n $ pulumi import bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers example myteam/terraform-code\n```\n\n ",
            "properties": {
                "project": {
                    "type": "string",
                    "description": "The key of the project.\n"
                },
                "reviewers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of reviewers to use.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace of this project. Can be you or any team you\nhave write access to.\n"
                }
            },
            "required": [
                "project",
                "reviewers",
                "workspace"
            ],
            "inputProperties": {
                "project": {
                    "type": "string",
                    "description": "The key of the project.\n",
                    "willReplaceOnChanges": true
                },
                "reviewers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of reviewers to use.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace of this project. Can be you or any team you\nhave write access to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "project",
                "reviewers",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectDefaultReviewers resources.\n",
                "properties": {
                    "project": {
                        "type": "string",
                        "description": "The key of the project.\n",
                        "willReplaceOnChanges": true
                    },
                    "reviewers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of reviewers to use.\n"
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace of this project. Can be you or any team you\nhave write access to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/projectGroupPermission:ProjectGroupPermission": {
            "description": "Provides a Bitbucket Repository Group Permission Resource.\n\nThis allows you set explicit group permission for a project.\n\nOAuth2 Scopes: `project:admin`\n\nNote: can only be used when authenticating with Bitbucket Cloud using an _app password_. Authenticating via an OAuth flow gives a 403 error due to a [restriction in the Bitbucket Cloud API](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/#api-repositories-workspace-project-key-permissions-config-groups-group-slug-put).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = new bitbucket.ProjectGroupPermission(\"example\", {\n    workspace: \"example\",\n    projectKey: bitbucket_project.example.key,\n    groupSlug: bitbucket_group.example.slug,\n    permission: \"read\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.ProjectGroupPermission(\"example\",\n    workspace=\"example\",\n    project_key=bitbucket_project[\"example\"][\"key\"],\n    group_slug=bitbucket_group[\"example\"][\"slug\"],\n    permission=\"read\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Bitbucket.ProjectGroupPermission(\"example\", new()\n    {\n        Workspace = \"example\",\n        ProjectKey = bitbucket_project.Example.Key,\n        GroupSlug = bitbucket_group.Example.Slug,\n        Permission = \"read\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewProjectGroupPermission(ctx, \"example\", \u0026bitbucket.ProjectGroupPermissionArgs{\n\t\t\tWorkspace:  pulumi.String(\"example\"),\n\t\t\tProjectKey: pulumi.Any(bitbucket_project.Example.Key),\n\t\t\tGroupSlug:  pulumi.Any(bitbucket_group.Example.Slug),\n\t\t\tPermission: pulumi.String(\"read\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.ProjectGroupPermission;\nimport com.pulumi.bitbucket.ProjectGroupPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ProjectGroupPermission(\"example\", ProjectGroupPermissionArgs.builder()        \n            .workspace(\"example\")\n            .projectKey(bitbucket_project.example().key())\n            .groupSlug(bitbucket_group.example().slug())\n            .permission(\"read\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: bitbucket:ProjectGroupPermission\n    properties:\n      workspace: example\n      projectKey: ${bitbucket_project.example.key}\n      groupSlug: ${bitbucket_group.example.slug}\n      permission: read\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepository Group Permissions can be imported using their `workspace:project-key:group-slug` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/projectGroupPermission:ProjectGroupPermission example workspace:project-key:group-slug\n```\n\n ",
            "properties": {
                "groupSlug": {
                    "type": "string",
                    "description": "Slug of the requested group.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Permissions can be one of `read`, `write`, `create-repo`, and `admin`.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The project key.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace id.\n"
                }
            },
            "required": [
                "groupSlug",
                "permission",
                "projectKey",
                "workspace"
            ],
            "inputProperties": {
                "groupSlug": {
                    "type": "string",
                    "description": "Slug of the requested group.\n",
                    "willReplaceOnChanges": true
                },
                "permission": {
                    "type": "string",
                    "description": "Permissions can be one of `read`, `write`, `create-repo`, and `admin`.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The project key.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupSlug",
                "permission",
                "projectKey",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectGroupPermission resources.\n",
                "properties": {
                    "groupSlug": {
                        "type": "string",
                        "description": "Slug of the requested group.\n",
                        "willReplaceOnChanges": true
                    },
                    "permission": {
                        "type": "string",
                        "description": "Permissions can be one of `read`, `write`, `create-repo`, and `admin`.\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "The project key.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/projectUserPermission:ProjectUserPermission": {
            "description": "Provides a Bitbucket Repository User Permission Resource.\n\nThis allows you set explicit user permission for a project.\n\nOAuth2 Scopes: `project:admin`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = new bitbucket.ProjectUserPermission(\"example\", {\n    workspace: \"example\",\n    projectKey: bitbucket_project.example.key,\n    userId: \"user-id\",\n    permission: \"read\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.ProjectUserPermission(\"example\",\n    workspace=\"example\",\n    project_key=bitbucket_project[\"example\"][\"key\"],\n    user_id=\"user-id\",\n    permission=\"read\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Bitbucket.ProjectUserPermission(\"example\", new()\n    {\n        Workspace = \"example\",\n        ProjectKey = bitbucket_project.Example.Key,\n        UserId = \"user-id\",\n        Permission = \"read\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewProjectUserPermission(ctx, \"example\", \u0026bitbucket.ProjectUserPermissionArgs{\n\t\t\tWorkspace:  pulumi.String(\"example\"),\n\t\t\tProjectKey: pulumi.Any(bitbucket_project.Example.Key),\n\t\t\tUserId:     pulumi.String(\"user-id\"),\n\t\t\tPermission: pulumi.String(\"read\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.ProjectUserPermission;\nimport com.pulumi.bitbucket.ProjectUserPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ProjectUserPermission(\"example\", ProjectUserPermissionArgs.builder()        \n            .workspace(\"example\")\n            .projectKey(bitbucket_project.example().key())\n            .userId(\"user-id\")\n            .permission(\"read\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: bitbucket:ProjectUserPermission\n    properties:\n      workspace: example\n      projectKey: ${bitbucket_project.example.key}\n      userId: user-id\n      permission: read\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepository User Permissions can be imported using their `workspace:project-key:user-id` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/projectUserPermission:ProjectUserPermission example workspace:project-key:user-id\n```\n\n ",
            "properties": {
                "permission": {
                    "type": "string",
                    "description": "Permissions can be one of `read`, `write`, `create-repo`, and `admin`.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The project key.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The UUID of the user.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace id.\n"
                }
            },
            "required": [
                "permission",
                "projectKey",
                "userId",
                "workspace"
            ],
            "inputProperties": {
                "permission": {
                    "type": "string",
                    "description": "Permissions can be one of `read`, `write`, `create-repo`, and `admin`.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The project key.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "The UUID of the user.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permission",
                "projectKey",
                "userId",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectUserPermission resources.\n",
                "properties": {
                    "permission": {
                        "type": "string",
                        "description": "Permissions can be one of `read`, `write`, `create-repo`, and `admin`.\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "The project key.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "The UUID of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/repository:Repository": {
            "description": "Provides a Bitbucket repository resource.\n\nThis resource allows you manage your repositories such as scm type, if it is\nprivate, how to fork the repository and other options.\n\nOAuth2 Scopes: `repository`, `repository:admin`, and `repository:delete`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst infrastructure = new bitbucket.Repository(\"infrastructure\", {owner: \"myteam\"});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ninfrastructure = bitbucket.Repository(\"infrastructure\", owner=\"myteam\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infrastructure = new Bitbucket.Repository(\"infrastructure\", new()\n    {\n        Owner = \"myteam\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewRepository(ctx, \"infrastructure\", \u0026bitbucket.RepositoryArgs{\n\t\t\tOwner: pulumi.String(\"myteam\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.Repository;\nimport com.pulumi.bitbucket.RepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var infrastructure = new Repository(\"infrastructure\", RepositoryArgs.builder()        \n            .owner(\"myteam\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infrastructure:\n    type: bitbucket:Repository\n    properties:\n      owner: myteam\n```\n\nIf you want to create a repository with a CamelCase name, you should provide\na separate slug\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst infrastructure = new bitbucket.Repository(\"infrastructure\", {\n    owner: \"myteam\",\n    slug: \"terraform-code\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ninfrastructure = bitbucket.Repository(\"infrastructure\",\n    owner=\"myteam\",\n    slug=\"terraform-code\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var infrastructure = new Bitbucket.Repository(\"infrastructure\", new()\n    {\n        Owner = \"myteam\",\n        Slug = \"terraform-code\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewRepository(ctx, \"infrastructure\", \u0026bitbucket.RepositoryArgs{\n\t\t\tOwner: pulumi.String(\"myteam\"),\n\t\t\tSlug:  pulumi.String(\"terraform-code\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.Repository;\nimport com.pulumi.bitbucket.RepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var infrastructure = new Repository(\"infrastructure\", RepositoryArgs.builder()        \n            .owner(\"myteam\")\n            .slug(\"terraform-code\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  infrastructure:\n    type: bitbucket:Repository\n    properties:\n      owner: myteam\n      slug: terraform-code\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepositories can be imported using their `owner/name` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/repository:Repository my-repo my-account/my-repo\n```\n\n ",
            "properties": {
                "cloneHttps": {
                    "type": "string",
                    "description": "The HTTPS clone URL.\n"
                },
                "cloneSsh": {
                    "type": "string",
                    "description": "The SSH clone URL.\n"
                },
                "description": {
                    "type": "string",
                    "description": "What the description of the repo is.\n"
                },
                "forkPolicy": {
                    "type": "string",
                    "description": "What the fork policy should be. Defaults to\n`allow_forks`. Valid values are `allow_forks`, `no_public_forks`, `no_forks`.\n"
                },
                "hasIssues": {
                    "type": "boolean",
                    "description": "If this should have issues turned on or not.\n"
                },
                "hasWiki": {
                    "type": "boolean",
                    "description": "If this should have wiki turned on or not.\n"
                },
                "inheritBranchingModel": {
                    "type": "boolean",
                    "description": "Whether to inherit branching model from project.\n"
                },
                "inheritDefaultMergeStrategy": {
                    "type": "boolean",
                    "description": "Whether to inherit default merge strategy from project.\n"
                },
                "isPrivate": {
                    "type": "boolean",
                    "description": "If this should be private or not. Defaults to `true`.\n"
                },
                "language": {
                    "type": "string",
                    "description": "What the language of this repository should be.\n"
                },
                "link": {
                    "$ref": "#/types/bitbucket:index/RepositoryLink:RepositoryLink",
                    "description": "A set of links to a resource related to this object. See Link Below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n"
                },
                "pipelinesEnabled": {
                    "type": "boolean",
                    "description": "Turn on to enable pipelines support.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "If you want to have this repo associated with a\nproject.\n"
                },
                "scm": {
                    "type": "string",
                    "description": "What SCM you want to use. Valid options are `hg` or `git`.\nDefaults to `git`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the repository.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "the uuid of the repository resource.\n"
                },
                "website": {
                    "type": "string",
                    "description": "URL of website associated with this repository.\n"
                }
            },
            "required": [
                "cloneHttps",
                "cloneSsh",
                "inheritBranchingModel",
                "inheritDefaultMergeStrategy",
                "link",
                "name",
                "owner",
                "projectKey",
                "slug",
                "uuid"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "What the description of the repo is.\n"
                },
                "forkPolicy": {
                    "type": "string",
                    "description": "What the fork policy should be. Defaults to\n`allow_forks`. Valid values are `allow_forks`, `no_public_forks`, `no_forks`.\n"
                },
                "hasIssues": {
                    "type": "boolean",
                    "description": "If this should have issues turned on or not.\n"
                },
                "hasWiki": {
                    "type": "boolean",
                    "description": "If this should have wiki turned on or not.\n"
                },
                "inheritBranchingModel": {
                    "type": "boolean",
                    "description": "Whether to inherit branching model from project.\n"
                },
                "inheritDefaultMergeStrategy": {
                    "type": "boolean",
                    "description": "Whether to inherit default merge strategy from project.\n"
                },
                "isPrivate": {
                    "type": "boolean",
                    "description": "If this should be private or not. Defaults to `true`.\n"
                },
                "language": {
                    "type": "string",
                    "description": "What the language of this repository should be.\n"
                },
                "link": {
                    "$ref": "#/types/bitbucket:index/RepositoryLink:RepositoryLink",
                    "description": "A set of links to a resource related to this object. See Link Below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the repository.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n"
                },
                "pipelinesEnabled": {
                    "type": "boolean",
                    "description": "Turn on to enable pipelines support.\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "If you want to have this repo associated with a\nproject.\n"
                },
                "scm": {
                    "type": "string",
                    "description": "What SCM you want to use. Valid options are `hg` or `git`.\nDefaults to `git`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the repository.\n"
                },
                "website": {
                    "type": "string",
                    "description": "URL of website associated with this repository.\n"
                }
            },
            "requiredInputs": [
                "owner"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Repository resources.\n",
                "properties": {
                    "cloneHttps": {
                        "type": "string",
                        "description": "The HTTPS clone URL.\n"
                    },
                    "cloneSsh": {
                        "type": "string",
                        "description": "The SSH clone URL.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "What the description of the repo is.\n"
                    },
                    "forkPolicy": {
                        "type": "string",
                        "description": "What the fork policy should be. Defaults to\n`allow_forks`. Valid values are `allow_forks`, `no_public_forks`, `no_forks`.\n"
                    },
                    "hasIssues": {
                        "type": "boolean",
                        "description": "If this should have issues turned on or not.\n"
                    },
                    "hasWiki": {
                        "type": "boolean",
                        "description": "If this should have wiki turned on or not.\n"
                    },
                    "inheritBranchingModel": {
                        "type": "boolean",
                        "description": "Whether to inherit branching model from project.\n"
                    },
                    "inheritDefaultMergeStrategy": {
                        "type": "boolean",
                        "description": "Whether to inherit default merge strategy from project.\n"
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "description": "If this should be private or not. Defaults to `true`.\n"
                    },
                    "language": {
                        "type": "string",
                        "description": "What the language of this repository should be.\n"
                    },
                    "link": {
                        "$ref": "#/types/bitbucket:index/RepositoryLink:RepositoryLink",
                        "description": "A set of links to a resource related to this object. See Link Below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the repository.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The owner of this repository. Can be you or any team you\nhave write access to.\n"
                    },
                    "pipelinesEnabled": {
                        "type": "boolean",
                        "description": "Turn on to enable pipelines support.\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "If you want to have this repo associated with a\nproject.\n"
                    },
                    "scm": {
                        "type": "string",
                        "description": "What SCM you want to use. Valid options are `hg` or `git`.\nDefaults to `git`.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the repository.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "the uuid of the repository resource.\n"
                    },
                    "website": {
                        "type": "string",
                        "description": "URL of website associated with this repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/repositoryGroupPermission:RepositoryGroupPermission": {
            "description": "Provides a Bitbucket Repository Group Permission Resource.\n\nThis allows you set explicit group permission for a repository.\n\nOAuth2 Scopes: `repository:admin`\n\nNote: can only be used when authenticating with Bitbucket Cloud using an _app password_. Authenticating via an OAuth flow gives a 403 error due to a [restriction in the Bitbucket Cloud API](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/#api-repositories-workspace-repo-slug-permissions-config-groups-group-slug-put).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = new bitbucket.RepositoryGroupPermission(\"example\", {\n    workspace: \"example\",\n    repoSlug: bitbucket_repository.example.name,\n    groupSlug: bitbucket_group.example.slug,\n    permission: \"read\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.RepositoryGroupPermission(\"example\",\n    workspace=\"example\",\n    repo_slug=bitbucket_repository[\"example\"][\"name\"],\n    group_slug=bitbucket_group[\"example\"][\"slug\"],\n    permission=\"read\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Bitbucket.RepositoryGroupPermission(\"example\", new()\n    {\n        Workspace = \"example\",\n        RepoSlug = bitbucket_repository.Example.Name,\n        GroupSlug = bitbucket_group.Example.Slug,\n        Permission = \"read\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewRepositoryGroupPermission(ctx, \"example\", \u0026bitbucket.RepositoryGroupPermissionArgs{\n\t\t\tWorkspace:  pulumi.String(\"example\"),\n\t\t\tRepoSlug:   pulumi.Any(bitbucket_repository.Example.Name),\n\t\t\tGroupSlug:  pulumi.Any(bitbucket_group.Example.Slug),\n\t\t\tPermission: pulumi.String(\"read\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.RepositoryGroupPermission;\nimport com.pulumi.bitbucket.RepositoryGroupPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new RepositoryGroupPermission(\"example\", RepositoryGroupPermissionArgs.builder()        \n            .workspace(\"example\")\n            .repoSlug(bitbucket_repository.example().name())\n            .groupSlug(bitbucket_group.example().slug())\n            .permission(\"read\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: bitbucket:RepositoryGroupPermission\n    properties:\n      workspace: example\n      repoSlug: ${bitbucket_repository.example.name}\n      groupSlug: ${bitbucket_group.example.slug}\n      permission: read\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepository Group Permissions can be imported using their `workspace:repo-slug:group-slug` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/repositoryGroupPermission:RepositoryGroupPermission example workspace:repo-slug:group-slug\n```\n\n ",
            "properties": {
                "groupSlug": {
                    "type": "string",
                    "description": "Slug of the requested group.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Permissions can be one of `read`, `write`, and `admin`.\n"
                },
                "repoSlug": {
                    "type": "string",
                    "description": "The repository slug.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace id.\n"
                }
            },
            "required": [
                "groupSlug",
                "permission",
                "repoSlug",
                "workspace"
            ],
            "inputProperties": {
                "groupSlug": {
                    "type": "string",
                    "description": "Slug of the requested group.\n",
                    "willReplaceOnChanges": true
                },
                "permission": {
                    "type": "string",
                    "description": "Permissions can be one of `read`, `write`, and `admin`.\n"
                },
                "repoSlug": {
                    "type": "string",
                    "description": "The repository slug.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groupSlug",
                "permission",
                "repoSlug",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryGroupPermission resources.\n",
                "properties": {
                    "groupSlug": {
                        "type": "string",
                        "description": "Slug of the requested group.\n",
                        "willReplaceOnChanges": true
                    },
                    "permission": {
                        "type": "string",
                        "description": "Permissions can be one of `read`, `write`, and `admin`.\n"
                    },
                    "repoSlug": {
                        "type": "string",
                        "description": "The repository slug.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/repositoryUserPermission:RepositoryUserPermission": {
            "description": "Provides a Bitbucket Repository User Permission Resource.\n\nThis allows you set explicit user permission for a repository.\n\nOAuth2 Scopes: `repository:admin`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = new bitbucket.RepositoryUserPermission(\"example\", {\n    workspace: \"example\",\n    repoSlug: bitbucket_repository.example.name,\n    userId: \"user-id\",\n    permission: \"read\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.RepositoryUserPermission(\"example\",\n    workspace=\"example\",\n    repo_slug=bitbucket_repository[\"example\"][\"name\"],\n    user_id=\"user-id\",\n    permission=\"read\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Bitbucket.RepositoryUserPermission(\"example\", new()\n    {\n        Workspace = \"example\",\n        RepoSlug = bitbucket_repository.Example.Name,\n        UserId = \"user-id\",\n        Permission = \"read\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewRepositoryUserPermission(ctx, \"example\", \u0026bitbucket.RepositoryUserPermissionArgs{\n\t\t\tWorkspace:  pulumi.String(\"example\"),\n\t\t\tRepoSlug:   pulumi.Any(bitbucket_repository.Example.Name),\n\t\t\tUserId:     pulumi.String(\"user-id\"),\n\t\t\tPermission: pulumi.String(\"read\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.RepositoryUserPermission;\nimport com.pulumi.bitbucket.RepositoryUserPermissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new RepositoryUserPermission(\"example\", RepositoryUserPermissionArgs.builder()        \n            .workspace(\"example\")\n            .repoSlug(bitbucket_repository.example().name())\n            .userId(\"user-id\")\n            .permission(\"read\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: bitbucket:RepositoryUserPermission\n    properties:\n      workspace: example\n      repoSlug: ${bitbucket_repository.example.name}\n      userId: user-id\n      permission: read\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepository User Permissions can be imported using their `workspace:repo-slug:user-id` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/repositoryUserPermission:RepositoryUserPermission example workspace:repo-slug:user-id\n```\n\n ",
            "properties": {
                "permission": {
                    "type": "string",
                    "description": "Permissions can be one of `read`, `write`, `none`, and `admin`.\n"
                },
                "repoSlug": {
                    "type": "string",
                    "description": "The repository slug.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The UUID of the user.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace id.\n"
                }
            },
            "required": [
                "permission",
                "repoSlug",
                "userId",
                "workspace"
            ],
            "inputProperties": {
                "permission": {
                    "type": "string",
                    "description": "Permissions can be one of `read`, `write`, `none`, and `admin`.\n"
                },
                "repoSlug": {
                    "type": "string",
                    "description": "The repository slug.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "The UUID of the user.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permission",
                "repoSlug",
                "userId",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryUserPermission resources.\n",
                "properties": {
                    "permission": {
                        "type": "string",
                        "description": "Permissions can be one of `read`, `write`, `none`, and `admin`.\n"
                    },
                    "repoSlug": {
                        "type": "string",
                        "description": "The repository slug.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "The UUID of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/repositoryVariable:RepositoryVariable": {
            "description": "This resource allows you to setup pipelines variables to manage your builds with. Once you have enabled pipelines on your repository you can then further setup variables here to use.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst monorepo = new bitbucket.Repository(\"monorepo\", {\n    owner: \"gob\",\n    pipelinesEnabled: true,\n});\nconst debug = new bitbucket.RepositoryVariable(\"debug\", {\n    key: \"DEBUG\",\n    value: \"true\",\n    repository: monorepo.id,\n    secured: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nmonorepo = bitbucket.Repository(\"monorepo\",\n    owner=\"gob\",\n    pipelines_enabled=True)\ndebug = bitbucket.RepositoryVariable(\"debug\",\n    key=\"DEBUG\",\n    value=\"true\",\n    repository=monorepo.id,\n    secured=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var monorepo = new Bitbucket.Repository(\"monorepo\", new()\n    {\n        Owner = \"gob\",\n        PipelinesEnabled = true,\n    });\n\n    var debug = new Bitbucket.RepositoryVariable(\"debug\", new()\n    {\n        Key = \"DEBUG\",\n        Value = \"true\",\n        Repository = monorepo.Id,\n        Secured = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmonorepo, err := bitbucket.NewRepository(ctx, \"monorepo\", \u0026bitbucket.RepositoryArgs{\n\t\t\tOwner:            pulumi.String(\"gob\"),\n\t\t\tPipelinesEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = bitbucket.NewRepositoryVariable(ctx, \"debug\", \u0026bitbucket.RepositoryVariableArgs{\n\t\t\tKey:        pulumi.String(\"DEBUG\"),\n\t\t\tValue:      pulumi.String(\"true\"),\n\t\t\tRepository: monorepo.ID(),\n\t\t\tSecured:    pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.Repository;\nimport com.pulumi.bitbucket.RepositoryArgs;\nimport com.pulumi.bitbucket.RepositoryVariable;\nimport com.pulumi.bitbucket.RepositoryVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var monorepo = new Repository(\"monorepo\", RepositoryArgs.builder()        \n            .owner(\"gob\")\n            .pipelinesEnabled(true)\n            .build());\n\n        var debug = new RepositoryVariable(\"debug\", RepositoryVariableArgs.builder()        \n            .key(\"DEBUG\")\n            .value(\"true\")\n            .repository(monorepo.id())\n            .secured(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  monorepo:\n    type: bitbucket:Repository\n    properties:\n      owner: gob\n      pipelinesEnabled: true\n  debug:\n    type: bitbucket:RepositoryVariable\n    properties:\n      key: DEBUG\n      value: 'true'\n      repository: ${monorepo.id}\n      secured: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nRepository Variables can be imported using their `workspace/repository/key/uuid` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/repositoryVariable:RepositoryVariable example workspace/repository/key/uuid\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the key value pair\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository ID you want to put this variable onto. (of form workspace-id/repository-id)\n"
                },
                "secured": {
                    "type": "boolean",
                    "description": "If you want to make this viewable in the UI.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Computed) The UUID identifying the variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the key. This will not be returned if `secured` is set to true from API and wont be drift detected by provider.\n",
                    "secret": true
                },
                "workspace": {
                    "type": "string",
                    "description": "(Computed) The workspace the variable is created in.\n"
                }
            },
            "required": [
                "key",
                "repository",
                "uuid",
                "value",
                "workspace"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The key of the key value pair\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The repository ID you want to put this variable onto. (of form workspace-id/repository-id)\n"
                },
                "secured": {
                    "type": "boolean",
                    "description": "If you want to make this viewable in the UI.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the key. This will not be returned if `secured` is set to true from API and wont be drift detected by provider.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "key",
                "repository",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryVariable resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The key of the key value pair\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository ID you want to put this variable onto. (of form workspace-id/repository-id)\n"
                    },
                    "secured": {
                        "type": "boolean",
                        "description": "If you want to make this viewable in the UI.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "(Computed) The UUID identifying the variable.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the key. This will not be returned if `secured` is set to true from API and wont be drift detected by provider.\n",
                        "secret": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "(Computed) The workspace the variable is created in.\n"
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/sshKey:SshKey": {
            "description": "Provides a Bitbucket SSH Key resource.\n\nThis allows you to manage your SSH Keys for a user.\n\nOAuth2 Scopes: `account` and `account:write`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst test = new bitbucket.SshKey(\"test\", {\n    user: data.bitbucket_current_user.test.uuid,\n    key: \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",\n    label: \"test-key\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ntest = bitbucket.SshKey(\"test\",\n    user=data[\"bitbucket_current_user\"][\"test\"][\"uuid\"],\n    key=\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",\n    label=\"test-key\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Bitbucket.SshKey(\"test\", new()\n    {\n        User = data.Bitbucket_current_user.Test.Uuid,\n        Key = \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\",\n        Label = \"test-key\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewSshKey(ctx, \"test\", \u0026bitbucket.SshKeyArgs{\n\t\t\tUser:  pulumi.Any(data.Bitbucket_current_user.Test.Uuid),\n\t\t\tKey:   pulumi.String(\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\"),\n\t\t\tLabel: pulumi.String(\"test-key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.SshKey;\nimport com.pulumi.bitbucket.SshKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new SshKey(\"test\", SshKeyArgs.builder()        \n            .user(data.bitbucket_current_user().test().uuid())\n            .key(\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\")\n            .label(\"test-key\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: bitbucket:SshKey\n    properties:\n      user: ${data.bitbucket_current_user.test.uuid}\n      key: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY\n      label: test-key\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nSSH Keys can be imported using their `user-id/key-id` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/sshKey:SshKey key user-id/key-id\n```\n\n ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The comment parsed from the SSH key (if present)\n"
                },
                "key": {
                    "type": "string",
                    "description": "The SSH public key value in OpenSSH format.\n"
                },
                "label": {
                    "type": "string",
                    "description": "The user-defined label for the SSH key\n"
                },
                "user": {
                    "type": "string",
                    "description": "This can either be the UUID of the account, surrounded by curly-braces, for example: {account UUID}, OR an Atlassian Account ID.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The SSH key's UUID value.\n"
                }
            },
            "required": [
                "comment",
                "user",
                "uuid"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The SSH public key value in OpenSSH format.\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string",
                    "description": "The user-defined label for the SSH key\n"
                },
                "user": {
                    "type": "string",
                    "description": "This can either be the UUID of the account, surrounded by curly-braces, for example: {account UUID}, OR an Atlassian Account ID.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SshKey resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "The comment parsed from the SSH key (if present)\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The SSH public key value in OpenSSH format.\n",
                        "willReplaceOnChanges": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The user-defined label for the SSH key\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "This can either be the UUID of the account, surrounded by curly-braces, for example: {account UUID}, OR an Atlassian Account ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The SSH key's UUID value.\n"
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/workspaceHook:WorkspaceHook": {
            "description": "Provides a Bitbucket workspace hook resource.\n\nThis allows you to manage your webhooks on a workspace.\n\nOAuth2 Scopes: `webhook`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst deployOnPush = new bitbucket.WorkspaceHook(\"deployOnPush\", {\n    description: \"Deploy the code via my webhook\",\n    events: [\"repo:push\"],\n    url: \"https://mywebhookservice.mycompany.com/deploy-on-push\",\n    workspace: \"myteam\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ndeploy_on_push = bitbucket.WorkspaceHook(\"deployOnPush\",\n    description=\"Deploy the code via my webhook\",\n    events=[\"repo:push\"],\n    url=\"https://mywebhookservice.mycompany.com/deploy-on-push\",\n    workspace=\"myteam\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var deployOnPush = new Bitbucket.WorkspaceHook(\"deployOnPush\", new()\n    {\n        Description = \"Deploy the code via my webhook\",\n        Events = new[]\n        {\n            \"repo:push\",\n        },\n        Url = \"https://mywebhookservice.mycompany.com/deploy-on-push\",\n        Workspace = \"myteam\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewWorkspaceHook(ctx, \"deployOnPush\", \u0026bitbucket.WorkspaceHookArgs{\n\t\t\tDescription: pulumi.String(\"Deploy the code via my webhook\"),\n\t\t\tEvents: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"repo:push\"),\n\t\t\t},\n\t\t\tUrl:       pulumi.String(\"https://mywebhookservice.mycompany.com/deploy-on-push\"),\n\t\t\tWorkspace: pulumi.String(\"myteam\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.WorkspaceHook;\nimport com.pulumi.bitbucket.WorkspaceHookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var deployOnPush = new WorkspaceHook(\"deployOnPush\", WorkspaceHookArgs.builder()        \n            .description(\"Deploy the code via my webhook\")\n            .events(\"repo:push\")\n            .url(\"https://mywebhookservice.mycompany.com/deploy-on-push\")\n            .workspace(\"myteam\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  deployOnPush:\n    type: bitbucket:WorkspaceHook\n    properties:\n      description: Deploy the code via my webhook\n      events:\n        - repo:push\n      url: https://mywebhookservice.mycompany.com/deploy-on-push\n      workspace: myteam\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nHooks can be imported using their `workspace/hook-id` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/workspaceHook:WorkspaceHook hook my-account/hook-id\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether the webhook configuration is active or not (Default: `true`).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The name / description to show in the UI.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The events this webhook is subscribed to. Valid values can be found at [Bitbucket Webhook Docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/#api-repositories-workspace-repo-slug-hooks-post).\n"
                },
                "historyEnabled": {
                    "type": "boolean",
                    "description": "Whether a webhook history is enabled.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.\n",
                    "secret": true
                },
                "secretSet": {
                    "type": "boolean",
                    "description": "Whether a webhook secret is set.\n"
                },
                "skipCertVerification": {
                    "type": "boolean",
                    "description": "Whether to skip certificate verification or not (Default: `true`).\n"
                },
                "url": {
                    "type": "string",
                    "description": "Where to POST to.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID of the workspace webhook.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace of this repository. Can be you or any team you\nhave write access to.\n"
                }
            },
            "required": [
                "description",
                "events",
                "secretSet",
                "url",
                "uuid",
                "workspace"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Whether the webhook configuration is active or not (Default: `true`).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The name / description to show in the UI.\n"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The events this webhook is subscribed to. Valid values can be found at [Bitbucket Webhook Docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/#api-repositories-workspace-repo-slug-hooks-post).\n"
                },
                "historyEnabled": {
                    "type": "boolean",
                    "description": "Whether a webhook history is enabled.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.\n",
                    "secret": true
                },
                "skipCertVerification": {
                    "type": "boolean",
                    "description": "Whether to skip certificate verification or not (Default: `true`).\n"
                },
                "url": {
                    "type": "string",
                    "description": "Where to POST to.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace of this repository. Can be you or any team you\nhave write access to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "events",
                "url",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkspaceHook resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Whether the webhook configuration is active or not (Default: `true`).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The name / description to show in the UI.\n"
                    },
                    "events": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The events this webhook is subscribed to. Valid values can be found at [Bitbucket Webhook Docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/#api-repositories-workspace-repo-slug-hooks-post).\n"
                    },
                    "historyEnabled": {
                        "type": "boolean",
                        "description": "Whether a webhook history is enabled.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.\n",
                        "secret": true
                    },
                    "secretSet": {
                        "type": "boolean",
                        "description": "Whether a webhook secret is set.\n"
                    },
                    "skipCertVerification": {
                        "type": "boolean",
                        "description": "Whether to skip certificate verification or not (Default: `true`).\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Where to POST to.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of the workspace webhook.\n"
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace of this repository. Can be you or any team you\nhave write access to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "bitbucket:index/workspaceVariable:WorkspaceVariable": {
            "description": "This resource allows you to configure workspace variables.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst country = new bitbucket.WorkspaceVariable(\"country\", {\n    workspace: bitbucket_workspace.test.id,\n    key: \"COUNTRY\",\n    value: \"Kenya\",\n    secured: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\ncountry = bitbucket.WorkspaceVariable(\"country\",\n    workspace=bitbucket_workspace[\"test\"][\"id\"],\n    key=\"COUNTRY\",\n    value=\"Kenya\",\n    secured=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var country = new Bitbucket.WorkspaceVariable(\"country\", new()\n    {\n        Workspace = bitbucket_workspace.Test.Id,\n        Key = \"COUNTRY\",\n        Value = \"Kenya\",\n        Secured = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.NewWorkspaceVariable(ctx, \"country\", \u0026bitbucket.WorkspaceVariableArgs{\n\t\t\tWorkspace: pulumi.Any(bitbucket_workspace.Test.Id),\n\t\t\tKey:       pulumi.String(\"COUNTRY\"),\n\t\t\tValue:     pulumi.String(\"Kenya\"),\n\t\t\tSecured:   pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.WorkspaceVariable;\nimport com.pulumi.bitbucket.WorkspaceVariableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var country = new WorkspaceVariable(\"country\", WorkspaceVariableArgs.builder()        \n            .workspace(bitbucket_workspace.test().id())\n            .key(\"COUNTRY\")\n            .value(\"Kenya\")\n            .secured(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  country:\n    type: bitbucket:WorkspaceVariable\n    properties:\n      workspace: ${bitbucket_workspace.test.id}\n      key: COUNTRY\n      value: Kenya\n      secured: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nWorkspace Variables can be imported using their `workspace-id/uuid` ID, e.g.\n\n```sh\n $ pulumi import bitbucket:index/workspaceVariable:WorkspaceVariable example workspace-id/uuid\n```\n\n ",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The unique name of the variable.\n"
                },
                "secured": {
                    "type": "boolean",
                    "description": "If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "(Computed) The UUID identifying the variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n",
                    "secret": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace ID you want to assign this variable to.\n"
                }
            },
            "required": [
                "key",
                "uuid",
                "value",
                "workspace"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The unique name of the variable.\n"
                },
                "secured": {
                    "type": "boolean",
                    "description": "If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the variable.\n",
                    "secret": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The workspace ID you want to assign this variable to.\n"
                }
            },
            "requiredInputs": [
                "key",
                "value",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkspaceVariable resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The unique name of the variable.\n"
                    },
                    "secured": {
                        "type": "boolean",
                        "description": "If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "(Computed) The UUID identifying the variable.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the variable.\n",
                        "secret": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace ID you want to assign this variable to.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "bitbucket:index/getCurrentUser:getCurrentUser": {
            "description": "Provides a way to fetch data of the current user.\n\nOAuth2 Scopes: `account`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = bitbucket.getCurrentUser({});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.get_current_user()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Bitbucket.GetCurrentUser.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.GetCurrentUser(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = BitbucketFunctions.getCurrentUser();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: bitbucket:getCurrentUser\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getCurrentUser.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "the display name that the user wants to use for GDPR\n"
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bitbucket:index/getCurrentUserEmail:getCurrentUserEmail"
                        },
                        "description": "The email address.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The Username.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "the uuid that bitbucket users to connect a user to various objects\n"
                    }
                },
                "type": "object",
                "required": [
                    "displayName",
                    "emails",
                    "username",
                    "uuid",
                    "id"
                ]
            }
        },
        "bitbucket:index/getDeployment:getDeployment": {
            "description": "Provides a way to fetch data on a Deployment.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = bitbucket.getDeployment({\n    repository: \"example\",\n    uuid: \"example\",\n    workspace: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.get_deployment(repository=\"example\",\n    uuid=\"example\",\n    workspace=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Bitbucket.GetDeployment.Invoke(new()\n    {\n        Repository = \"example\",\n        Uuid = \"example\",\n        Workspace = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.LookupDeployment(ctx, \u0026bitbucket.LookupDeploymentArgs{\n\t\t\tRepository: \"example\",\n\t\t\tUuid:       \"example\",\n\t\t\tWorkspace:  \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetDeploymentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = BitbucketFunctions.getDeployment(GetDeploymentArgs.builder()\n            .repository(\"example\")\n            .uuid(\"example\")\n            .workspace(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: bitbucket:getDeployment\n      Arguments:\n        repository: example\n        uuid: example\n        workspace: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDeployment.\n",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "The repository name.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The environment UUID.\n"
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository",
                    "uuid",
                    "workspace"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeployment.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment.\n"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "stage": {
                        "type": "string",
                        "description": "The stage (Test, Staging, Production).\n"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "workspace": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "repository",
                    "stage",
                    "uuid",
                    "workspace",
                    "id"
                ]
            }
        },
        "bitbucket:index/getDeployments:getDeployments": {
            "description": "Provides a way to fetch data on Deployments.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = bitbucket.getDeployments({\n    repository: \"example\",\n    workspace: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.get_deployments(repository=\"example\",\n    workspace=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Bitbucket.GetDeployments.Invoke(new()\n    {\n        Repository = \"example\",\n        Workspace = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.GetDeployments(ctx, \u0026bitbucket.GetDeploymentsArgs{\n\t\t\tRepository: \"example\",\n\t\t\tWorkspace:  \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetDeploymentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = BitbucketFunctions.getDeployments(GetDeploymentsArgs.builder()\n            .repository(\"example\")\n            .workspace(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: bitbucket:getDeployments\n      Arguments:\n        repository: example\n        workspace: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDeployments.\n",
                "properties": {
                    "repository": {
                        "type": "string",
                        "description": "The repository name.\n"
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The workspace name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "repository",
                    "workspace"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDeployments.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Names of deployments for a repository.\n"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "uuids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "UUIDs of deployments for a repository.\n"
                    },
                    "workspace": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "names",
                    "repository",
                    "uuids",
                    "workspace",
                    "id"
                ]
            }
        },
        "bitbucket:index/getGroup:getGroup": {
            "description": "Provides a way to fetch data of a group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = bitbucket.getGroup({\n    slug: \"example\",\n    workspace: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.get_group(slug=\"example\",\n    workspace=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Bitbucket.GetGroup.Invoke(new()\n    {\n        Slug = \"example\",\n        Workspace = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.LookupGroup(ctx, \u0026bitbucket.LookupGroupArgs{\n\t\t\tSlug:      \"example\",\n\t\t\tWorkspace: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = BitbucketFunctions.getGroup(GetGroupArgs.builder()\n            .slug(\"example\")\n            .workspace(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: bitbucket:getGroup\n      Arguments:\n        slug: example\n        workspace: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "The group's slug.\n"
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The UUID that bitbucket groups to connect a group to various objects\n"
                    }
                },
                "type": "object",
                "required": [
                    "slug",
                    "workspace"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "autoAdd": {
                        "type": "boolean",
                        "description": "Whether to automatically add users the group\n"
                    },
                    "emailForwardingDisabled": {
                        "type": "boolean",
                        "description": "Whether to disable email forwarding for group.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the group.\n"
                    },
                    "permission": {
                        "type": "string",
                        "description": "One of `read`, `write`, and `admin`.\n"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "workspace": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "autoAdd",
                    "emailForwardingDisabled",
                    "name",
                    "permission",
                    "slug",
                    "workspace",
                    "id"
                ]
            }
        },
        "bitbucket:index/getGroupMembers:getGroupMembers": {
            "description": "Provides a way to fetch data of group members.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = bitbucket.getGroupMembers({\n    slug: \"example\",\n    workspace: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.get_group_members(slug=\"example\",\n    workspace=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Bitbucket.GetGroupMembers.Invoke(new()\n    {\n        Slug = \"example\",\n        Workspace = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.GetGroupMembers(ctx, \u0026bitbucket.GetGroupMembersArgs{\n\t\t\tSlug:      \"example\",\n\t\t\tWorkspace: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetGroupMembersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = BitbucketFunctions.getGroupMembers(GetGroupMembersArgs.builder()\n            .slug(\"example\")\n            .workspace(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: bitbucket:getGroupMembers\n      Arguments:\n        slug: example\n        workspace: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroupMembers.\n",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "The group's slug.\n"
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The UUID that bitbucket groups to connect a group to various objects\n"
                    }
                },
                "type": "object",
                "required": [
                    "slug",
                    "workspace"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroupMembers.\n",
                "properties": {
                    "groupMembers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bitbucket:index/getGroupMembersGroupMember:getGroupMembersGroupMember"
                        },
                        "description": "A set of group member objects. See Group Member below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of group member uuid.\n",
                        "deprecationMessage": "use group_members instead"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "workspace": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "groupMembers",
                    "members",
                    "slug",
                    "workspace",
                    "id"
                ]
            }
        },
        "bitbucket:index/getGroups:getGroups": {
            "description": "Provides a way to fetch data of groups in a workspace.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = bitbucket.getGroups({\n    workspace: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.get_groups(workspace=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Bitbucket.GetGroups.Invoke(new()\n    {\n        Workspace = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.GetGroups(ctx, \u0026bitbucket.GetGroupsArgs{\n\t\t\tWorkspace: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = BitbucketFunctions.getGroups(GetGroupsArgs.builder()\n            .workspace(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: bitbucket:getGroups\n      Arguments:\n        workspace: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGroups.\n",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The UUID that bitbucket groupss to connect a groups to various objects\n"
                    }
                },
                "type": "object",
                "required": [
                    "workspace"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroups.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bitbucket:index/getGroupsGroup:getGroupsGroup"
                        },
                        "description": "The list of groups in the workspace. See Group below for structure of each element\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "workspace": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "groups",
                    "workspace",
                    "id"
                ]
            }
        },
        "bitbucket:index/getHookTypes:getHookTypes": {
            "description": "Provides a way to fetch data of hook types.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = bitbucket.getHookTypes({\n    subjectType: \"workspace\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.get_hook_types(subject_type=\"workspace\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Bitbucket.GetHookTypes.Invoke(new()\n    {\n        SubjectType = \"workspace\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.GetHookTypes(ctx, \u0026bitbucket.GetHookTypesArgs{\n\t\t\tSubjectType: \"workspace\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetHookTypesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = BitbucketFunctions.getHookTypes(GetHookTypesArgs.builder()\n            .subjectType(\"workspace\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: bitbucket:getHookTypes\n      Arguments:\n        subjectType: workspace\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getHookTypes.\n",
                "properties": {
                    "subjectType": {
                        "type": "string",
                        "description": "A resource or subject type. Valid values are `workspace`, `user`, `repository`, `team`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "subjectType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHookTypes.\n",
                "properties": {
                    "hookTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bitbucket:index/getHookTypesHookType:getHookTypesHookType"
                        },
                        "description": "A Set of Hook Event Types. See Hook Types below.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "subjectType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "hookTypes",
                    "subjectType",
                    "id"
                ]
            }
        },
        "bitbucket:index/getIpRanges:getIpRanges": {
            "description": "Provides a way to fetch IP Ranges for whitelisting.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = bitbucket.getIpRanges({});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.get_ip_ranges()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Bitbucket.GetIpRanges.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.GetIpRanges(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = BitbucketFunctions.getIpRanges();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: bitbucket:getIpRanges\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getIpRanges.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ranges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bitbucket:index/getIpRangesRange:getIpRangesRange"
                        },
                        "description": "A Set of IP Ranges. See Ranges below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ranges",
                    "id"
                ]
            }
        },
        "bitbucket:index/getPipelineOidcConfig:getPipelineOidcConfig": {
            "description": "Provides a way to fetch data on a pipeline OIDC Config.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = bitbucket.getPipelineOidcConfig({\n    workspace: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.get_pipeline_oidc_config(workspace=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Bitbucket.GetPipelineOidcConfig.Invoke(new()\n    {\n        Workspace = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.GetPipelineOidcConfig(ctx, \u0026bitbucket.GetPipelineOidcConfigArgs{\n\t\t\tWorkspace: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetPipelineOidcConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = BitbucketFunctions.getPipelineOidcConfig(GetPipelineOidcConfigArgs.builder()\n            .workspace(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: bitbucket:getPipelineOidcConfig\n      Arguments:\n        workspace: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPipelineOidcConfig.\n",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace to fetch pipeline oidc config.\n"
                    }
                },
                "type": "object",
                "required": [
                    "workspace"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPipelineOidcConfig.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "oidcConfig": {
                        "type": "string",
                        "description": "The Json representing the OIDC config.\n"
                    },
                    "workspace": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "oidcConfig",
                    "workspace",
                    "id"
                ]
            }
        },
        "bitbucket:index/getPipelineOidcConfigKeys:getPipelineOidcConfigKeys": {
            "description": "Provides a way to fetch data on a pipeline OIDC Config Keys.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = bitbucket.getPipelineOidcConfigKeys({\n    workspace: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.get_pipeline_oidc_config_keys(workspace=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Bitbucket.GetPipelineOidcConfigKeys.Invoke(new()\n    {\n        Workspace = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.GetPipelineOidcConfigKeys(ctx, \u0026bitbucket.GetPipelineOidcConfigKeysArgs{\n\t\t\tWorkspace: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetPipelineOidcConfigKeysArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = BitbucketFunctions.getPipelineOidcConfigKeys(GetPipelineOidcConfigKeysArgs.builder()\n            .workspace(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: bitbucket:getPipelineOidcConfigKeys\n      Arguments:\n        workspace: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPipelineOidcConfigKeys.\n",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "The workspace to fetch pipeline oidc config keys.\n"
                    }
                },
                "type": "object",
                "required": [
                    "workspace"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPipelineOidcConfigKeys.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keys": {
                        "type": "string",
                        "secret": true
                    },
                    "workspace": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "keys",
                    "workspace",
                    "id"
                ]
            }
        },
        "bitbucket:index/getUser:getUser": {
            "description": "Provides a way to fetch data on a user.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst reviewer = bitbucket.getUser({\n    uuid: \"{account UUID}\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nreviewer = bitbucket.get_user(uuid=\"{account UUID}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var reviewer = Bitbucket.GetUser.Invoke(new()\n    {\n        Uuid = \"{account UUID}\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.GetUser(ctx, \u0026bitbucket.GetUserArgs{\n\t\t\tUuid: pulumi.StringRef(\"{account UUID}\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var reviewer = BitbucketFunctions.getUser(GetUserArgs.builder()\n            .uuid(\"{account UUID}\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  reviewer:\n    fn::invoke:\n      Function: bitbucket:getUser\n      Arguments:\n        uuid: '{account UUID}'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "the display name that the user wants to use for GDPR\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID that bitbucket users to connect a user to various objects\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "the display name that the user wants to use for GDPR\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "username": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "the uuid that bitbucket users to connect a user to various objects\n"
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "id"
                ]
            }
        },
        "bitbucket:index/getWorkspace:getWorkspace": {
            "description": "Provides a way to fetch data on a workspace.\n\nOAuth2 Scopes: `none`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = bitbucket.getWorkspace({\n    workspace: \"gob\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.get_workspace(workspace=\"gob\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Bitbucket.GetWorkspace.Invoke(new()\n    {\n        Workspace = \"gob\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.GetWorkspace(ctx, \u0026bitbucket.GetWorkspaceArgs{\n\t\t\tWorkspace: \"gob\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetWorkspaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = BitbucketFunctions.getWorkspace(GetWorkspaceArgs.builder()\n            .workspace(\"gob\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: bitbucket:getWorkspace\n      Arguments:\n        workspace: gob\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getWorkspace.\n",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces\n"
                    }
                },
                "type": "object",
                "required": [
                    "workspace"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWorkspace.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "description": "Indicates whether the workspace is publicly accessible, or whether it is private to the members and consequently only visible to members.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workspace.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The short label that identifies this workspace.\n"
                    },
                    "workspace": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "isPrivate",
                    "name",
                    "slug",
                    "workspace",
                    "id"
                ]
            }
        },
        "bitbucket:index/getWorkspaceMembers:getWorkspaceMembers": {
            "description": "Provides a way to fetch data on a the members of a workspace.\n\nOAuth2 Scopes: `account`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as bitbucket from \"@pulumi/bitbucket\";\n\nconst example = bitbucket.getWorkspaceMembers({\n    workspace: \"gob\",\n});\n```\n```python\nimport pulumi\nimport pulumi_bitbucket as bitbucket\n\nexample = bitbucket.get_workspace_members(workspace=\"gob\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Bitbucket = Pulumi.Bitbucket;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Bitbucket.GetWorkspaceMembers.Invoke(new()\n    {\n        Workspace = \"gob\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := bitbucket.GetWorkspaceMembers(ctx, \u0026bitbucket.GetWorkspaceMembersArgs{\n\t\t\tWorkspace: \"gob\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.bitbucket.BitbucketFunctions;\nimport com.pulumi.bitbucket.inputs.GetWorkspaceMembersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = BitbucketFunctions.getWorkspaceMembers(GetWorkspaceMembersArgs.builder()\n            .workspace(\"gob\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: bitbucket:getWorkspaceMembers\n      Arguments:\n        workspace: gob\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getWorkspaceMembers.\n",
                "properties": {
                    "workspace": {
                        "type": "string",
                        "description": "This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces.\n"
                    }
                },
                "type": "object",
                "required": [
                    "workspace"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWorkspaceMembers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of string containing the member UUIDs.\n",
                        "deprecationMessage": "use workspace_members instead"
                    },
                    "workspace": {
                        "type": "string"
                    },
                    "workspaceMembers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/bitbucket:index/getWorkspaceMembersWorkspaceMember:getWorkspaceMembersWorkspaceMember"
                        },
                        "description": "A set of workspace member objects. See Workspace Members below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "members",
                    "workspace",
                    "workspaceMembers",
                    "id"
                ]
            }
        }
    }
}