// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Bitbucket Deploy Key resource.
 *
 * This allows you to manage your Deploy Keys for a repository.
 *
 * OAuth2 Scopes: `repository` and `repository:admin`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as bitbucket from "@ryan-pip/pulumi_bitbucket";
 *
 * const test = new bitbucket.DeployKey("test", {
 *     key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY",
 *     label: "test-key",
 *     repository: "example",
 *     workspace: "example",
 * });
 * ```
 *
 * ## Import
 *
 * Deploy Keys can be imported using their `workspace/repo-slug/key-id` ID, e.g.
 *
 * ```sh
 *  $ pulumi import bitbucket:index/deployKey:DeployKey key workspace/repo-slug/key-id
 * ```
 */
export class DeployKey extends pulumi.CustomResource {
    /**
     * Get an existing DeployKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeployKeyState, opts?: pulumi.CustomResourceOptions): DeployKey {
        return new DeployKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitbucket:index/deployKey:DeployKey';

    /**
     * Returns true if the given object is an instance of DeployKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeployKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeployKey.__pulumiType;
    }

    /**
     * The comment parsed from the Deploy key (if present)
     */
    public /*out*/ readonly comment!: pulumi.Output<string>;
    /**
     * The SSH public key value in OpenSSH format.
     */
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * The Deploy key's ID.
     */
    public /*out*/ readonly keyId!: pulumi.Output<string>;
    /**
     * The user-defined label for the Deploy key
     */
    public readonly label!: pulumi.Output<string | undefined>;
    /**
     * The Repository to create deploy key in.
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * The Workspace where the repository resides.
     */
    public readonly workspace!: pulumi.Output<string>;

    /**
     * Create a DeployKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeployKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeployKeyArgs | DeployKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeployKeyState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["workspace"] = state ? state.workspace : undefined;
        } else {
            const args = argsOrState as DeployKeyArgs | undefined;
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.workspace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspace'");
            }
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["workspace"] = args ? args.workspace : undefined;
            resourceInputs["comment"] = undefined /*out*/;
            resourceInputs["keyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeployKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeployKey resources.
 */
export interface DeployKeyState {
    /**
     * The comment parsed from the Deploy key (if present)
     */
    comment?: pulumi.Input<string>;
    /**
     * The SSH public key value in OpenSSH format.
     */
    key?: pulumi.Input<string>;
    /**
     * The Deploy key's ID.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The user-defined label for the Deploy key
     */
    label?: pulumi.Input<string>;
    /**
     * The Repository to create deploy key in.
     */
    repository?: pulumi.Input<string>;
    /**
     * The Workspace where the repository resides.
     */
    workspace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DeployKey resource.
 */
export interface DeployKeyArgs {
    /**
     * The SSH public key value in OpenSSH format.
     */
    key?: pulumi.Input<string>;
    /**
     * The user-defined label for the Deploy key
     */
    label?: pulumi.Input<string>;
    /**
     * The Repository to create deploy key in.
     */
    repository: pulumi.Input<string>;
    /**
     * The Workspace where the repository resides.
     */
    workspace: pulumi.Input<string>;
}
