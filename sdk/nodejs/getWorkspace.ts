// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a way to fetch data on a workspace.
 *
 * OAuth2 Scopes: `none`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as bitbucket from "@pulumi/bitbucket";
 *
 * const example = bitbucket.getWorkspace({
 *     workspace: "gob",
 * });
 * ```
 */
export function getWorkspace(args: GetWorkspaceArgs, opts?: pulumi.InvokeOptions): Promise<GetWorkspaceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("bitbucket:index/getWorkspace:getWorkspace", {
        "workspace": args.workspace,
    }, opts);
}

/**
 * A collection of arguments for invoking getWorkspace.
 */
export interface GetWorkspaceArgs {
    /**
     * This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces
     */
    workspace: string;
}

/**
 * A collection of values returned by getWorkspace.
 */
export interface GetWorkspaceResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Indicates whether the workspace is publicly accessible, or whether it is private to the members and consequently only visible to members.
     */
    readonly isPrivate: boolean;
    /**
     * The name of the workspace.
     */
    readonly name: string;
    /**
     * The short label that identifies this workspace.
     */
    readonly slug: string;
    readonly workspace: string;
}
/**
 * Provides a way to fetch data on a workspace.
 *
 * OAuth2 Scopes: `none`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as bitbucket from "@pulumi/bitbucket";
 *
 * const example = bitbucket.getWorkspace({
 *     workspace: "gob",
 * });
 * ```
 */
export function getWorkspaceOutput(args: GetWorkspaceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWorkspaceResult> {
    return pulumi.output(args).apply((a: any) => getWorkspace(a, opts))
}

/**
 * A collection of arguments for invoking getWorkspace.
 */
export interface GetWorkspaceOutputArgs {
    /**
     * This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces
     */
    workspace: pulumi.Input<string>;
}
