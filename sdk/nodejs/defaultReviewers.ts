// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides support for setting up default reviewers for your repository. You must however have the UUID of the user available. Since Bitbucket has removed usernames from its APIs the best case is to use the UUID via the data provider.
 *
 * OAuth2 Scopes: `pullrequest` and `repository:admin`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as bitbucket from "@pulumi/bitbucket";
 * import * as bitbucket from "@ryan-pip/pulumi_bitbucket";
 *
 * const reviewer = bitbucket.getUser({
 *     uuid: "{account UUID}",
 * });
 * const infrastructure = new bitbucket.DefaultReviewers("infrastructure", {
 *     owner: "myteam",
 *     repository: "terraform-code",
 *     reviewers: [reviewer.then(reviewer => reviewer.uuid)],
 * });
 * ```
 *
 * ## Import
 *
 * Default Reviewers can be imported using the owner and repo separated by a (`/`) and the string `reviewers` and the end, e.g.,
 *
 * ```sh
 *  $ pulumi import bitbucket:index/defaultReviewers:DefaultReviewers example myteam/terraform-code/reviewers
 * ```
 */
export class DefaultReviewers extends pulumi.CustomResource {
    /**
     * Get an existing DefaultReviewers resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultReviewersState, opts?: pulumi.CustomResourceOptions): DefaultReviewers {
        return new DefaultReviewers(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitbucket:index/defaultReviewers:DefaultReviewers';

    /**
     * Returns true if the given object is an instance of DefaultReviewers.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultReviewers {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultReviewers.__pulumiType;
    }

    /**
     * The owner of this repository. Can be you or any team you
     * have write access to.
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * The name of the repository.
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * A list of reviewers to use.
     */
    public readonly reviewers!: pulumi.Output<string[]>;

    /**
     * Create a DefaultReviewers resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultReviewersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultReviewersArgs | DefaultReviewersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultReviewersState | undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["reviewers"] = state ? state.reviewers : undefined;
        } else {
            const args = argsOrState as DefaultReviewersArgs | undefined;
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.reviewers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reviewers'");
            }
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["reviewers"] = args ? args.reviewers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultReviewers.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DefaultReviewers resources.
 */
export interface DefaultReviewersState {
    /**
     * The owner of this repository. Can be you or any team you
     * have write access to.
     */
    owner?: pulumi.Input<string>;
    /**
     * The name of the repository.
     */
    repository?: pulumi.Input<string>;
    /**
     * A list of reviewers to use.
     */
    reviewers?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DefaultReviewers resource.
 */
export interface DefaultReviewersArgs {
    /**
     * The owner of this repository. Can be you or any team you
     * have write access to.
     */
    owner: pulumi.Input<string>;
    /**
     * The name of the repository.
     */
    repository: pulumi.Input<string>;
    /**
     * A list of reviewers to use.
     */
    reviewers: pulumi.Input<pulumi.Input<string>[]>;
}
