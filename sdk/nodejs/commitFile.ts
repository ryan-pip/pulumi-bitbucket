// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CommitFile extends pulumi.CustomResource {
    /**
     * Get an existing CommitFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CommitFileState, opts?: pulumi.CustomResourceOptions): CommitFile {
        return new CommitFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitbucket:index/commitFile:CommitFile';

    /**
     * Returns true if the given object is an instance of CommitFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CommitFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CommitFile.__pulumiType;
    }

    public readonly branch!: pulumi.Output<string>;
    /**
     * The SHA of the commit that modified the file
     */
    public readonly commitAuthor!: pulumi.Output<string>;
    /**
     * The SHA of the commit that modified the file
     */
    public readonly commitMessage!: pulumi.Output<string>;
    /**
     * The SHA of the commit that modified the file
     */
    public /*out*/ readonly commitSha!: pulumi.Output<string>;
    public readonly content!: pulumi.Output<string>;
    public readonly filename!: pulumi.Output<string>;
    public readonly repoSlug!: pulumi.Output<string>;
    public readonly workspace!: pulumi.Output<string>;

    /**
     * Create a CommitFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CommitFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CommitFileArgs | CommitFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CommitFileState | undefined;
            resourceInputs["branch"] = state ? state.branch : undefined;
            resourceInputs["commitAuthor"] = state ? state.commitAuthor : undefined;
            resourceInputs["commitMessage"] = state ? state.commitMessage : undefined;
            resourceInputs["commitSha"] = state ? state.commitSha : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["repoSlug"] = state ? state.repoSlug : undefined;
            resourceInputs["workspace"] = state ? state.workspace : undefined;
        } else {
            const args = argsOrState as CommitFileArgs | undefined;
            if ((!args || args.branch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'branch'");
            }
            if ((!args || args.commitAuthor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commitAuthor'");
            }
            if ((!args || args.commitMessage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commitMessage'");
            }
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.filename === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filename'");
            }
            if ((!args || args.repoSlug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoSlug'");
            }
            if ((!args || args.workspace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspace'");
            }
            resourceInputs["branch"] = args ? args.branch : undefined;
            resourceInputs["commitAuthor"] = args ? args.commitAuthor : undefined;
            resourceInputs["commitMessage"] = args ? args.commitMessage : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["repoSlug"] = args ? args.repoSlug : undefined;
            resourceInputs["workspace"] = args ? args.workspace : undefined;
            resourceInputs["commitSha"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CommitFile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CommitFile resources.
 */
export interface CommitFileState {
    branch?: pulumi.Input<string>;
    /**
     * The SHA of the commit that modified the file
     */
    commitAuthor?: pulumi.Input<string>;
    /**
     * The SHA of the commit that modified the file
     */
    commitMessage?: pulumi.Input<string>;
    /**
     * The SHA of the commit that modified the file
     */
    commitSha?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    filename?: pulumi.Input<string>;
    repoSlug?: pulumi.Input<string>;
    workspace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CommitFile resource.
 */
export interface CommitFileArgs {
    branch: pulumi.Input<string>;
    /**
     * The SHA of the commit that modified the file
     */
    commitAuthor: pulumi.Input<string>;
    /**
     * The SHA of the commit that modified the file
     */
    commitMessage: pulumi.Input<string>;
    content: pulumi.Input<string>;
    filename: pulumi.Input<string>;
    repoSlug: pulumi.Input<string>;
    workspace: pulumi.Input<string>;
}
