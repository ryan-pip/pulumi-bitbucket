// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Bitbucket Repository User Permission Resource.
 *
 * This allows you set explicit user permission for a project.
 *
 * OAuth2 Scopes: `project:admin`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as bitbucket from "@pulumi/bitbucket";
 *
 * const example = new bitbucket.ProjectUserPermission("example", {
 *     workspace: "example",
 *     projectKey: bitbucket_project.example.key,
 *     userId: "user-id",
 *     permission: "read",
 * });
 * ```
 *
 * ## Import
 *
 * Repository User Permissions can be imported using their `workspace:project-key:user-id` ID, e.g.
 *
 * ```sh
 *  $ pulumi import bitbucket:index/projectUserPermission:ProjectUserPermission example workspace:project-key:user-id
 * ```
 */
export class ProjectUserPermission extends pulumi.CustomResource {
    /**
     * Get an existing ProjectUserPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectUserPermissionState, opts?: pulumi.CustomResourceOptions): ProjectUserPermission {
        return new ProjectUserPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitbucket:index/projectUserPermission:ProjectUserPermission';

    /**
     * Returns true if the given object is an instance of ProjectUserPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectUserPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectUserPermission.__pulumiType;
    }

    /**
     * Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
     */
    public readonly permission!: pulumi.Output<string>;
    /**
     * The project key.
     */
    public readonly projectKey!: pulumi.Output<string>;
    /**
     * The UUID of the user.
     */
    public readonly userId!: pulumi.Output<string>;
    /**
     * The workspace id.
     */
    public readonly workspace!: pulumi.Output<string>;

    /**
     * Create a ProjectUserPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectUserPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectUserPermissionArgs | ProjectUserPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectUserPermissionState | undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["workspace"] = state ? state.workspace : undefined;
        } else {
            const args = argsOrState as ProjectUserPermissionArgs | undefined;
            if ((!args || args.permission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            if ((!args || args.projectKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectKey'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            if ((!args || args.workspace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspace'");
            }
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["workspace"] = args ? args.workspace : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectUserPermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectUserPermission resources.
 */
export interface ProjectUserPermissionState {
    /**
     * Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
     */
    permission?: pulumi.Input<string>;
    /**
     * The project key.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * The UUID of the user.
     */
    userId?: pulumi.Input<string>;
    /**
     * The workspace id.
     */
    workspace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectUserPermission resource.
 */
export interface ProjectUserPermissionArgs {
    /**
     * Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
     */
    permission: pulumi.Input<string>;
    /**
     * The project key.
     */
    projectKey: pulumi.Input<string>;
    /**
     * The UUID of the user.
     */
    userId: pulumi.Input<string>;
    /**
     * The workspace id.
     */
    workspace: pulumi.Input<string>;
}
