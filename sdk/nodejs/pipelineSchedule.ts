// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Bitbucket Pipeline Schedule resource.
 *
 * This allows you to manage your Pipeline Schedules for a repository.
 *
 * OAuth2 Scopes: `none`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as bitbucket from "@ryan-pip/pulumi_bitbucket";
 *
 * const test = new bitbucket.PipelineSchedule("test", {
 *     workspace: "example",
 *     repository: bitbucket_repository.test.name,
 *     cronPattern: "0 30 * * * ? *",
 *     enabled: true,
 *     target: {
 *         refName: "master",
 *         refType: "branch",
 *         selector: {
 *             pattern: "staging",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Pipeline Schedules can be imported using their `workspace/repo-slug/uuid` ID, e.g.
 *
 * ```sh
 *  $ pulumi import bitbucket:index/pipelineSchedule:PipelineSchedule schedule workspace/repo-slug/uuid
 * ```
 */
export class PipelineSchedule extends pulumi.CustomResource {
    /**
     * Get an existing PipelineSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PipelineScheduleState, opts?: pulumi.CustomResourceOptions): PipelineSchedule {
        return new PipelineSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitbucket:index/pipelineSchedule:PipelineSchedule';

    /**
     * Returns true if the given object is an instance of PipelineSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PipelineSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PipelineSchedule.__pulumiType;
    }

    /**
     * The cron expression that the schedule applies.
     */
    public readonly cronPattern!: pulumi.Output<string>;
    /**
     * Whether the schedule is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The Repository to create schedule in.
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * Schedule Target definition. See Target below.
     */
    public readonly target!: pulumi.Output<outputs.PipelineScheduleTarget>;
    /**
     * The UUID identifying the schedule.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    /**
     * The Workspace where the repository resides.
     */
    public readonly workspace!: pulumi.Output<string>;

    /**
     * Create a PipelineSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PipelineScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PipelineScheduleArgs | PipelineScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PipelineScheduleState | undefined;
            resourceInputs["cronPattern"] = state ? state.cronPattern : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["workspace"] = state ? state.workspace : undefined;
        } else {
            const args = argsOrState as PipelineScheduleArgs | undefined;
            if ((!args || args.cronPattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cronPattern'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            if ((!args || args.workspace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspace'");
            }
            resourceInputs["cronPattern"] = args ? args.cronPattern : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["workspace"] = args ? args.workspace : undefined;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PipelineSchedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PipelineSchedule resources.
 */
export interface PipelineScheduleState {
    /**
     * The cron expression that the schedule applies.
     */
    cronPattern?: pulumi.Input<string>;
    /**
     * Whether the schedule is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The Repository to create schedule in.
     */
    repository?: pulumi.Input<string>;
    /**
     * Schedule Target definition. See Target below.
     */
    target?: pulumi.Input<inputs.PipelineScheduleTarget>;
    /**
     * The UUID identifying the schedule.
     */
    uuid?: pulumi.Input<string>;
    /**
     * The Workspace where the repository resides.
     */
    workspace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PipelineSchedule resource.
 */
export interface PipelineScheduleArgs {
    /**
     * The cron expression that the schedule applies.
     */
    cronPattern: pulumi.Input<string>;
    /**
     * Whether the schedule is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The Repository to create schedule in.
     */
    repository: pulumi.Input<string>;
    /**
     * Schedule Target definition. See Target below.
     */
    target: pulumi.Input<inputs.PipelineScheduleTarget>;
    /**
     * The Workspace where the repository resides.
     */
    workspace: pulumi.Input<string>;
}
