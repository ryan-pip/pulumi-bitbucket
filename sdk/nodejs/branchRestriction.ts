// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Bitbucket branch restriction resource.
 *
 * This allows you for setting up branch restrictions for your repository.
 *
 * OAuth2 Scopes: `repository:admin`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as bitbucket from "@pulumi/bitbucket";
 *
 * const master = new bitbucket.BranchRestriction("master", {
 *     groups: [{
 *         owner: "my-owner",
 *         slug: "my-group",
 *     }],
 *     kind: "push",
 *     owner: "myteam",
 *     pattern: "master",
 *     repository: "terraform-code",
 * });
 * ```
 *
 * ## Import
 *
 * Branch Restrictions can be imported using their `owner/repo-name/branch-restriction-id` ID, e.g.
 *
 * ```sh
 *  $ pulumi import bitbucket:index/branchRestriction:BranchRestriction example my-account/my-repo/branch-rest-id
 * ```
 */
export class BranchRestriction extends pulumi.CustomResource {
    /**
     * Get an existing BranchRestriction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BranchRestrictionState, opts?: pulumi.CustomResourceOptions): BranchRestriction {
        return new BranchRestriction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitbucket:index/branchRestriction:BranchRestriction';

    /**
     * Returns true if the given object is an instance of BranchRestriction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BranchRestriction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BranchRestriction.__pulumiType;
    }

    /**
     * Indicates how the restriction is matched against a branch. The default is `glob`. Valid values: `branchingModel`, `glob`.
     */
    public readonly branchMatchKind!: pulumi.Output<string | undefined>;
    /**
     * Apply the restriction to branches of this type. Active when `branchMatchKind` is `branchingModel`. The branch type will be calculated using the branching model configured for the repository. Valid values: `feature`, `bugfix`, `release`, `hotfix`, `development`, `production`.
     */
    public readonly branchType!: pulumi.Output<string | undefined>;
    /**
     * A list of groups to use.
     */
    public readonly groups!: pulumi.Output<outputs.BranchRestrictionGroup[] | undefined>;
    /**
     * The type of restriction that is being applied. Valid values can be found in [docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-branch-restrictions/#api-group-branch-restrictions).
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * The owner of this repository. Can be you or any team you
     * have write access to.
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * Apply the restriction to branches that match this pattern. Active when `branchMatchKind` is `glob`. Will be empty when `branchMatchKind` is `branchingModel`.
     */
    public readonly pattern!: pulumi.Output<string | undefined>;
    /**
     * The name of the repository.
     */
    public readonly repository!: pulumi.Output<string>;
    /**
     * A list of users to use.
     */
    public readonly users!: pulumi.Output<string[] | undefined>;
    /**
     * A value applied to the restriction kind. Currently only applicable to `requirePassingBuildsToMerge`, `requireDefaultReviewerApprovalsToMerge` and `requireApprovalsToMerge`.
     */
    public readonly value!: pulumi.Output<number | undefined>;

    /**
     * Create a BranchRestriction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BranchRestrictionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BranchRestrictionArgs | BranchRestrictionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BranchRestrictionState | undefined;
            resourceInputs["branchMatchKind"] = state ? state.branchMatchKind : undefined;
            resourceInputs["branchType"] = state ? state.branchType : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as BranchRestrictionArgs | undefined;
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["branchMatchKind"] = args ? args.branchMatchKind : undefined;
            resourceInputs["branchType"] = args ? args.branchType : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BranchRestriction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BranchRestriction resources.
 */
export interface BranchRestrictionState {
    /**
     * Indicates how the restriction is matched against a branch. The default is `glob`. Valid values: `branchingModel`, `glob`.
     */
    branchMatchKind?: pulumi.Input<string>;
    /**
     * Apply the restriction to branches of this type. Active when `branchMatchKind` is `branchingModel`. The branch type will be calculated using the branching model configured for the repository. Valid values: `feature`, `bugfix`, `release`, `hotfix`, `development`, `production`.
     */
    branchType?: pulumi.Input<string>;
    /**
     * A list of groups to use.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.BranchRestrictionGroup>[]>;
    /**
     * The type of restriction that is being applied. Valid values can be found in [docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-branch-restrictions/#api-group-branch-restrictions).
     */
    kind?: pulumi.Input<string>;
    /**
     * The owner of this repository. Can be you or any team you
     * have write access to.
     */
    owner?: pulumi.Input<string>;
    /**
     * Apply the restriction to branches that match this pattern. Active when `branchMatchKind` is `glob`. Will be empty when `branchMatchKind` is `branchingModel`.
     */
    pattern?: pulumi.Input<string>;
    /**
     * The name of the repository.
     */
    repository?: pulumi.Input<string>;
    /**
     * A list of users to use.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A value applied to the restriction kind. Currently only applicable to `requirePassingBuildsToMerge`, `requireDefaultReviewerApprovalsToMerge` and `requireApprovalsToMerge`.
     */
    value?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BranchRestriction resource.
 */
export interface BranchRestrictionArgs {
    /**
     * Indicates how the restriction is matched against a branch. The default is `glob`. Valid values: `branchingModel`, `glob`.
     */
    branchMatchKind?: pulumi.Input<string>;
    /**
     * Apply the restriction to branches of this type. Active when `branchMatchKind` is `branchingModel`. The branch type will be calculated using the branching model configured for the repository. Valid values: `feature`, `bugfix`, `release`, `hotfix`, `development`, `production`.
     */
    branchType?: pulumi.Input<string>;
    /**
     * A list of groups to use.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.BranchRestrictionGroup>[]>;
    /**
     * The type of restriction that is being applied. Valid values can be found in [docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-branch-restrictions/#api-group-branch-restrictions).
     */
    kind: pulumi.Input<string>;
    /**
     * The owner of this repository. Can be you or any team you
     * have write access to.
     */
    owner: pulumi.Input<string>;
    /**
     * Apply the restriction to branches that match this pattern. Active when `branchMatchKind` is `glob`. Will be empty when `branchMatchKind` is `branchingModel`.
     */
    pattern?: pulumi.Input<string>;
    /**
     * The name of the repository.
     */
    repository: pulumi.Input<string>;
    /**
     * A list of users to use.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A value applied to the restriction kind. Currently only applicable to `requirePassingBuildsToMerge`, `requireDefaultReviewerApprovalsToMerge` and `requireApprovalsToMerge`.
     */
    value?: pulumi.Input<number>;
}
