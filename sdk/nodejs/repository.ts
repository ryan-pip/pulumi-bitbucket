// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Bitbucket repository resource.
 *
 * This resource allows you manage your repositories such as scm type, if it is
 * private, how to fork the repository and other options.
 *
 * OAuth2 Scopes: `repository`, `repository:admin`, and `repository:delete`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as bitbucket from "@ryan-pip/pulumi_bitbucket";
 *
 * const infrastructure = new bitbucket.Repository("infrastructure", {owner: "myteam"});
 * ```
 *
 * If you want to create a repository with a CamelCase name, you should provide
 * a separate slug
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as bitbucket from "@ryan-pip/pulumi_bitbucket";
 *
 * const infrastructure = new bitbucket.Repository("infrastructure", {
 *     owner: "myteam",
 *     slug: "terraform-code",
 * });
 * ```
 *
 * ## Import
 *
 * Repositories can be imported using their `owner/name` ID, e.g.
 *
 * ```sh
 *  $ pulumi import bitbucket:index/repository:Repository my-repo my-account/my-repo
 * ```
 */
export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitbucket:index/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * The HTTPS clone URL.
     */
    public /*out*/ readonly cloneHttps!: pulumi.Output<string>;
    /**
     * The SSH clone URL.
     */
    public /*out*/ readonly cloneSsh!: pulumi.Output<string>;
    /**
     * What the description of the repo is.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * What the fork policy should be. Defaults to
     * `allowForks`. Valid values are `allowForks`, `noPublicForks`, `noForks`.
     */
    public readonly forkPolicy!: pulumi.Output<string | undefined>;
    /**
     * If this should have issues turned on or not.
     */
    public readonly hasIssues!: pulumi.Output<boolean | undefined>;
    /**
     * If this should have wiki turned on or not.
     */
    public readonly hasWiki!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to inherit branching model from project.
     */
    public readonly inheritBranchingModel!: pulumi.Output<boolean>;
    /**
     * Whether to inherit default merge strategy from project.
     */
    public readonly inheritDefaultMergeStrategy!: pulumi.Output<boolean>;
    /**
     * If this should be private or not. Defaults to `true`.
     */
    public readonly isPrivate!: pulumi.Output<boolean | undefined>;
    /**
     * What the language of this repository should be.
     */
    public readonly language!: pulumi.Output<string | undefined>;
    /**
     * A set of links to a resource related to this object. See Link Below.
     */
    public readonly link!: pulumi.Output<outputs.RepositoryLink>;
    /**
     * The name of the repository.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The owner of this repository. Can be you or any team you
     * have write access to.
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * Turn on to enable pipelines support.
     */
    public readonly pipelinesEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * If you want to have this repo associated with a
     * project.
     */
    public readonly projectKey!: pulumi.Output<string>;
    /**
     * What SCM you want to use. Valid options are `hg` or `git`.
     * Defaults to `git`.
     */
    public readonly scm!: pulumi.Output<string | undefined>;
    /**
     * The slug of the repository.
     */
    public readonly slug!: pulumi.Output<string>;
    /**
     * the uuid of the repository resource.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    /**
     * URL of website associated with this repository.
     */
    public readonly website!: pulumi.Output<string | undefined>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["cloneHttps"] = state ? state.cloneHttps : undefined;
            resourceInputs["cloneSsh"] = state ? state.cloneSsh : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["forkPolicy"] = state ? state.forkPolicy : undefined;
            resourceInputs["hasIssues"] = state ? state.hasIssues : undefined;
            resourceInputs["hasWiki"] = state ? state.hasWiki : undefined;
            resourceInputs["inheritBranchingModel"] = state ? state.inheritBranchingModel : undefined;
            resourceInputs["inheritDefaultMergeStrategy"] = state ? state.inheritDefaultMergeStrategy : undefined;
            resourceInputs["isPrivate"] = state ? state.isPrivate : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["link"] = state ? state.link : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["pipelinesEnabled"] = state ? state.pipelinesEnabled : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
            resourceInputs["scm"] = state ? state.scm : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["website"] = state ? state.website : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forkPolicy"] = args ? args.forkPolicy : undefined;
            resourceInputs["hasIssues"] = args ? args.hasIssues : undefined;
            resourceInputs["hasWiki"] = args ? args.hasWiki : undefined;
            resourceInputs["inheritBranchingModel"] = args ? args.inheritBranchingModel : undefined;
            resourceInputs["inheritDefaultMergeStrategy"] = args ? args.inheritDefaultMergeStrategy : undefined;
            resourceInputs["isPrivate"] = args ? args.isPrivate : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["link"] = args ? args.link : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["pipelinesEnabled"] = args ? args.pipelinesEnabled : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["scm"] = args ? args.scm : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["website"] = args ? args.website : undefined;
            resourceInputs["cloneHttps"] = undefined /*out*/;
            resourceInputs["cloneSsh"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * The HTTPS clone URL.
     */
    cloneHttps?: pulumi.Input<string>;
    /**
     * The SSH clone URL.
     */
    cloneSsh?: pulumi.Input<string>;
    /**
     * What the description of the repo is.
     */
    description?: pulumi.Input<string>;
    /**
     * What the fork policy should be. Defaults to
     * `allowForks`. Valid values are `allowForks`, `noPublicForks`, `noForks`.
     */
    forkPolicy?: pulumi.Input<string>;
    /**
     * If this should have issues turned on or not.
     */
    hasIssues?: pulumi.Input<boolean>;
    /**
     * If this should have wiki turned on or not.
     */
    hasWiki?: pulumi.Input<boolean>;
    /**
     * Whether to inherit branching model from project.
     */
    inheritBranchingModel?: pulumi.Input<boolean>;
    /**
     * Whether to inherit default merge strategy from project.
     */
    inheritDefaultMergeStrategy?: pulumi.Input<boolean>;
    /**
     * If this should be private or not. Defaults to `true`.
     */
    isPrivate?: pulumi.Input<boolean>;
    /**
     * What the language of this repository should be.
     */
    language?: pulumi.Input<string>;
    /**
     * A set of links to a resource related to this object. See Link Below.
     */
    link?: pulumi.Input<inputs.RepositoryLink>;
    /**
     * The name of the repository.
     */
    name?: pulumi.Input<string>;
    /**
     * The owner of this repository. Can be you or any team you
     * have write access to.
     */
    owner?: pulumi.Input<string>;
    /**
     * Turn on to enable pipelines support.
     */
    pipelinesEnabled?: pulumi.Input<boolean>;
    /**
     * If you want to have this repo associated with a
     * project.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * What SCM you want to use. Valid options are `hg` or `git`.
     * Defaults to `git`.
     */
    scm?: pulumi.Input<string>;
    /**
     * The slug of the repository.
     */
    slug?: pulumi.Input<string>;
    /**
     * the uuid of the repository resource.
     */
    uuid?: pulumi.Input<string>;
    /**
     * URL of website associated with this repository.
     */
    website?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * What the description of the repo is.
     */
    description?: pulumi.Input<string>;
    /**
     * What the fork policy should be. Defaults to
     * `allowForks`. Valid values are `allowForks`, `noPublicForks`, `noForks`.
     */
    forkPolicy?: pulumi.Input<string>;
    /**
     * If this should have issues turned on or not.
     */
    hasIssues?: pulumi.Input<boolean>;
    /**
     * If this should have wiki turned on or not.
     */
    hasWiki?: pulumi.Input<boolean>;
    /**
     * Whether to inherit branching model from project.
     */
    inheritBranchingModel?: pulumi.Input<boolean>;
    /**
     * Whether to inherit default merge strategy from project.
     */
    inheritDefaultMergeStrategy?: pulumi.Input<boolean>;
    /**
     * If this should be private or not. Defaults to `true`.
     */
    isPrivate?: pulumi.Input<boolean>;
    /**
     * What the language of this repository should be.
     */
    language?: pulumi.Input<string>;
    /**
     * A set of links to a resource related to this object. See Link Below.
     */
    link?: pulumi.Input<inputs.RepositoryLink>;
    /**
     * The name of the repository.
     */
    name?: pulumi.Input<string>;
    /**
     * The owner of this repository. Can be you or any team you
     * have write access to.
     */
    owner: pulumi.Input<string>;
    /**
     * Turn on to enable pipelines support.
     */
    pipelinesEnabled?: pulumi.Input<boolean>;
    /**
     * If you want to have this repo associated with a
     * project.
     */
    projectKey?: pulumi.Input<string>;
    /**
     * What SCM you want to use. Valid options are `hg` or `git`.
     * Defaults to `git`.
     */
    scm?: pulumi.Input<string>;
    /**
     * The slug of the repository.
     */
    slug?: pulumi.Input<string>;
    /**
     * URL of website associated with this repository.
     */
    website?: pulumi.Input<string>;
}
