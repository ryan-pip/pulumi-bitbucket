// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BranchingModel extends pulumi.CustomResource {
    /**
     * Get an existing BranchingModel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BranchingModelState, opts?: pulumi.CustomResourceOptions): BranchingModel {
        return new BranchingModel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitbucket:index/branchingModel:BranchingModel';

    /**
     * Returns true if the given object is an instance of BranchingModel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BranchingModel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BranchingModel.__pulumiType;
    }

    public readonly branchTypes!: pulumi.Output<outputs.BranchingModelBranchType[]>;
    public readonly development!: pulumi.Output<outputs.BranchingModelDevelopment>;
    public readonly owner!: pulumi.Output<string>;
    public readonly production!: pulumi.Output<outputs.BranchingModelProduction | undefined>;
    public readonly repository!: pulumi.Output<string>;

    /**
     * Create a BranchingModel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BranchingModelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BranchingModelArgs | BranchingModelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BranchingModelState | undefined;
            resourceInputs["branchTypes"] = state ? state.branchTypes : undefined;
            resourceInputs["development"] = state ? state.development : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["production"] = state ? state.production : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
        } else {
            const args = argsOrState as BranchingModelArgs | undefined;
            if ((!args || args.development === undefined) && !opts.urn) {
                throw new Error("Missing required property 'development'");
            }
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["branchTypes"] = args ? args.branchTypes : undefined;
            resourceInputs["development"] = args ? args.development : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["production"] = args ? args.production : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BranchingModel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BranchingModel resources.
 */
export interface BranchingModelState {
    branchTypes?: pulumi.Input<pulumi.Input<inputs.BranchingModelBranchType>[]>;
    development?: pulumi.Input<inputs.BranchingModelDevelopment>;
    owner?: pulumi.Input<string>;
    production?: pulumi.Input<inputs.BranchingModelProduction>;
    repository?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BranchingModel resource.
 */
export interface BranchingModelArgs {
    branchTypes?: pulumi.Input<pulumi.Input<inputs.BranchingModelBranchType>[]>;
    development: pulumi.Input<inputs.BranchingModelDevelopment>;
    owner: pulumi.Input<string>;
    production?: pulumi.Input<inputs.BranchingModelProduction>;
    repository: pulumi.Input<string>;
}
