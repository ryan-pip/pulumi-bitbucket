// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Bitbucket branching model resource.
 *
 * This allows you for setting up branching models for your repository.
 *
 * OAuth2 Scopes: `repository:admin`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as bitbucket from "@pulumi/bitbucket";
 *
 * // Manage your repositories branching models
 * const testRepository = new bitbucket.Repository("testRepository", {owner: "example"});
 * const testBranchingModel = new bitbucket.BranchingModel("testBranchingModel", {
 *     owner: "example",
 *     repository: testRepository.name,
 *     development: {
 *         useMainbranch: true,
 *     },
 *     branchTypes: [
 *         {
 *             enabled: true,
 *             kind: "feature",
 *             prefix: "test/",
 *         },
 *         {
 *             enabled: true,
 *             kind: "hotfix",
 *             prefix: "hotfix/",
 *         },
 *         {
 *             enabled: true,
 *             kind: "release",
 *             prefix: "release/",
 *         },
 *         {
 *             enabled: true,
 *             kind: "bugfix",
 *             prefix: "bugfix/",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Branching Models can be imported using the owner and repo separated by a (`/`), e.g.,
 *
 * ```sh
 *  $ pulumi import bitbucket:index/branchingModel:BranchingModel example owner/repo
 * ```
 */
export class BranchingModel extends pulumi.CustomResource {
    /**
     * Get an existing BranchingModel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BranchingModelState, opts?: pulumi.CustomResourceOptions): BranchingModel {
        return new BranchingModel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitbucket:index/branchingModel:BranchingModel';

    /**
     * Returns true if the given object is an instance of BranchingModel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BranchingModel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BranchingModel.__pulumiType;
    }

    /**
     * A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
     */
    public readonly branchTypes!: pulumi.Output<outputs.BranchingModelBranchType[]>;
    /**
     * The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
     */
    public readonly development!: pulumi.Output<outputs.BranchingModelDevelopment>;
    /**
     * The owner of this repository. Can be you or any team you
     * have write access to.
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
     */
    public readonly production!: pulumi.Output<outputs.BranchingModelProduction | undefined>;
    /**
     * The name of the repository.
     */
    public readonly repository!: pulumi.Output<string>;

    /**
     * Create a BranchingModel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BranchingModelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BranchingModelArgs | BranchingModelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BranchingModelState | undefined;
            resourceInputs["branchTypes"] = state ? state.branchTypes : undefined;
            resourceInputs["development"] = state ? state.development : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["production"] = state ? state.production : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
        } else {
            const args = argsOrState as BranchingModelArgs | undefined;
            if ((!args || args.development === undefined) && !opts.urn) {
                throw new Error("Missing required property 'development'");
            }
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["branchTypes"] = args ? args.branchTypes : undefined;
            resourceInputs["development"] = args ? args.development : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["production"] = args ? args.production : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BranchingModel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BranchingModel resources.
 */
export interface BranchingModelState {
    /**
     * A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
     */
    branchTypes?: pulumi.Input<pulumi.Input<inputs.BranchingModelBranchType>[]>;
    /**
     * The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
     */
    development?: pulumi.Input<inputs.BranchingModelDevelopment>;
    /**
     * The owner of this repository. Can be you or any team you
     * have write access to.
     */
    owner?: pulumi.Input<string>;
    /**
     * The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
     */
    production?: pulumi.Input<inputs.BranchingModelProduction>;
    /**
     * The name of the repository.
     */
    repository?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BranchingModel resource.
 */
export interface BranchingModelArgs {
    /**
     * A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
     */
    branchTypes?: pulumi.Input<pulumi.Input<inputs.BranchingModelBranchType>[]>;
    /**
     * The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
     */
    development: pulumi.Input<inputs.BranchingModelDevelopment>;
    /**
     * The owner of this repository. Can be you or any team you
     * have write access to.
     */
    owner: pulumi.Input<string>;
    /**
     * The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
     */
    production?: pulumi.Input<inputs.BranchingModelProduction>;
    /**
     * The name of the repository.
     */
    repository: pulumi.Input<string>;
}
