// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BranchRestrictionArgs, BranchRestrictionState } from "./branchRestriction";
export type BranchRestriction = import("./branchRestriction").BranchRestriction;
export const BranchRestriction: typeof import("./branchRestriction").BranchRestriction = null as any;
utilities.lazyLoad(exports, ["BranchRestriction"], () => require("./branchRestriction"));

export { BranchingModelArgs, BranchingModelState } from "./branchingModel";
export type BranchingModel = import("./branchingModel").BranchingModel;
export const BranchingModel: typeof import("./branchingModel").BranchingModel = null as any;
utilities.lazyLoad(exports, ["BranchingModel"], () => require("./branchingModel"));

export { CommitFileArgs, CommitFileState } from "./commitFile";
export type CommitFile = import("./commitFile").CommitFile;
export const CommitFile: typeof import("./commitFile").CommitFile = null as any;
utilities.lazyLoad(exports, ["CommitFile"], () => require("./commitFile"));

export { DefaultReviewersArgs, DefaultReviewersState } from "./defaultReviewers";
export type DefaultReviewers = import("./defaultReviewers").DefaultReviewers;
export const DefaultReviewers: typeof import("./defaultReviewers").DefaultReviewers = null as any;
utilities.lazyLoad(exports, ["DefaultReviewers"], () => require("./defaultReviewers"));

export { DeployKeyArgs, DeployKeyState } from "./deployKey";
export type DeployKey = import("./deployKey").DeployKey;
export const DeployKey: typeof import("./deployKey").DeployKey = null as any;
utilities.lazyLoad(exports, ["DeployKey"], () => require("./deployKey"));

export { DeploymentArgs, DeploymentState } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));

export { DeploymentVariableArgs, DeploymentVariableState } from "./deploymentVariable";
export type DeploymentVariable = import("./deploymentVariable").DeploymentVariable;
export const DeploymentVariable: typeof import("./deploymentVariable").DeploymentVariable = null as any;
utilities.lazyLoad(exports, ["DeploymentVariable"], () => require("./deploymentVariable"));

export { ForkedRepositoryArgs, ForkedRepositoryState } from "./forkedRepository";
export type ForkedRepository = import("./forkedRepository").ForkedRepository;
export const ForkedRepository: typeof import("./forkedRepository").ForkedRepository = null as any;
utilities.lazyLoad(exports, ["ForkedRepository"], () => require("./forkedRepository"));

export { GetCurrentUserResult } from "./getCurrentUser";
export const getCurrentUser: typeof import("./getCurrentUser").getCurrentUser = null as any;
export const getCurrentUserOutput: typeof import("./getCurrentUser").getCurrentUserOutput = null as any;
utilities.lazyLoad(exports, ["getCurrentUser","getCurrentUserOutput"], () => require("./getCurrentUser"));

export { GetDeploymentArgs, GetDeploymentResult, GetDeploymentOutputArgs } from "./getDeployment";
export const getDeployment: typeof import("./getDeployment").getDeployment = null as any;
export const getDeploymentOutput: typeof import("./getDeployment").getDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getDeployment","getDeploymentOutput"], () => require("./getDeployment"));

export { GetDeploymentsArgs, GetDeploymentsResult, GetDeploymentsOutputArgs } from "./getDeployments";
export const getDeployments: typeof import("./getDeployments").getDeployments = null as any;
export const getDeploymentsOutput: typeof import("./getDeployments").getDeploymentsOutput = null as any;
utilities.lazyLoad(exports, ["getDeployments","getDeploymentsOutput"], () => require("./getDeployments"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetGroupMembersArgs, GetGroupMembersResult, GetGroupMembersOutputArgs } from "./getGroupMembers";
export const getGroupMembers: typeof import("./getGroupMembers").getGroupMembers = null as any;
export const getGroupMembersOutput: typeof import("./getGroupMembers").getGroupMembersOutput = null as any;
utilities.lazyLoad(exports, ["getGroupMembers","getGroupMembersOutput"], () => require("./getGroupMembers"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetHookTypesArgs, GetHookTypesResult, GetHookTypesOutputArgs } from "./getHookTypes";
export const getHookTypes: typeof import("./getHookTypes").getHookTypes = null as any;
export const getHookTypesOutput: typeof import("./getHookTypes").getHookTypesOutput = null as any;
utilities.lazyLoad(exports, ["getHookTypes","getHookTypesOutput"], () => require("./getHookTypes"));

export { GetIpRangesResult } from "./getIpRanges";
export const getIpRanges: typeof import("./getIpRanges").getIpRanges = null as any;
export const getIpRangesOutput: typeof import("./getIpRanges").getIpRangesOutput = null as any;
utilities.lazyLoad(exports, ["getIpRanges","getIpRangesOutput"], () => require("./getIpRanges"));

export { GetPipelineOidcConfigArgs, GetPipelineOidcConfigResult, GetPipelineOidcConfigOutputArgs } from "./getPipelineOidcConfig";
export const getPipelineOidcConfig: typeof import("./getPipelineOidcConfig").getPipelineOidcConfig = null as any;
export const getPipelineOidcConfigOutput: typeof import("./getPipelineOidcConfig").getPipelineOidcConfigOutput = null as any;
utilities.lazyLoad(exports, ["getPipelineOidcConfig","getPipelineOidcConfigOutput"], () => require("./getPipelineOidcConfig"));

export { GetPipelineOidcConfigKeysArgs, GetPipelineOidcConfigKeysResult, GetPipelineOidcConfigKeysOutputArgs } from "./getPipelineOidcConfigKeys";
export const getPipelineOidcConfigKeys: typeof import("./getPipelineOidcConfigKeys").getPipelineOidcConfigKeys = null as any;
export const getPipelineOidcConfigKeysOutput: typeof import("./getPipelineOidcConfigKeys").getPipelineOidcConfigKeysOutput = null as any;
utilities.lazyLoad(exports, ["getPipelineOidcConfigKeys","getPipelineOidcConfigKeysOutput"], () => require("./getPipelineOidcConfigKeys"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { GetWorkspaceMembersArgs, GetWorkspaceMembersResult, GetWorkspaceMembersOutputArgs } from "./getWorkspaceMembers";
export const getWorkspaceMembers: typeof import("./getWorkspaceMembers").getWorkspaceMembers = null as any;
export const getWorkspaceMembersOutput: typeof import("./getWorkspaceMembers").getWorkspaceMembersOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaceMembers","getWorkspaceMembersOutput"], () => require("./getWorkspaceMembers"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMembershipArgs, GroupMembershipState } from "./groupMembership";
export type GroupMembership = import("./groupMembership").GroupMembership;
export const GroupMembership: typeof import("./groupMembership").GroupMembership = null as any;
utilities.lazyLoad(exports, ["GroupMembership"], () => require("./groupMembership"));

export { HookArgs, HookState } from "./hook";
export type Hook = import("./hook").Hook;
export const Hook: typeof import("./hook").Hook = null as any;
utilities.lazyLoad(exports, ["Hook"], () => require("./hook"));

export { PipelineScheduleArgs, PipelineScheduleState } from "./pipelineSchedule";
export type PipelineSchedule = import("./pipelineSchedule").PipelineSchedule;
export const PipelineSchedule: typeof import("./pipelineSchedule").PipelineSchedule = null as any;
utilities.lazyLoad(exports, ["PipelineSchedule"], () => require("./pipelineSchedule"));

export { PipelineSshKeyArgs, PipelineSshKeyState } from "./pipelineSshKey";
export type PipelineSshKey = import("./pipelineSshKey").PipelineSshKey;
export const PipelineSshKey: typeof import("./pipelineSshKey").PipelineSshKey = null as any;
utilities.lazyLoad(exports, ["PipelineSshKey"], () => require("./pipelineSshKey"));

export { PipelineSshKnownHostArgs, PipelineSshKnownHostState } from "./pipelineSshKnownHost";
export type PipelineSshKnownHost = import("./pipelineSshKnownHost").PipelineSshKnownHost;
export const PipelineSshKnownHost: typeof import("./pipelineSshKnownHost").PipelineSshKnownHost = null as any;
utilities.lazyLoad(exports, ["PipelineSshKnownHost"], () => require("./pipelineSshKnownHost"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectBranchingModelArgs, ProjectBranchingModelState } from "./projectBranchingModel";
export type ProjectBranchingModel = import("./projectBranchingModel").ProjectBranchingModel;
export const ProjectBranchingModel: typeof import("./projectBranchingModel").ProjectBranchingModel = null as any;
utilities.lazyLoad(exports, ["ProjectBranchingModel"], () => require("./projectBranchingModel"));

export { ProjectDefaultReviewersArgs, ProjectDefaultReviewersState } from "./projectDefaultReviewers";
export type ProjectDefaultReviewers = import("./projectDefaultReviewers").ProjectDefaultReviewers;
export const ProjectDefaultReviewers: typeof import("./projectDefaultReviewers").ProjectDefaultReviewers = null as any;
utilities.lazyLoad(exports, ["ProjectDefaultReviewers"], () => require("./projectDefaultReviewers"));

export { ProjectGroupPermissionArgs, ProjectGroupPermissionState } from "./projectGroupPermission";
export type ProjectGroupPermission = import("./projectGroupPermission").ProjectGroupPermission;
export const ProjectGroupPermission: typeof import("./projectGroupPermission").ProjectGroupPermission = null as any;
utilities.lazyLoad(exports, ["ProjectGroupPermission"], () => require("./projectGroupPermission"));

export { ProjectUserPermissionArgs, ProjectUserPermissionState } from "./projectUserPermission";
export type ProjectUserPermission = import("./projectUserPermission").ProjectUserPermission;
export const ProjectUserPermission: typeof import("./projectUserPermission").ProjectUserPermission = null as any;
utilities.lazyLoad(exports, ["ProjectUserPermission"], () => require("./projectUserPermission"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { RepositoryGroupPermissionArgs, RepositoryGroupPermissionState } from "./repositoryGroupPermission";
export type RepositoryGroupPermission = import("./repositoryGroupPermission").RepositoryGroupPermission;
export const RepositoryGroupPermission: typeof import("./repositoryGroupPermission").RepositoryGroupPermission = null as any;
utilities.lazyLoad(exports, ["RepositoryGroupPermission"], () => require("./repositoryGroupPermission"));

export { RepositoryUserPermissionArgs, RepositoryUserPermissionState } from "./repositoryUserPermission";
export type RepositoryUserPermission = import("./repositoryUserPermission").RepositoryUserPermission;
export const RepositoryUserPermission: typeof import("./repositoryUserPermission").RepositoryUserPermission = null as any;
utilities.lazyLoad(exports, ["RepositoryUserPermission"], () => require("./repositoryUserPermission"));

export { RepositoryVariableArgs, RepositoryVariableState } from "./repositoryVariable";
export type RepositoryVariable = import("./repositoryVariable").RepositoryVariable;
export const RepositoryVariable: typeof import("./repositoryVariable").RepositoryVariable = null as any;
utilities.lazyLoad(exports, ["RepositoryVariable"], () => require("./repositoryVariable"));

export { SshKeyArgs, SshKeyState } from "./sshKey";
export type SshKey = import("./sshKey").SshKey;
export const SshKey: typeof import("./sshKey").SshKey = null as any;
utilities.lazyLoad(exports, ["SshKey"], () => require("./sshKey"));

export { WorkspaceHookArgs, WorkspaceHookState } from "./workspaceHook";
export type WorkspaceHook = import("./workspaceHook").WorkspaceHook;
export const WorkspaceHook: typeof import("./workspaceHook").WorkspaceHook = null as any;
utilities.lazyLoad(exports, ["WorkspaceHook"], () => require("./workspaceHook"));

export { WorkspaceVariableArgs, WorkspaceVariableState } from "./workspaceVariable";
export type WorkspaceVariable = import("./workspaceVariable").WorkspaceVariable;
export const WorkspaceVariable: typeof import("./workspaceVariable").WorkspaceVariable = null as any;
utilities.lazyLoad(exports, ["WorkspaceVariable"], () => require("./workspaceVariable"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "bitbucket:index/branchRestriction:BranchRestriction":
                return new BranchRestriction(name, <any>undefined, { urn })
            case "bitbucket:index/branchingModel:BranchingModel":
                return new BranchingModel(name, <any>undefined, { urn })
            case "bitbucket:index/commitFile:CommitFile":
                return new CommitFile(name, <any>undefined, { urn })
            case "bitbucket:index/defaultReviewers:DefaultReviewers":
                return new DefaultReviewers(name, <any>undefined, { urn })
            case "bitbucket:index/deployKey:DeployKey":
                return new DeployKey(name, <any>undefined, { urn })
            case "bitbucket:index/deployment:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "bitbucket:index/deploymentVariable:DeploymentVariable":
                return new DeploymentVariable(name, <any>undefined, { urn })
            case "bitbucket:index/forkedRepository:ForkedRepository":
                return new ForkedRepository(name, <any>undefined, { urn })
            case "bitbucket:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "bitbucket:index/groupMembership:GroupMembership":
                return new GroupMembership(name, <any>undefined, { urn })
            case "bitbucket:index/hook:Hook":
                return new Hook(name, <any>undefined, { urn })
            case "bitbucket:index/pipelineSchedule:PipelineSchedule":
                return new PipelineSchedule(name, <any>undefined, { urn })
            case "bitbucket:index/pipelineSshKey:PipelineSshKey":
                return new PipelineSshKey(name, <any>undefined, { urn })
            case "bitbucket:index/pipelineSshKnownHost:PipelineSshKnownHost":
                return new PipelineSshKnownHost(name, <any>undefined, { urn })
            case "bitbucket:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "bitbucket:index/projectBranchingModel:ProjectBranchingModel":
                return new ProjectBranchingModel(name, <any>undefined, { urn })
            case "bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers":
                return new ProjectDefaultReviewers(name, <any>undefined, { urn })
            case "bitbucket:index/projectGroupPermission:ProjectGroupPermission":
                return new ProjectGroupPermission(name, <any>undefined, { urn })
            case "bitbucket:index/projectUserPermission:ProjectUserPermission":
                return new ProjectUserPermission(name, <any>undefined, { urn })
            case "bitbucket:index/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "bitbucket:index/repositoryGroupPermission:RepositoryGroupPermission":
                return new RepositoryGroupPermission(name, <any>undefined, { urn })
            case "bitbucket:index/repositoryUserPermission:RepositoryUserPermission":
                return new RepositoryUserPermission(name, <any>undefined, { urn })
            case "bitbucket:index/repositoryVariable:RepositoryVariable":
                return new RepositoryVariable(name, <any>undefined, { urn })
            case "bitbucket:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "bitbucket:index/workspaceHook:WorkspaceHook":
                return new WorkspaceHook(name, <any>undefined, { urn })
            case "bitbucket:index/workspaceVariable:WorkspaceVariable":
                return new WorkspaceVariable(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("bitbucket", "index/branchRestriction", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/branchingModel", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/commitFile", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/defaultReviewers", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/deployKey", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/deployment", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/deploymentVariable", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/forkedRepository", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/group", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/groupMembership", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/hook", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/pipelineSchedule", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/pipelineSshKey", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/pipelineSshKnownHost", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/project", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/projectBranchingModel", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/projectDefaultReviewers", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/projectGroupPermission", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/projectUserPermission", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/repository", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/repositoryGroupPermission", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/repositoryUserPermission", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/repositoryVariable", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/sshKey", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/workspaceHook", _module)
pulumi.runtime.registerResourceModule("bitbucket", "index/workspaceVariable", _module)
pulumi.runtime.registerResourcePackage("bitbucket", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:bitbucket") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
