// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource allows you to configure workspace variables.
 *
 * OAuth2 Scopes: `none`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as bitbucket from "@ryan-pip/pulumi_bitbucket";
 *
 * const country = new bitbucket.WorkspaceVariable("country", {
 *     workspace: bitbucket_workspace.test.id,
 *     key: "COUNTRY",
 *     value: "Kenya",
 *     secured: false,
 * });
 * ```
 *
 * ## Import
 *
 * Workspace Variables can be imported using their `workspace-id/uuid` ID, e.g.
 *
 * ```sh
 *  $ pulumi import bitbucket:index/workspaceVariable:WorkspaceVariable example workspace-id/uuid
 * ```
 */
export class WorkspaceVariable extends pulumi.CustomResource {
    /**
     * Get an existing WorkspaceVariable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceVariableState, opts?: pulumi.CustomResourceOptions): WorkspaceVariable {
        return new WorkspaceVariable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitbucket:index/workspaceVariable:WorkspaceVariable';

    /**
     * Returns true if the given object is an instance of WorkspaceVariable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WorkspaceVariable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkspaceVariable.__pulumiType;
    }

    /**
     * The unique name of the variable.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.
     */
    public readonly secured!: pulumi.Output<boolean | undefined>;
    /**
     * (Computed) The UUID identifying the variable.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    /**
     * The value of the variable.
     */
    public readonly value!: pulumi.Output<string>;
    /**
     * The workspace ID you want to assign this variable to.
     */
    public readonly workspace!: pulumi.Output<string>;

    /**
     * Create a WorkspaceVariable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspaceVariableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceVariableArgs | WorkspaceVariableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkspaceVariableState | undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["secured"] = state ? state.secured : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["workspace"] = state ? state.workspace : undefined;
        } else {
            const args = argsOrState as WorkspaceVariableArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            if ((!args || args.workspace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspace'");
            }
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["secured"] = args ? args.secured : undefined;
            resourceInputs["value"] = args?.value ? pulumi.secret(args.value) : undefined;
            resourceInputs["workspace"] = args ? args.workspace : undefined;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["value"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WorkspaceVariable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering WorkspaceVariable resources.
 */
export interface WorkspaceVariableState {
    /**
     * The unique name of the variable.
     */
    key?: pulumi.Input<string>;
    /**
     * If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.
     */
    secured?: pulumi.Input<boolean>;
    /**
     * (Computed) The UUID identifying the variable.
     */
    uuid?: pulumi.Input<string>;
    /**
     * The value of the variable.
     */
    value?: pulumi.Input<string>;
    /**
     * The workspace ID you want to assign this variable to.
     */
    workspace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WorkspaceVariable resource.
 */
export interface WorkspaceVariableArgs {
    /**
     * The unique name of the variable.
     */
    key: pulumi.Input<string>;
    /**
     * If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.
     */
    secured?: pulumi.Input<boolean>;
    /**
     * The value of the variable.
     */
    value: pulumi.Input<string>;
    /**
     * The workspace ID you want to assign this variable to.
     */
    workspace: pulumi.Input<string>;
}
