// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ForkedRepository extends pulumi.CustomResource {
    /**
     * Get an existing ForkedRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ForkedRepositoryState, opts?: pulumi.CustomResourceOptions): ForkedRepository {
        return new ForkedRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitbucket:index/forkedRepository:ForkedRepository';

    /**
     * Returns true if the given object is an instance of ForkedRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ForkedRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ForkedRepository.__pulumiType;
    }

    public /*out*/ readonly cloneHttps!: pulumi.Output<string>;
    public /*out*/ readonly cloneSsh!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly forkPolicy!: pulumi.Output<string | undefined>;
    public readonly hasIssues!: pulumi.Output<boolean | undefined>;
    public readonly hasWiki!: pulumi.Output<boolean | undefined>;
    public readonly isPrivate!: pulumi.Output<boolean | undefined>;
    public readonly language!: pulumi.Output<string | undefined>;
    public readonly link!: pulumi.Output<outputs.ForkedRepositoryLink>;
    public readonly name!: pulumi.Output<string>;
    public readonly owner!: pulumi.Output<string>;
    public readonly parent!: pulumi.Output<{[key: string]: string}>;
    public readonly pipelinesEnabled!: pulumi.Output<boolean | undefined>;
    public readonly projectKey!: pulumi.Output<string>;
    public /*out*/ readonly scm!: pulumi.Output<string>;
    public readonly slug!: pulumi.Output<string>;
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    public readonly website!: pulumi.Output<string | undefined>;

    /**
     * Create a ForkedRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ForkedRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ForkedRepositoryArgs | ForkedRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ForkedRepositoryState | undefined;
            resourceInputs["cloneHttps"] = state ? state.cloneHttps : undefined;
            resourceInputs["cloneSsh"] = state ? state.cloneSsh : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["forkPolicy"] = state ? state.forkPolicy : undefined;
            resourceInputs["hasIssues"] = state ? state.hasIssues : undefined;
            resourceInputs["hasWiki"] = state ? state.hasWiki : undefined;
            resourceInputs["isPrivate"] = state ? state.isPrivate : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["link"] = state ? state.link : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["pipelinesEnabled"] = state ? state.pipelinesEnabled : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
            resourceInputs["scm"] = state ? state.scm : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["website"] = state ? state.website : undefined;
        } else {
            const args = argsOrState as ForkedRepositoryArgs | undefined;
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            if ((!args || args.parent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parent'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forkPolicy"] = args ? args.forkPolicy : undefined;
            resourceInputs["hasIssues"] = args ? args.hasIssues : undefined;
            resourceInputs["hasWiki"] = args ? args.hasWiki : undefined;
            resourceInputs["isPrivate"] = args ? args.isPrivate : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["link"] = args ? args.link : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["pipelinesEnabled"] = args ? args.pipelinesEnabled : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["website"] = args ? args.website : undefined;
            resourceInputs["cloneHttps"] = undefined /*out*/;
            resourceInputs["cloneSsh"] = undefined /*out*/;
            resourceInputs["scm"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ForkedRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ForkedRepository resources.
 */
export interface ForkedRepositoryState {
    cloneHttps?: pulumi.Input<string>;
    cloneSsh?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    forkPolicy?: pulumi.Input<string>;
    hasIssues?: pulumi.Input<boolean>;
    hasWiki?: pulumi.Input<boolean>;
    isPrivate?: pulumi.Input<boolean>;
    language?: pulumi.Input<string>;
    link?: pulumi.Input<inputs.ForkedRepositoryLink>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    parent?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    pipelinesEnabled?: pulumi.Input<boolean>;
    projectKey?: pulumi.Input<string>;
    scm?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    website?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ForkedRepository resource.
 */
export interface ForkedRepositoryArgs {
    description?: pulumi.Input<string>;
    forkPolicy?: pulumi.Input<string>;
    hasIssues?: pulumi.Input<boolean>;
    hasWiki?: pulumi.Input<boolean>;
    isPrivate?: pulumi.Input<boolean>;
    language?: pulumi.Input<string>;
    link?: pulumi.Input<inputs.ForkedRepositoryLink>;
    name?: pulumi.Input<string>;
    owner: pulumi.Input<string>;
    parent: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    pipelinesEnabled?: pulumi.Input<boolean>;
    projectKey?: pulumi.Input<string>;
    slug?: pulumi.Input<string>;
    website?: pulumi.Input<string>;
}
