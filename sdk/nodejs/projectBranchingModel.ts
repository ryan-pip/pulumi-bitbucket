// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProjectBranchingModel extends pulumi.CustomResource {
    /**
     * Get an existing ProjectBranchingModel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectBranchingModelState, opts?: pulumi.CustomResourceOptions): ProjectBranchingModel {
        return new ProjectBranchingModel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'bitbucket:index/projectBranchingModel:ProjectBranchingModel';

    /**
     * Returns true if the given object is an instance of ProjectBranchingModel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectBranchingModel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectBranchingModel.__pulumiType;
    }

    public readonly branchTypes!: pulumi.Output<outputs.ProjectBranchingModelBranchType[]>;
    public readonly development!: pulumi.Output<outputs.ProjectBranchingModelDevelopment>;
    public readonly production!: pulumi.Output<outputs.ProjectBranchingModelProduction | undefined>;
    public readonly project!: pulumi.Output<string>;
    public readonly workspace!: pulumi.Output<string>;

    /**
     * Create a ProjectBranchingModel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectBranchingModelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectBranchingModelArgs | ProjectBranchingModelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectBranchingModelState | undefined;
            resourceInputs["branchTypes"] = state ? state.branchTypes : undefined;
            resourceInputs["development"] = state ? state.development : undefined;
            resourceInputs["production"] = state ? state.production : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["workspace"] = state ? state.workspace : undefined;
        } else {
            const args = argsOrState as ProjectBranchingModelArgs | undefined;
            if ((!args || args.development === undefined) && !opts.urn) {
                throw new Error("Missing required property 'development'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.workspace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspace'");
            }
            resourceInputs["branchTypes"] = args ? args.branchTypes : undefined;
            resourceInputs["development"] = args ? args.development : undefined;
            resourceInputs["production"] = args ? args.production : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["workspace"] = args ? args.workspace : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectBranchingModel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectBranchingModel resources.
 */
export interface ProjectBranchingModelState {
    branchTypes?: pulumi.Input<pulumi.Input<inputs.ProjectBranchingModelBranchType>[]>;
    development?: pulumi.Input<inputs.ProjectBranchingModelDevelopment>;
    production?: pulumi.Input<inputs.ProjectBranchingModelProduction>;
    project?: pulumi.Input<string>;
    workspace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectBranchingModel resource.
 */
export interface ProjectBranchingModelArgs {
    branchTypes?: pulumi.Input<pulumi.Input<inputs.ProjectBranchingModelBranchType>[]>;
    development: pulumi.Input<inputs.ProjectBranchingModelDevelopment>;
    production?: pulumi.Input<inputs.ProjectBranchingModelProduction>;
    project: pulumi.Input<string>;
    workspace: pulumi.Input<string>;
}
