// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

// Provides a Bitbucket repository resource that is forked from a parent repo.
//
// This resource allows you manage properties of the fork, if it is
// private, how to fork the repository and other options. SCM cannot be overridden,
// as it is inherited from the parent repository. Creation will fail if the parent
// repo has `noForks` as its fork policy.
//
// OAuth2 Scopes: `repository`, `repository:admin`, and `repository:delete`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bitbucket.NewForkedRepository(ctx, "infrastructure", &bitbucket.ForkedRepositoryArgs{
//				Owner: pulumi.String("myteam"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// If you want to create a repository with a CamelCase name, you should provide
// a separate slug
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bitbucket.NewForkedRepository(ctx, "infrastructure", &bitbucket.ForkedRepositoryArgs{
//				Owner: pulumi.String("myteam"),
//				Slug:  pulumi.String("terraform-code"),
//				Parent: pulumi.StringMap{
//					"owner": pulumi.Any(bitbucket_repository.Test.Owner),
//					"slug":  pulumi.Any(bitbucket_repository.Test.Slug),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Repositories can be imported using their `owner/name` ID, e.g.
//
// ```sh
//
//	$ pulumi import bitbucket:index/forkedRepository:ForkedRepository my-repo my-account/my-repo
//
// ```
type ForkedRepository struct {
	pulumi.CustomResourceState

	// The HTTPS clone URL.
	CloneHttps pulumi.StringOutput `pulumi:"cloneHttps"`
	// The SSH clone URL.
	CloneSsh pulumi.StringOutput `pulumi:"cloneSsh"`
	// What the description of the repo is.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// What the fork policy should be. Defaults to
	// `allowForks`. Valid values are `allowForks`, `noPublicForks`, `noForks`.
	ForkPolicy pulumi.StringPtrOutput `pulumi:"forkPolicy"`
	// If this should have issues turned on or not.
	HasIssues pulumi.BoolPtrOutput `pulumi:"hasIssues"`
	// If this should have wiki turned on or not.
	HasWiki pulumi.BoolPtrOutput `pulumi:"hasWiki"`
	// If this should be private or not. Defaults to `true`. Note that if
	// the parent repo has `noPublicForks` as its fork policy, the resource may
	// fail to be created.
	IsPrivate pulumi.BoolPtrOutput `pulumi:"isPrivate"`
	// What the language of this repository should be.
	Language pulumi.StringPtrOutput `pulumi:"language"`
	// A set of links to a resource related to this object. See Link Below.
	Link ForkedRepositoryLinkOutput `pulumi:"link"`
	// The name of the repository.
	Name pulumi.StringOutput `pulumi:"name"`
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The repository to fork from. See Parent below.
	Parent pulumi.StringMapOutput `pulumi:"parent"`
	// Turn on to enable pipelines support.
	PipelinesEnabled pulumi.BoolPtrOutput `pulumi:"pipelinesEnabled"`
	// If you want to have this repo associated with a
	// project.
	ProjectKey pulumi.StringOutput `pulumi:"projectKey"`
	// The SCM of the resource. Either `hg` or `git`.
	Scm pulumi.StringOutput `pulumi:"scm"`
	// The slug of the repository.
	Slug pulumi.StringOutput `pulumi:"slug"`
	// The uuid of the repository resource.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// URL of website associated with this repository.
	Website pulumi.StringPtrOutput `pulumi:"website"`
}

// NewForkedRepository registers a new resource with the given unique name, arguments, and options.
func NewForkedRepository(ctx *pulumi.Context,
	name string, args *ForkedRepositoryArgs, opts ...pulumi.ResourceOption) (*ForkedRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ForkedRepository
	err := ctx.RegisterResource("bitbucket:index/forkedRepository:ForkedRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetForkedRepository gets an existing ForkedRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetForkedRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ForkedRepositoryState, opts ...pulumi.ResourceOption) (*ForkedRepository, error) {
	var resource ForkedRepository
	err := ctx.ReadResource("bitbucket:index/forkedRepository:ForkedRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ForkedRepository resources.
type forkedRepositoryState struct {
	// The HTTPS clone URL.
	CloneHttps *string `pulumi:"cloneHttps"`
	// The SSH clone URL.
	CloneSsh *string `pulumi:"cloneSsh"`
	// What the description of the repo is.
	Description *string `pulumi:"description"`
	// What the fork policy should be. Defaults to
	// `allowForks`. Valid values are `allowForks`, `noPublicForks`, `noForks`.
	ForkPolicy *string `pulumi:"forkPolicy"`
	// If this should have issues turned on or not.
	HasIssues *bool `pulumi:"hasIssues"`
	// If this should have wiki turned on or not.
	HasWiki *bool `pulumi:"hasWiki"`
	// If this should be private or not. Defaults to `true`. Note that if
	// the parent repo has `noPublicForks` as its fork policy, the resource may
	// fail to be created.
	IsPrivate *bool `pulumi:"isPrivate"`
	// What the language of this repository should be.
	Language *string `pulumi:"language"`
	// A set of links to a resource related to this object. See Link Below.
	Link *ForkedRepositoryLink `pulumi:"link"`
	// The name of the repository.
	Name *string `pulumi:"name"`
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner *string `pulumi:"owner"`
	// The repository to fork from. See Parent below.
	Parent map[string]string `pulumi:"parent"`
	// Turn on to enable pipelines support.
	PipelinesEnabled *bool `pulumi:"pipelinesEnabled"`
	// If you want to have this repo associated with a
	// project.
	ProjectKey *string `pulumi:"projectKey"`
	// The SCM of the resource. Either `hg` or `git`.
	Scm *string `pulumi:"scm"`
	// The slug of the repository.
	Slug *string `pulumi:"slug"`
	// The uuid of the repository resource.
	Uuid *string `pulumi:"uuid"`
	// URL of website associated with this repository.
	Website *string `pulumi:"website"`
}

type ForkedRepositoryState struct {
	// The HTTPS clone URL.
	CloneHttps pulumi.StringPtrInput
	// The SSH clone URL.
	CloneSsh pulumi.StringPtrInput
	// What the description of the repo is.
	Description pulumi.StringPtrInput
	// What the fork policy should be. Defaults to
	// `allowForks`. Valid values are `allowForks`, `noPublicForks`, `noForks`.
	ForkPolicy pulumi.StringPtrInput
	// If this should have issues turned on or not.
	HasIssues pulumi.BoolPtrInput
	// If this should have wiki turned on or not.
	HasWiki pulumi.BoolPtrInput
	// If this should be private or not. Defaults to `true`. Note that if
	// the parent repo has `noPublicForks` as its fork policy, the resource may
	// fail to be created.
	IsPrivate pulumi.BoolPtrInput
	// What the language of this repository should be.
	Language pulumi.StringPtrInput
	// A set of links to a resource related to this object. See Link Below.
	Link ForkedRepositoryLinkPtrInput
	// The name of the repository.
	Name pulumi.StringPtrInput
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner pulumi.StringPtrInput
	// The repository to fork from. See Parent below.
	Parent pulumi.StringMapInput
	// Turn on to enable pipelines support.
	PipelinesEnabled pulumi.BoolPtrInput
	// If you want to have this repo associated with a
	// project.
	ProjectKey pulumi.StringPtrInput
	// The SCM of the resource. Either `hg` or `git`.
	Scm pulumi.StringPtrInput
	// The slug of the repository.
	Slug pulumi.StringPtrInput
	// The uuid of the repository resource.
	Uuid pulumi.StringPtrInput
	// URL of website associated with this repository.
	Website pulumi.StringPtrInput
}

func (ForkedRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*forkedRepositoryState)(nil)).Elem()
}

type forkedRepositoryArgs struct {
	// What the description of the repo is.
	Description *string `pulumi:"description"`
	// What the fork policy should be. Defaults to
	// `allowForks`. Valid values are `allowForks`, `noPublicForks`, `noForks`.
	ForkPolicy *string `pulumi:"forkPolicy"`
	// If this should have issues turned on or not.
	HasIssues *bool `pulumi:"hasIssues"`
	// If this should have wiki turned on or not.
	HasWiki *bool `pulumi:"hasWiki"`
	// If this should be private or not. Defaults to `true`. Note that if
	// the parent repo has `noPublicForks` as its fork policy, the resource may
	// fail to be created.
	IsPrivate *bool `pulumi:"isPrivate"`
	// What the language of this repository should be.
	Language *string `pulumi:"language"`
	// A set of links to a resource related to this object. See Link Below.
	Link *ForkedRepositoryLink `pulumi:"link"`
	// The name of the repository.
	Name *string `pulumi:"name"`
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner string `pulumi:"owner"`
	// The repository to fork from. See Parent below.
	Parent map[string]string `pulumi:"parent"`
	// Turn on to enable pipelines support.
	PipelinesEnabled *bool `pulumi:"pipelinesEnabled"`
	// If you want to have this repo associated with a
	// project.
	ProjectKey *string `pulumi:"projectKey"`
	// The slug of the repository.
	Slug *string `pulumi:"slug"`
	// URL of website associated with this repository.
	Website *string `pulumi:"website"`
}

// The set of arguments for constructing a ForkedRepository resource.
type ForkedRepositoryArgs struct {
	// What the description of the repo is.
	Description pulumi.StringPtrInput
	// What the fork policy should be. Defaults to
	// `allowForks`. Valid values are `allowForks`, `noPublicForks`, `noForks`.
	ForkPolicy pulumi.StringPtrInput
	// If this should have issues turned on or not.
	HasIssues pulumi.BoolPtrInput
	// If this should have wiki turned on or not.
	HasWiki pulumi.BoolPtrInput
	// If this should be private or not. Defaults to `true`. Note that if
	// the parent repo has `noPublicForks` as its fork policy, the resource may
	// fail to be created.
	IsPrivate pulumi.BoolPtrInput
	// What the language of this repository should be.
	Language pulumi.StringPtrInput
	// A set of links to a resource related to this object. See Link Below.
	Link ForkedRepositoryLinkPtrInput
	// The name of the repository.
	Name pulumi.StringPtrInput
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner pulumi.StringInput
	// The repository to fork from. See Parent below.
	Parent pulumi.StringMapInput
	// Turn on to enable pipelines support.
	PipelinesEnabled pulumi.BoolPtrInput
	// If you want to have this repo associated with a
	// project.
	ProjectKey pulumi.StringPtrInput
	// The slug of the repository.
	Slug pulumi.StringPtrInput
	// URL of website associated with this repository.
	Website pulumi.StringPtrInput
}

func (ForkedRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*forkedRepositoryArgs)(nil)).Elem()
}

type ForkedRepositoryInput interface {
	pulumi.Input

	ToForkedRepositoryOutput() ForkedRepositoryOutput
	ToForkedRepositoryOutputWithContext(ctx context.Context) ForkedRepositoryOutput
}

func (*ForkedRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**ForkedRepository)(nil)).Elem()
}

func (i *ForkedRepository) ToForkedRepositoryOutput() ForkedRepositoryOutput {
	return i.ToForkedRepositoryOutputWithContext(context.Background())
}

func (i *ForkedRepository) ToForkedRepositoryOutputWithContext(ctx context.Context) ForkedRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForkedRepositoryOutput)
}

// ForkedRepositoryArrayInput is an input type that accepts ForkedRepositoryArray and ForkedRepositoryArrayOutput values.
// You can construct a concrete instance of `ForkedRepositoryArrayInput` via:
//
//	ForkedRepositoryArray{ ForkedRepositoryArgs{...} }
type ForkedRepositoryArrayInput interface {
	pulumi.Input

	ToForkedRepositoryArrayOutput() ForkedRepositoryArrayOutput
	ToForkedRepositoryArrayOutputWithContext(context.Context) ForkedRepositoryArrayOutput
}

type ForkedRepositoryArray []ForkedRepositoryInput

func (ForkedRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ForkedRepository)(nil)).Elem()
}

func (i ForkedRepositoryArray) ToForkedRepositoryArrayOutput() ForkedRepositoryArrayOutput {
	return i.ToForkedRepositoryArrayOutputWithContext(context.Background())
}

func (i ForkedRepositoryArray) ToForkedRepositoryArrayOutputWithContext(ctx context.Context) ForkedRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForkedRepositoryArrayOutput)
}

// ForkedRepositoryMapInput is an input type that accepts ForkedRepositoryMap and ForkedRepositoryMapOutput values.
// You can construct a concrete instance of `ForkedRepositoryMapInput` via:
//
//	ForkedRepositoryMap{ "key": ForkedRepositoryArgs{...} }
type ForkedRepositoryMapInput interface {
	pulumi.Input

	ToForkedRepositoryMapOutput() ForkedRepositoryMapOutput
	ToForkedRepositoryMapOutputWithContext(context.Context) ForkedRepositoryMapOutput
}

type ForkedRepositoryMap map[string]ForkedRepositoryInput

func (ForkedRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ForkedRepository)(nil)).Elem()
}

func (i ForkedRepositoryMap) ToForkedRepositoryMapOutput() ForkedRepositoryMapOutput {
	return i.ToForkedRepositoryMapOutputWithContext(context.Background())
}

func (i ForkedRepositoryMap) ToForkedRepositoryMapOutputWithContext(ctx context.Context) ForkedRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForkedRepositoryMapOutput)
}

type ForkedRepositoryOutput struct{ *pulumi.OutputState }

func (ForkedRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForkedRepository)(nil)).Elem()
}

func (o ForkedRepositoryOutput) ToForkedRepositoryOutput() ForkedRepositoryOutput {
	return o
}

func (o ForkedRepositoryOutput) ToForkedRepositoryOutputWithContext(ctx context.Context) ForkedRepositoryOutput {
	return o
}

// The HTTPS clone URL.
func (o ForkedRepositoryOutput) CloneHttps() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.CloneHttps }).(pulumi.StringOutput)
}

// The SSH clone URL.
func (o ForkedRepositoryOutput) CloneSsh() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.CloneSsh }).(pulumi.StringOutput)
}

// What the description of the repo is.
func (o ForkedRepositoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// What the fork policy should be. Defaults to
// `allowForks`. Valid values are `allowForks`, `noPublicForks`, `noForks`.
func (o ForkedRepositoryOutput) ForkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringPtrOutput { return v.ForkPolicy }).(pulumi.StringPtrOutput)
}

// If this should have issues turned on or not.
func (o ForkedRepositoryOutput) HasIssues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.BoolPtrOutput { return v.HasIssues }).(pulumi.BoolPtrOutput)
}

// If this should have wiki turned on or not.
func (o ForkedRepositoryOutput) HasWiki() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.BoolPtrOutput { return v.HasWiki }).(pulumi.BoolPtrOutput)
}

// If this should be private or not. Defaults to `true`. Note that if
// the parent repo has `noPublicForks` as its fork policy, the resource may
// fail to be created.
func (o ForkedRepositoryOutput) IsPrivate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.BoolPtrOutput { return v.IsPrivate }).(pulumi.BoolPtrOutput)
}

// What the language of this repository should be.
func (o ForkedRepositoryOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringPtrOutput { return v.Language }).(pulumi.StringPtrOutput)
}

// A set of links to a resource related to this object. See Link Below.
func (o ForkedRepositoryOutput) Link() ForkedRepositoryLinkOutput {
	return o.ApplyT(func(v *ForkedRepository) ForkedRepositoryLinkOutput { return v.Link }).(ForkedRepositoryLinkOutput)
}

// The name of the repository.
func (o ForkedRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The owner of this repository. Can be you or any team you
// have write access to.
func (o ForkedRepositoryOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The repository to fork from. See Parent below.
func (o ForkedRepositoryOutput) Parent() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringMapOutput { return v.Parent }).(pulumi.StringMapOutput)
}

// Turn on to enable pipelines support.
func (o ForkedRepositoryOutput) PipelinesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.BoolPtrOutput { return v.PipelinesEnabled }).(pulumi.BoolPtrOutput)
}

// If you want to have this repo associated with a
// project.
func (o ForkedRepositoryOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.ProjectKey }).(pulumi.StringOutput)
}

// The SCM of the resource. Either `hg` or `git`.
func (o ForkedRepositoryOutput) Scm() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.Scm }).(pulumi.StringOutput)
}

// The slug of the repository.
func (o ForkedRepositoryOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// The uuid of the repository resource.
func (o ForkedRepositoryOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// URL of website associated with this repository.
func (o ForkedRepositoryOutput) Website() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringPtrOutput { return v.Website }).(pulumi.StringPtrOutput)
}

type ForkedRepositoryArrayOutput struct{ *pulumi.OutputState }

func (ForkedRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ForkedRepository)(nil)).Elem()
}

func (o ForkedRepositoryArrayOutput) ToForkedRepositoryArrayOutput() ForkedRepositoryArrayOutput {
	return o
}

func (o ForkedRepositoryArrayOutput) ToForkedRepositoryArrayOutputWithContext(ctx context.Context) ForkedRepositoryArrayOutput {
	return o
}

func (o ForkedRepositoryArrayOutput) Index(i pulumi.IntInput) ForkedRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ForkedRepository {
		return vs[0].([]*ForkedRepository)[vs[1].(int)]
	}).(ForkedRepositoryOutput)
}

type ForkedRepositoryMapOutput struct{ *pulumi.OutputState }

func (ForkedRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ForkedRepository)(nil)).Elem()
}

func (o ForkedRepositoryMapOutput) ToForkedRepositoryMapOutput() ForkedRepositoryMapOutput {
	return o
}

func (o ForkedRepositoryMapOutput) ToForkedRepositoryMapOutputWithContext(ctx context.Context) ForkedRepositoryMapOutput {
	return o
}

func (o ForkedRepositoryMapOutput) MapIndex(k pulumi.StringInput) ForkedRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ForkedRepository {
		return vs[0].(map[string]*ForkedRepository)[vs[1].(string)]
	}).(ForkedRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ForkedRepositoryInput)(nil)).Elem(), &ForkedRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForkedRepositoryArrayInput)(nil)).Elem(), ForkedRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForkedRepositoryMapInput)(nil)).Elem(), ForkedRepositoryMap{})
	pulumi.RegisterOutputType(ForkedRepositoryOutput{})
	pulumi.RegisterOutputType(ForkedRepositoryArrayOutput{})
	pulumi.RegisterOutputType(ForkedRepositoryMapOutput{})
}
