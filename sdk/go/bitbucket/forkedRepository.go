// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

type ForkedRepository struct {
	pulumi.CustomResourceState

	CloneHttps       pulumi.StringOutput        `pulumi:"cloneHttps"`
	CloneSsh         pulumi.StringOutput        `pulumi:"cloneSsh"`
	Description      pulumi.StringPtrOutput     `pulumi:"description"`
	ForkPolicy       pulumi.StringPtrOutput     `pulumi:"forkPolicy"`
	HasIssues        pulumi.BoolPtrOutput       `pulumi:"hasIssues"`
	HasWiki          pulumi.BoolPtrOutput       `pulumi:"hasWiki"`
	IsPrivate        pulumi.BoolPtrOutput       `pulumi:"isPrivate"`
	Language         pulumi.StringPtrOutput     `pulumi:"language"`
	Link             ForkedRepositoryLinkOutput `pulumi:"link"`
	Name             pulumi.StringOutput        `pulumi:"name"`
	Owner            pulumi.StringOutput        `pulumi:"owner"`
	Parent           pulumi.StringMapOutput     `pulumi:"parent"`
	PipelinesEnabled pulumi.BoolPtrOutput       `pulumi:"pipelinesEnabled"`
	ProjectKey       pulumi.StringOutput        `pulumi:"projectKey"`
	Scm              pulumi.StringOutput        `pulumi:"scm"`
	Slug             pulumi.StringOutput        `pulumi:"slug"`
	Uuid             pulumi.StringOutput        `pulumi:"uuid"`
	Website          pulumi.StringPtrOutput     `pulumi:"website"`
}

// NewForkedRepository registers a new resource with the given unique name, arguments, and options.
func NewForkedRepository(ctx *pulumi.Context,
	name string, args *ForkedRepositoryArgs, opts ...pulumi.ResourceOption) (*ForkedRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.Parent == nil {
		return nil, errors.New("invalid value for required argument 'Parent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ForkedRepository
	err := ctx.RegisterResource("bitbucket:index/forkedRepository:ForkedRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetForkedRepository gets an existing ForkedRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetForkedRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ForkedRepositoryState, opts ...pulumi.ResourceOption) (*ForkedRepository, error) {
	var resource ForkedRepository
	err := ctx.ReadResource("bitbucket:index/forkedRepository:ForkedRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ForkedRepository resources.
type forkedRepositoryState struct {
	CloneHttps       *string               `pulumi:"cloneHttps"`
	CloneSsh         *string               `pulumi:"cloneSsh"`
	Description      *string               `pulumi:"description"`
	ForkPolicy       *string               `pulumi:"forkPolicy"`
	HasIssues        *bool                 `pulumi:"hasIssues"`
	HasWiki          *bool                 `pulumi:"hasWiki"`
	IsPrivate        *bool                 `pulumi:"isPrivate"`
	Language         *string               `pulumi:"language"`
	Link             *ForkedRepositoryLink `pulumi:"link"`
	Name             *string               `pulumi:"name"`
	Owner            *string               `pulumi:"owner"`
	Parent           map[string]string     `pulumi:"parent"`
	PipelinesEnabled *bool                 `pulumi:"pipelinesEnabled"`
	ProjectKey       *string               `pulumi:"projectKey"`
	Scm              *string               `pulumi:"scm"`
	Slug             *string               `pulumi:"slug"`
	Uuid             *string               `pulumi:"uuid"`
	Website          *string               `pulumi:"website"`
}

type ForkedRepositoryState struct {
	CloneHttps       pulumi.StringPtrInput
	CloneSsh         pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	ForkPolicy       pulumi.StringPtrInput
	HasIssues        pulumi.BoolPtrInput
	HasWiki          pulumi.BoolPtrInput
	IsPrivate        pulumi.BoolPtrInput
	Language         pulumi.StringPtrInput
	Link             ForkedRepositoryLinkPtrInput
	Name             pulumi.StringPtrInput
	Owner            pulumi.StringPtrInput
	Parent           pulumi.StringMapInput
	PipelinesEnabled pulumi.BoolPtrInput
	ProjectKey       pulumi.StringPtrInput
	Scm              pulumi.StringPtrInput
	Slug             pulumi.StringPtrInput
	Uuid             pulumi.StringPtrInput
	Website          pulumi.StringPtrInput
}

func (ForkedRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*forkedRepositoryState)(nil)).Elem()
}

type forkedRepositoryArgs struct {
	Description      *string               `pulumi:"description"`
	ForkPolicy       *string               `pulumi:"forkPolicy"`
	HasIssues        *bool                 `pulumi:"hasIssues"`
	HasWiki          *bool                 `pulumi:"hasWiki"`
	IsPrivate        *bool                 `pulumi:"isPrivate"`
	Language         *string               `pulumi:"language"`
	Link             *ForkedRepositoryLink `pulumi:"link"`
	Name             *string               `pulumi:"name"`
	Owner            string                `pulumi:"owner"`
	Parent           map[string]string     `pulumi:"parent"`
	PipelinesEnabled *bool                 `pulumi:"pipelinesEnabled"`
	ProjectKey       *string               `pulumi:"projectKey"`
	Slug             *string               `pulumi:"slug"`
	Website          *string               `pulumi:"website"`
}

// The set of arguments for constructing a ForkedRepository resource.
type ForkedRepositoryArgs struct {
	Description      pulumi.StringPtrInput
	ForkPolicy       pulumi.StringPtrInput
	HasIssues        pulumi.BoolPtrInput
	HasWiki          pulumi.BoolPtrInput
	IsPrivate        pulumi.BoolPtrInput
	Language         pulumi.StringPtrInput
	Link             ForkedRepositoryLinkPtrInput
	Name             pulumi.StringPtrInput
	Owner            pulumi.StringInput
	Parent           pulumi.StringMapInput
	PipelinesEnabled pulumi.BoolPtrInput
	ProjectKey       pulumi.StringPtrInput
	Slug             pulumi.StringPtrInput
	Website          pulumi.StringPtrInput
}

func (ForkedRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*forkedRepositoryArgs)(nil)).Elem()
}

type ForkedRepositoryInput interface {
	pulumi.Input

	ToForkedRepositoryOutput() ForkedRepositoryOutput
	ToForkedRepositoryOutputWithContext(ctx context.Context) ForkedRepositoryOutput
}

func (*ForkedRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**ForkedRepository)(nil)).Elem()
}

func (i *ForkedRepository) ToForkedRepositoryOutput() ForkedRepositoryOutput {
	return i.ToForkedRepositoryOutputWithContext(context.Background())
}

func (i *ForkedRepository) ToForkedRepositoryOutputWithContext(ctx context.Context) ForkedRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForkedRepositoryOutput)
}

func (i *ForkedRepository) ToOutput(ctx context.Context) pulumix.Output[*ForkedRepository] {
	return pulumix.Output[*ForkedRepository]{
		OutputState: i.ToForkedRepositoryOutputWithContext(ctx).OutputState,
	}
}

// ForkedRepositoryArrayInput is an input type that accepts ForkedRepositoryArray and ForkedRepositoryArrayOutput values.
// You can construct a concrete instance of `ForkedRepositoryArrayInput` via:
//
//	ForkedRepositoryArray{ ForkedRepositoryArgs{...} }
type ForkedRepositoryArrayInput interface {
	pulumi.Input

	ToForkedRepositoryArrayOutput() ForkedRepositoryArrayOutput
	ToForkedRepositoryArrayOutputWithContext(context.Context) ForkedRepositoryArrayOutput
}

type ForkedRepositoryArray []ForkedRepositoryInput

func (ForkedRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ForkedRepository)(nil)).Elem()
}

func (i ForkedRepositoryArray) ToForkedRepositoryArrayOutput() ForkedRepositoryArrayOutput {
	return i.ToForkedRepositoryArrayOutputWithContext(context.Background())
}

func (i ForkedRepositoryArray) ToForkedRepositoryArrayOutputWithContext(ctx context.Context) ForkedRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForkedRepositoryArrayOutput)
}

func (i ForkedRepositoryArray) ToOutput(ctx context.Context) pulumix.Output[[]*ForkedRepository] {
	return pulumix.Output[[]*ForkedRepository]{
		OutputState: i.ToForkedRepositoryArrayOutputWithContext(ctx).OutputState,
	}
}

// ForkedRepositoryMapInput is an input type that accepts ForkedRepositoryMap and ForkedRepositoryMapOutput values.
// You can construct a concrete instance of `ForkedRepositoryMapInput` via:
//
//	ForkedRepositoryMap{ "key": ForkedRepositoryArgs{...} }
type ForkedRepositoryMapInput interface {
	pulumi.Input

	ToForkedRepositoryMapOutput() ForkedRepositoryMapOutput
	ToForkedRepositoryMapOutputWithContext(context.Context) ForkedRepositoryMapOutput
}

type ForkedRepositoryMap map[string]ForkedRepositoryInput

func (ForkedRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ForkedRepository)(nil)).Elem()
}

func (i ForkedRepositoryMap) ToForkedRepositoryMapOutput() ForkedRepositoryMapOutput {
	return i.ToForkedRepositoryMapOutputWithContext(context.Background())
}

func (i ForkedRepositoryMap) ToForkedRepositoryMapOutputWithContext(ctx context.Context) ForkedRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForkedRepositoryMapOutput)
}

func (i ForkedRepositoryMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ForkedRepository] {
	return pulumix.Output[map[string]*ForkedRepository]{
		OutputState: i.ToForkedRepositoryMapOutputWithContext(ctx).OutputState,
	}
}

type ForkedRepositoryOutput struct{ *pulumi.OutputState }

func (ForkedRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForkedRepository)(nil)).Elem()
}

func (o ForkedRepositoryOutput) ToForkedRepositoryOutput() ForkedRepositoryOutput {
	return o
}

func (o ForkedRepositoryOutput) ToForkedRepositoryOutputWithContext(ctx context.Context) ForkedRepositoryOutput {
	return o
}

func (o ForkedRepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[*ForkedRepository] {
	return pulumix.Output[*ForkedRepository]{
		OutputState: o.OutputState,
	}
}

func (o ForkedRepositoryOutput) CloneHttps() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.CloneHttps }).(pulumi.StringOutput)
}

func (o ForkedRepositoryOutput) CloneSsh() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.CloneSsh }).(pulumi.StringOutput)
}

func (o ForkedRepositoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ForkedRepositoryOutput) ForkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringPtrOutput { return v.ForkPolicy }).(pulumi.StringPtrOutput)
}

func (o ForkedRepositoryOutput) HasIssues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.BoolPtrOutput { return v.HasIssues }).(pulumi.BoolPtrOutput)
}

func (o ForkedRepositoryOutput) HasWiki() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.BoolPtrOutput { return v.HasWiki }).(pulumi.BoolPtrOutput)
}

func (o ForkedRepositoryOutput) IsPrivate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.BoolPtrOutput { return v.IsPrivate }).(pulumi.BoolPtrOutput)
}

func (o ForkedRepositoryOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringPtrOutput { return v.Language }).(pulumi.StringPtrOutput)
}

func (o ForkedRepositoryOutput) Link() ForkedRepositoryLinkOutput {
	return o.ApplyT(func(v *ForkedRepository) ForkedRepositoryLinkOutput { return v.Link }).(ForkedRepositoryLinkOutput)
}

func (o ForkedRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ForkedRepositoryOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o ForkedRepositoryOutput) Parent() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringMapOutput { return v.Parent }).(pulumi.StringMapOutput)
}

func (o ForkedRepositoryOutput) PipelinesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.BoolPtrOutput { return v.PipelinesEnabled }).(pulumi.BoolPtrOutput)
}

func (o ForkedRepositoryOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.ProjectKey }).(pulumi.StringOutput)
}

func (o ForkedRepositoryOutput) Scm() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.Scm }).(pulumi.StringOutput)
}

func (o ForkedRepositoryOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o ForkedRepositoryOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

func (o ForkedRepositoryOutput) Website() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForkedRepository) pulumi.StringPtrOutput { return v.Website }).(pulumi.StringPtrOutput)
}

type ForkedRepositoryArrayOutput struct{ *pulumi.OutputState }

func (ForkedRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ForkedRepository)(nil)).Elem()
}

func (o ForkedRepositoryArrayOutput) ToForkedRepositoryArrayOutput() ForkedRepositoryArrayOutput {
	return o
}

func (o ForkedRepositoryArrayOutput) ToForkedRepositoryArrayOutputWithContext(ctx context.Context) ForkedRepositoryArrayOutput {
	return o
}

func (o ForkedRepositoryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ForkedRepository] {
	return pulumix.Output[[]*ForkedRepository]{
		OutputState: o.OutputState,
	}
}

func (o ForkedRepositoryArrayOutput) Index(i pulumi.IntInput) ForkedRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ForkedRepository {
		return vs[0].([]*ForkedRepository)[vs[1].(int)]
	}).(ForkedRepositoryOutput)
}

type ForkedRepositoryMapOutput struct{ *pulumi.OutputState }

func (ForkedRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ForkedRepository)(nil)).Elem()
}

func (o ForkedRepositoryMapOutput) ToForkedRepositoryMapOutput() ForkedRepositoryMapOutput {
	return o
}

func (o ForkedRepositoryMapOutput) ToForkedRepositoryMapOutputWithContext(ctx context.Context) ForkedRepositoryMapOutput {
	return o
}

func (o ForkedRepositoryMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ForkedRepository] {
	return pulumix.Output[map[string]*ForkedRepository]{
		OutputState: o.OutputState,
	}
}

func (o ForkedRepositoryMapOutput) MapIndex(k pulumi.StringInput) ForkedRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ForkedRepository {
		return vs[0].(map[string]*ForkedRepository)[vs[1].(string)]
	}).(ForkedRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ForkedRepositoryInput)(nil)).Elem(), &ForkedRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForkedRepositoryArrayInput)(nil)).Elem(), ForkedRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForkedRepositoryMapInput)(nil)).Elem(), ForkedRepositoryMap{})
	pulumi.RegisterOutputType(ForkedRepositoryOutput{})
	pulumi.RegisterOutputType(ForkedRepositoryArrayOutput{})
	pulumi.RegisterOutputType(ForkedRepositoryMapOutput{})
}
