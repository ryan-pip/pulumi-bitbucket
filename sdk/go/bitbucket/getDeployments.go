// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

// Provides a way to fetch data on Deployments.
//
// OAuth2 Scopes: `none`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bitbucket.GetDeployments(ctx, &bitbucket.GetDeploymentsArgs{
//				Repository: "example",
//				Workspace:  "example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDeployments(ctx *pulumi.Context, args *GetDeploymentsArgs, opts ...pulumi.InvokeOption) (*GetDeploymentsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDeploymentsResult
	err := ctx.Invoke("bitbucket:index/getDeployments:getDeployments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDeployments.
type GetDeploymentsArgs struct {
	// The repository name.
	Repository string `pulumi:"repository"`
	// The workspace name.
	Workspace string `pulumi:"workspace"`
}

// A collection of values returned by getDeployments.
type GetDeploymentsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Names of deployments for a repository.
	Names      []string `pulumi:"names"`
	Repository string   `pulumi:"repository"`
	// UUIDs of deployments for a repository.
	Uuids     []string `pulumi:"uuids"`
	Workspace string   `pulumi:"workspace"`
}

func GetDeploymentsOutput(ctx *pulumi.Context, args GetDeploymentsOutputArgs, opts ...pulumi.InvokeOption) GetDeploymentsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDeploymentsResult, error) {
			args := v.(GetDeploymentsArgs)
			r, err := GetDeployments(ctx, &args, opts...)
			var s GetDeploymentsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDeploymentsResultOutput)
}

// A collection of arguments for invoking getDeployments.
type GetDeploymentsOutputArgs struct {
	// The repository name.
	Repository pulumi.StringInput `pulumi:"repository"`
	// The workspace name.
	Workspace pulumi.StringInput `pulumi:"workspace"`
}

func (GetDeploymentsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeploymentsArgs)(nil)).Elem()
}

// A collection of values returned by getDeployments.
type GetDeploymentsResultOutput struct{ *pulumi.OutputState }

func (GetDeploymentsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeploymentsResult)(nil)).Elem()
}

func (o GetDeploymentsResultOutput) ToGetDeploymentsResultOutput() GetDeploymentsResultOutput {
	return o
}

func (o GetDeploymentsResultOutput) ToGetDeploymentsResultOutputWithContext(ctx context.Context) GetDeploymentsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetDeploymentsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeploymentsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Names of deployments for a repository.
func (o GetDeploymentsResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDeploymentsResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o GetDeploymentsResultOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeploymentsResult) string { return v.Repository }).(pulumi.StringOutput)
}

// UUIDs of deployments for a repository.
func (o GetDeploymentsResultOutput) Uuids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDeploymentsResult) []string { return v.Uuids }).(pulumi.StringArrayOutput)
}

func (o GetDeploymentsResultOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeploymentsResult) string { return v.Workspace }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDeploymentsResultOutput{})
}
