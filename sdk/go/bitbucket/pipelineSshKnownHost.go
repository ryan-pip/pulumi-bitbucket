// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

type PipelineSshKnownHost struct {
	pulumi.CustomResourceState

	Hostname   pulumi.StringPtrOutput              `pulumi:"hostname"`
	PublicKey  PipelineSshKnownHostPublicKeyOutput `pulumi:"publicKey"`
	Repository pulumi.StringOutput                 `pulumi:"repository"`
	Uuid       pulumi.StringOutput                 `pulumi:"uuid"`
	Workspace  pulumi.StringOutput                 `pulumi:"workspace"`
}

// NewPipelineSshKnownHost registers a new resource with the given unique name, arguments, and options.
func NewPipelineSshKnownHost(ctx *pulumi.Context,
	name string, args *PipelineSshKnownHostArgs, opts ...pulumi.ResourceOption) (*PipelineSshKnownHost, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PipelineSshKnownHost
	err := ctx.RegisterResource("bitbucket:index/pipelineSshKnownHost:PipelineSshKnownHost", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipelineSshKnownHost gets an existing PipelineSshKnownHost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipelineSshKnownHost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineSshKnownHostState, opts ...pulumi.ResourceOption) (*PipelineSshKnownHost, error) {
	var resource PipelineSshKnownHost
	err := ctx.ReadResource("bitbucket:index/pipelineSshKnownHost:PipelineSshKnownHost", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PipelineSshKnownHost resources.
type pipelineSshKnownHostState struct {
	Hostname   *string                        `pulumi:"hostname"`
	PublicKey  *PipelineSshKnownHostPublicKey `pulumi:"publicKey"`
	Repository *string                        `pulumi:"repository"`
	Uuid       *string                        `pulumi:"uuid"`
	Workspace  *string                        `pulumi:"workspace"`
}

type PipelineSshKnownHostState struct {
	Hostname   pulumi.StringPtrInput
	PublicKey  PipelineSshKnownHostPublicKeyPtrInput
	Repository pulumi.StringPtrInput
	Uuid       pulumi.StringPtrInput
	Workspace  pulumi.StringPtrInput
}

func (PipelineSshKnownHostState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineSshKnownHostState)(nil)).Elem()
}

type pipelineSshKnownHostArgs struct {
	Hostname   *string                       `pulumi:"hostname"`
	PublicKey  PipelineSshKnownHostPublicKey `pulumi:"publicKey"`
	Repository string                        `pulumi:"repository"`
	Workspace  string                        `pulumi:"workspace"`
}

// The set of arguments for constructing a PipelineSshKnownHost resource.
type PipelineSshKnownHostArgs struct {
	Hostname   pulumi.StringPtrInput
	PublicKey  PipelineSshKnownHostPublicKeyInput
	Repository pulumi.StringInput
	Workspace  pulumi.StringInput
}

func (PipelineSshKnownHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineSshKnownHostArgs)(nil)).Elem()
}

type PipelineSshKnownHostInput interface {
	pulumi.Input

	ToPipelineSshKnownHostOutput() PipelineSshKnownHostOutput
	ToPipelineSshKnownHostOutputWithContext(ctx context.Context) PipelineSshKnownHostOutput
}

func (*PipelineSshKnownHost) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSshKnownHost)(nil)).Elem()
}

func (i *PipelineSshKnownHost) ToPipelineSshKnownHostOutput() PipelineSshKnownHostOutput {
	return i.ToPipelineSshKnownHostOutputWithContext(context.Background())
}

func (i *PipelineSshKnownHost) ToPipelineSshKnownHostOutputWithContext(ctx context.Context) PipelineSshKnownHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSshKnownHostOutput)
}

func (i *PipelineSshKnownHost) ToOutput(ctx context.Context) pulumix.Output[*PipelineSshKnownHost] {
	return pulumix.Output[*PipelineSshKnownHost]{
		OutputState: i.ToPipelineSshKnownHostOutputWithContext(ctx).OutputState,
	}
}

// PipelineSshKnownHostArrayInput is an input type that accepts PipelineSshKnownHostArray and PipelineSshKnownHostArrayOutput values.
// You can construct a concrete instance of `PipelineSshKnownHostArrayInput` via:
//
//	PipelineSshKnownHostArray{ PipelineSshKnownHostArgs{...} }
type PipelineSshKnownHostArrayInput interface {
	pulumi.Input

	ToPipelineSshKnownHostArrayOutput() PipelineSshKnownHostArrayOutput
	ToPipelineSshKnownHostArrayOutputWithContext(context.Context) PipelineSshKnownHostArrayOutput
}

type PipelineSshKnownHostArray []PipelineSshKnownHostInput

func (PipelineSshKnownHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PipelineSshKnownHost)(nil)).Elem()
}

func (i PipelineSshKnownHostArray) ToPipelineSshKnownHostArrayOutput() PipelineSshKnownHostArrayOutput {
	return i.ToPipelineSshKnownHostArrayOutputWithContext(context.Background())
}

func (i PipelineSshKnownHostArray) ToPipelineSshKnownHostArrayOutputWithContext(ctx context.Context) PipelineSshKnownHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSshKnownHostArrayOutput)
}

func (i PipelineSshKnownHostArray) ToOutput(ctx context.Context) pulumix.Output[[]*PipelineSshKnownHost] {
	return pulumix.Output[[]*PipelineSshKnownHost]{
		OutputState: i.ToPipelineSshKnownHostArrayOutputWithContext(ctx).OutputState,
	}
}

// PipelineSshKnownHostMapInput is an input type that accepts PipelineSshKnownHostMap and PipelineSshKnownHostMapOutput values.
// You can construct a concrete instance of `PipelineSshKnownHostMapInput` via:
//
//	PipelineSshKnownHostMap{ "key": PipelineSshKnownHostArgs{...} }
type PipelineSshKnownHostMapInput interface {
	pulumi.Input

	ToPipelineSshKnownHostMapOutput() PipelineSshKnownHostMapOutput
	ToPipelineSshKnownHostMapOutputWithContext(context.Context) PipelineSshKnownHostMapOutput
}

type PipelineSshKnownHostMap map[string]PipelineSshKnownHostInput

func (PipelineSshKnownHostMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PipelineSshKnownHost)(nil)).Elem()
}

func (i PipelineSshKnownHostMap) ToPipelineSshKnownHostMapOutput() PipelineSshKnownHostMapOutput {
	return i.ToPipelineSshKnownHostMapOutputWithContext(context.Background())
}

func (i PipelineSshKnownHostMap) ToPipelineSshKnownHostMapOutputWithContext(ctx context.Context) PipelineSshKnownHostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSshKnownHostMapOutput)
}

func (i PipelineSshKnownHostMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PipelineSshKnownHost] {
	return pulumix.Output[map[string]*PipelineSshKnownHost]{
		OutputState: i.ToPipelineSshKnownHostMapOutputWithContext(ctx).OutputState,
	}
}

type PipelineSshKnownHostOutput struct{ *pulumi.OutputState }

func (PipelineSshKnownHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSshKnownHost)(nil)).Elem()
}

func (o PipelineSshKnownHostOutput) ToPipelineSshKnownHostOutput() PipelineSshKnownHostOutput {
	return o
}

func (o PipelineSshKnownHostOutput) ToPipelineSshKnownHostOutputWithContext(ctx context.Context) PipelineSshKnownHostOutput {
	return o
}

func (o PipelineSshKnownHostOutput) ToOutput(ctx context.Context) pulumix.Output[*PipelineSshKnownHost] {
	return pulumix.Output[*PipelineSshKnownHost]{
		OutputState: o.OutputState,
	}
}

func (o PipelineSshKnownHostOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineSshKnownHost) pulumi.StringPtrOutput { return v.Hostname }).(pulumi.StringPtrOutput)
}

func (o PipelineSshKnownHostOutput) PublicKey() PipelineSshKnownHostPublicKeyOutput {
	return o.ApplyT(func(v *PipelineSshKnownHost) PipelineSshKnownHostPublicKeyOutput { return v.PublicKey }).(PipelineSshKnownHostPublicKeyOutput)
}

func (o PipelineSshKnownHostOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineSshKnownHost) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o PipelineSshKnownHostOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineSshKnownHost) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

func (o PipelineSshKnownHostOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineSshKnownHost) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type PipelineSshKnownHostArrayOutput struct{ *pulumi.OutputState }

func (PipelineSshKnownHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PipelineSshKnownHost)(nil)).Elem()
}

func (o PipelineSshKnownHostArrayOutput) ToPipelineSshKnownHostArrayOutput() PipelineSshKnownHostArrayOutput {
	return o
}

func (o PipelineSshKnownHostArrayOutput) ToPipelineSshKnownHostArrayOutputWithContext(ctx context.Context) PipelineSshKnownHostArrayOutput {
	return o
}

func (o PipelineSshKnownHostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PipelineSshKnownHost] {
	return pulumix.Output[[]*PipelineSshKnownHost]{
		OutputState: o.OutputState,
	}
}

func (o PipelineSshKnownHostArrayOutput) Index(i pulumi.IntInput) PipelineSshKnownHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PipelineSshKnownHost {
		return vs[0].([]*PipelineSshKnownHost)[vs[1].(int)]
	}).(PipelineSshKnownHostOutput)
}

type PipelineSshKnownHostMapOutput struct{ *pulumi.OutputState }

func (PipelineSshKnownHostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PipelineSshKnownHost)(nil)).Elem()
}

func (o PipelineSshKnownHostMapOutput) ToPipelineSshKnownHostMapOutput() PipelineSshKnownHostMapOutput {
	return o
}

func (o PipelineSshKnownHostMapOutput) ToPipelineSshKnownHostMapOutputWithContext(ctx context.Context) PipelineSshKnownHostMapOutput {
	return o
}

func (o PipelineSshKnownHostMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PipelineSshKnownHost] {
	return pulumix.Output[map[string]*PipelineSshKnownHost]{
		OutputState: o.OutputState,
	}
}

func (o PipelineSshKnownHostMapOutput) MapIndex(k pulumi.StringInput) PipelineSshKnownHostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PipelineSshKnownHost {
		return vs[0].(map[string]*PipelineSshKnownHost)[vs[1].(string)]
	}).(PipelineSshKnownHostOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSshKnownHostInput)(nil)).Elem(), &PipelineSshKnownHost{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSshKnownHostArrayInput)(nil)).Elem(), PipelineSshKnownHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSshKnownHostMapInput)(nil)).Elem(), PipelineSshKnownHostMap{})
	pulumi.RegisterOutputType(PipelineSshKnownHostOutput{})
	pulumi.RegisterOutputType(PipelineSshKnownHostArrayOutput{})
	pulumi.RegisterOutputType(PipelineSshKnownHostMapOutput{})
}
