// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

// Provides support for setting up default reviewers for your project. You must however have the UUID of the user available. Since Bitbucket has removed usernames from its APIs the best case is to use the UUID via the data provider.
//
// OAuth2 Scopes: `project:admin`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			reviewer, err := bitbucket.GetUser(ctx, &bitbucket.GetUserArgs{
//				Uuid: pulumi.StringRef("{account UUID}"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = bitbucket.NewProjectDefaultReviewers(ctx, "infrastructure", &bitbucket.ProjectDefaultReviewersArgs{
//				Workspace: pulumi.String("myteam"),
//				Project:   pulumi.String("TERRAFORM"),
//				Reviewers: pulumi.StringArray{
//					*pulumi.String(reviewer.Uuid),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Project Default Reviewers can be imported using the workspace and project separated by a (`/`) and the end, e.g.,
//
// ```sh
//
//	$ pulumi import bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers example myteam/terraform-code
//
// ```
type ProjectDefaultReviewers struct {
	pulumi.CustomResourceState

	// The key of the project.
	Project pulumi.StringOutput `pulumi:"project"`
	// A list of reviewers to use.
	Reviewers pulumi.StringArrayOutput `pulumi:"reviewers"`
	// The workspace of this project. Can be you or any team you
	// have write access to.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewProjectDefaultReviewers registers a new resource with the given unique name, arguments, and options.
func NewProjectDefaultReviewers(ctx *pulumi.Context,
	name string, args *ProjectDefaultReviewersArgs, opts ...pulumi.ResourceOption) (*ProjectDefaultReviewers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Reviewers == nil {
		return nil, errors.New("invalid value for required argument 'Reviewers'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectDefaultReviewers
	err := ctx.RegisterResource("bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectDefaultReviewers gets an existing ProjectDefaultReviewers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectDefaultReviewers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectDefaultReviewersState, opts ...pulumi.ResourceOption) (*ProjectDefaultReviewers, error) {
	var resource ProjectDefaultReviewers
	err := ctx.ReadResource("bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectDefaultReviewers resources.
type projectDefaultReviewersState struct {
	// The key of the project.
	Project *string `pulumi:"project"`
	// A list of reviewers to use.
	Reviewers []string `pulumi:"reviewers"`
	// The workspace of this project. Can be you or any team you
	// have write access to.
	Workspace *string `pulumi:"workspace"`
}

type ProjectDefaultReviewersState struct {
	// The key of the project.
	Project pulumi.StringPtrInput
	// A list of reviewers to use.
	Reviewers pulumi.StringArrayInput
	// The workspace of this project. Can be you or any team you
	// have write access to.
	Workspace pulumi.StringPtrInput
}

func (ProjectDefaultReviewersState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectDefaultReviewersState)(nil)).Elem()
}

type projectDefaultReviewersArgs struct {
	// The key of the project.
	Project string `pulumi:"project"`
	// A list of reviewers to use.
	Reviewers []string `pulumi:"reviewers"`
	// The workspace of this project. Can be you or any team you
	// have write access to.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a ProjectDefaultReviewers resource.
type ProjectDefaultReviewersArgs struct {
	// The key of the project.
	Project pulumi.StringInput
	// A list of reviewers to use.
	Reviewers pulumi.StringArrayInput
	// The workspace of this project. Can be you or any team you
	// have write access to.
	Workspace pulumi.StringInput
}

func (ProjectDefaultReviewersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectDefaultReviewersArgs)(nil)).Elem()
}

type ProjectDefaultReviewersInput interface {
	pulumi.Input

	ToProjectDefaultReviewersOutput() ProjectDefaultReviewersOutput
	ToProjectDefaultReviewersOutputWithContext(ctx context.Context) ProjectDefaultReviewersOutput
}

func (*ProjectDefaultReviewers) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDefaultReviewers)(nil)).Elem()
}

func (i *ProjectDefaultReviewers) ToProjectDefaultReviewersOutput() ProjectDefaultReviewersOutput {
	return i.ToProjectDefaultReviewersOutputWithContext(context.Background())
}

func (i *ProjectDefaultReviewers) ToProjectDefaultReviewersOutputWithContext(ctx context.Context) ProjectDefaultReviewersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultReviewersOutput)
}

// ProjectDefaultReviewersArrayInput is an input type that accepts ProjectDefaultReviewersArray and ProjectDefaultReviewersArrayOutput values.
// You can construct a concrete instance of `ProjectDefaultReviewersArrayInput` via:
//
//	ProjectDefaultReviewersArray{ ProjectDefaultReviewersArgs{...} }
type ProjectDefaultReviewersArrayInput interface {
	pulumi.Input

	ToProjectDefaultReviewersArrayOutput() ProjectDefaultReviewersArrayOutput
	ToProjectDefaultReviewersArrayOutputWithContext(context.Context) ProjectDefaultReviewersArrayOutput
}

type ProjectDefaultReviewersArray []ProjectDefaultReviewersInput

func (ProjectDefaultReviewersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectDefaultReviewers)(nil)).Elem()
}

func (i ProjectDefaultReviewersArray) ToProjectDefaultReviewersArrayOutput() ProjectDefaultReviewersArrayOutput {
	return i.ToProjectDefaultReviewersArrayOutputWithContext(context.Background())
}

func (i ProjectDefaultReviewersArray) ToProjectDefaultReviewersArrayOutputWithContext(ctx context.Context) ProjectDefaultReviewersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultReviewersArrayOutput)
}

// ProjectDefaultReviewersMapInput is an input type that accepts ProjectDefaultReviewersMap and ProjectDefaultReviewersMapOutput values.
// You can construct a concrete instance of `ProjectDefaultReviewersMapInput` via:
//
//	ProjectDefaultReviewersMap{ "key": ProjectDefaultReviewersArgs{...} }
type ProjectDefaultReviewersMapInput interface {
	pulumi.Input

	ToProjectDefaultReviewersMapOutput() ProjectDefaultReviewersMapOutput
	ToProjectDefaultReviewersMapOutputWithContext(context.Context) ProjectDefaultReviewersMapOutput
}

type ProjectDefaultReviewersMap map[string]ProjectDefaultReviewersInput

func (ProjectDefaultReviewersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectDefaultReviewers)(nil)).Elem()
}

func (i ProjectDefaultReviewersMap) ToProjectDefaultReviewersMapOutput() ProjectDefaultReviewersMapOutput {
	return i.ToProjectDefaultReviewersMapOutputWithContext(context.Background())
}

func (i ProjectDefaultReviewersMap) ToProjectDefaultReviewersMapOutputWithContext(ctx context.Context) ProjectDefaultReviewersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectDefaultReviewersMapOutput)
}

type ProjectDefaultReviewersOutput struct{ *pulumi.OutputState }

func (ProjectDefaultReviewersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectDefaultReviewers)(nil)).Elem()
}

func (o ProjectDefaultReviewersOutput) ToProjectDefaultReviewersOutput() ProjectDefaultReviewersOutput {
	return o
}

func (o ProjectDefaultReviewersOutput) ToProjectDefaultReviewersOutputWithContext(ctx context.Context) ProjectDefaultReviewersOutput {
	return o
}

// The key of the project.
func (o ProjectDefaultReviewersOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectDefaultReviewers) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A list of reviewers to use.
func (o ProjectDefaultReviewersOutput) Reviewers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectDefaultReviewers) pulumi.StringArrayOutput { return v.Reviewers }).(pulumi.StringArrayOutput)
}

// The workspace of this project. Can be you or any team you
// have write access to.
func (o ProjectDefaultReviewersOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectDefaultReviewers) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type ProjectDefaultReviewersArrayOutput struct{ *pulumi.OutputState }

func (ProjectDefaultReviewersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectDefaultReviewers)(nil)).Elem()
}

func (o ProjectDefaultReviewersArrayOutput) ToProjectDefaultReviewersArrayOutput() ProjectDefaultReviewersArrayOutput {
	return o
}

func (o ProjectDefaultReviewersArrayOutput) ToProjectDefaultReviewersArrayOutputWithContext(ctx context.Context) ProjectDefaultReviewersArrayOutput {
	return o
}

func (o ProjectDefaultReviewersArrayOutput) Index(i pulumi.IntInput) ProjectDefaultReviewersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectDefaultReviewers {
		return vs[0].([]*ProjectDefaultReviewers)[vs[1].(int)]
	}).(ProjectDefaultReviewersOutput)
}

type ProjectDefaultReviewersMapOutput struct{ *pulumi.OutputState }

func (ProjectDefaultReviewersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectDefaultReviewers)(nil)).Elem()
}

func (o ProjectDefaultReviewersMapOutput) ToProjectDefaultReviewersMapOutput() ProjectDefaultReviewersMapOutput {
	return o
}

func (o ProjectDefaultReviewersMapOutput) ToProjectDefaultReviewersMapOutputWithContext(ctx context.Context) ProjectDefaultReviewersMapOutput {
	return o
}

func (o ProjectDefaultReviewersMapOutput) MapIndex(k pulumi.StringInput) ProjectDefaultReviewersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectDefaultReviewers {
		return vs[0].(map[string]*ProjectDefaultReviewers)[vs[1].(string)]
	}).(ProjectDefaultReviewersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultReviewersInput)(nil)).Elem(), &ProjectDefaultReviewers{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultReviewersArrayInput)(nil)).Elem(), ProjectDefaultReviewersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectDefaultReviewersMapInput)(nil)).Elem(), ProjectDefaultReviewersMap{})
	pulumi.RegisterOutputType(ProjectDefaultReviewersOutput{})
	pulumi.RegisterOutputType(ProjectDefaultReviewersArrayOutput{})
	pulumi.RegisterOutputType(ProjectDefaultReviewersMapOutput{})
}
