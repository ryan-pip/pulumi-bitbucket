// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

// Provides a Bitbucket Repository Group Permission Resource.
//
// This allows you set explicit group permission for a project.
//
// OAuth2 Scopes: `project:admin`
//
// Note: can only be used when authenticating with Bitbucket Cloud using an _app password_. Authenticating via an OAuth flow gives a 403 error due to a [restriction in the Bitbucket Cloud API](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/#api-repositories-workspace-project-key-permissions-config-groups-group-slug-put).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bitbucket.NewProjectGroupPermission(ctx, "example", &bitbucket.ProjectGroupPermissionArgs{
//				Workspace:  pulumi.String("example"),
//				ProjectKey: pulumi.Any(bitbucket_project.Example.Key),
//				GroupSlug:  pulumi.Any(bitbucket_group.Example.Slug),
//				Permission: pulumi.String("read"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Repository Group Permissions can be imported using their `workspace:project-key:group-slug` ID, e.g.
//
// ```sh
//
//	$ pulumi import bitbucket:index/projectGroupPermission:ProjectGroupPermission example workspace:project-key:group-slug
//
// ```
type ProjectGroupPermission struct {
	pulumi.CustomResourceState

	// Slug of the requested group.
	GroupSlug pulumi.StringOutput `pulumi:"groupSlug"`
	// Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
	Permission pulumi.StringOutput `pulumi:"permission"`
	// The project key.
	ProjectKey pulumi.StringOutput `pulumi:"projectKey"`
	// The workspace id.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewProjectGroupPermission registers a new resource with the given unique name, arguments, and options.
func NewProjectGroupPermission(ctx *pulumi.Context,
	name string, args *ProjectGroupPermissionArgs, opts ...pulumi.ResourceOption) (*ProjectGroupPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupSlug == nil {
		return nil, errors.New("invalid value for required argument 'GroupSlug'")
	}
	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	if args.ProjectKey == nil {
		return nil, errors.New("invalid value for required argument 'ProjectKey'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectGroupPermission
	err := ctx.RegisterResource("bitbucket:index/projectGroupPermission:ProjectGroupPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectGroupPermission gets an existing ProjectGroupPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectGroupPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectGroupPermissionState, opts ...pulumi.ResourceOption) (*ProjectGroupPermission, error) {
	var resource ProjectGroupPermission
	err := ctx.ReadResource("bitbucket:index/projectGroupPermission:ProjectGroupPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectGroupPermission resources.
type projectGroupPermissionState struct {
	// Slug of the requested group.
	GroupSlug *string `pulumi:"groupSlug"`
	// Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
	Permission *string `pulumi:"permission"`
	// The project key.
	ProjectKey *string `pulumi:"projectKey"`
	// The workspace id.
	Workspace *string `pulumi:"workspace"`
}

type ProjectGroupPermissionState struct {
	// Slug of the requested group.
	GroupSlug pulumi.StringPtrInput
	// Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
	Permission pulumi.StringPtrInput
	// The project key.
	ProjectKey pulumi.StringPtrInput
	// The workspace id.
	Workspace pulumi.StringPtrInput
}

func (ProjectGroupPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectGroupPermissionState)(nil)).Elem()
}

type projectGroupPermissionArgs struct {
	// Slug of the requested group.
	GroupSlug string `pulumi:"groupSlug"`
	// Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
	Permission string `pulumi:"permission"`
	// The project key.
	ProjectKey string `pulumi:"projectKey"`
	// The workspace id.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a ProjectGroupPermission resource.
type ProjectGroupPermissionArgs struct {
	// Slug of the requested group.
	GroupSlug pulumi.StringInput
	// Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
	Permission pulumi.StringInput
	// The project key.
	ProjectKey pulumi.StringInput
	// The workspace id.
	Workspace pulumi.StringInput
}

func (ProjectGroupPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectGroupPermissionArgs)(nil)).Elem()
}

type ProjectGroupPermissionInput interface {
	pulumi.Input

	ToProjectGroupPermissionOutput() ProjectGroupPermissionOutput
	ToProjectGroupPermissionOutputWithContext(ctx context.Context) ProjectGroupPermissionOutput
}

func (*ProjectGroupPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectGroupPermission)(nil)).Elem()
}

func (i *ProjectGroupPermission) ToProjectGroupPermissionOutput() ProjectGroupPermissionOutput {
	return i.ToProjectGroupPermissionOutputWithContext(context.Background())
}

func (i *ProjectGroupPermission) ToProjectGroupPermissionOutputWithContext(ctx context.Context) ProjectGroupPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGroupPermissionOutput)
}

// ProjectGroupPermissionArrayInput is an input type that accepts ProjectGroupPermissionArray and ProjectGroupPermissionArrayOutput values.
// You can construct a concrete instance of `ProjectGroupPermissionArrayInput` via:
//
//	ProjectGroupPermissionArray{ ProjectGroupPermissionArgs{...} }
type ProjectGroupPermissionArrayInput interface {
	pulumi.Input

	ToProjectGroupPermissionArrayOutput() ProjectGroupPermissionArrayOutput
	ToProjectGroupPermissionArrayOutputWithContext(context.Context) ProjectGroupPermissionArrayOutput
}

type ProjectGroupPermissionArray []ProjectGroupPermissionInput

func (ProjectGroupPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectGroupPermission)(nil)).Elem()
}

func (i ProjectGroupPermissionArray) ToProjectGroupPermissionArrayOutput() ProjectGroupPermissionArrayOutput {
	return i.ToProjectGroupPermissionArrayOutputWithContext(context.Background())
}

func (i ProjectGroupPermissionArray) ToProjectGroupPermissionArrayOutputWithContext(ctx context.Context) ProjectGroupPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGroupPermissionArrayOutput)
}

// ProjectGroupPermissionMapInput is an input type that accepts ProjectGroupPermissionMap and ProjectGroupPermissionMapOutput values.
// You can construct a concrete instance of `ProjectGroupPermissionMapInput` via:
//
//	ProjectGroupPermissionMap{ "key": ProjectGroupPermissionArgs{...} }
type ProjectGroupPermissionMapInput interface {
	pulumi.Input

	ToProjectGroupPermissionMapOutput() ProjectGroupPermissionMapOutput
	ToProjectGroupPermissionMapOutputWithContext(context.Context) ProjectGroupPermissionMapOutput
}

type ProjectGroupPermissionMap map[string]ProjectGroupPermissionInput

func (ProjectGroupPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectGroupPermission)(nil)).Elem()
}

func (i ProjectGroupPermissionMap) ToProjectGroupPermissionMapOutput() ProjectGroupPermissionMapOutput {
	return i.ToProjectGroupPermissionMapOutputWithContext(context.Background())
}

func (i ProjectGroupPermissionMap) ToProjectGroupPermissionMapOutputWithContext(ctx context.Context) ProjectGroupPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectGroupPermissionMapOutput)
}

type ProjectGroupPermissionOutput struct{ *pulumi.OutputState }

func (ProjectGroupPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectGroupPermission)(nil)).Elem()
}

func (o ProjectGroupPermissionOutput) ToProjectGroupPermissionOutput() ProjectGroupPermissionOutput {
	return o
}

func (o ProjectGroupPermissionOutput) ToProjectGroupPermissionOutputWithContext(ctx context.Context) ProjectGroupPermissionOutput {
	return o
}

// Slug of the requested group.
func (o ProjectGroupPermissionOutput) GroupSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectGroupPermission) pulumi.StringOutput { return v.GroupSlug }).(pulumi.StringOutput)
}

// Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
func (o ProjectGroupPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectGroupPermission) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

// The project key.
func (o ProjectGroupPermissionOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectGroupPermission) pulumi.StringOutput { return v.ProjectKey }).(pulumi.StringOutput)
}

// The workspace id.
func (o ProjectGroupPermissionOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectGroupPermission) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type ProjectGroupPermissionArrayOutput struct{ *pulumi.OutputState }

func (ProjectGroupPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectGroupPermission)(nil)).Elem()
}

func (o ProjectGroupPermissionArrayOutput) ToProjectGroupPermissionArrayOutput() ProjectGroupPermissionArrayOutput {
	return o
}

func (o ProjectGroupPermissionArrayOutput) ToProjectGroupPermissionArrayOutputWithContext(ctx context.Context) ProjectGroupPermissionArrayOutput {
	return o
}

func (o ProjectGroupPermissionArrayOutput) Index(i pulumi.IntInput) ProjectGroupPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectGroupPermission {
		return vs[0].([]*ProjectGroupPermission)[vs[1].(int)]
	}).(ProjectGroupPermissionOutput)
}

type ProjectGroupPermissionMapOutput struct{ *pulumi.OutputState }

func (ProjectGroupPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectGroupPermission)(nil)).Elem()
}

func (o ProjectGroupPermissionMapOutput) ToProjectGroupPermissionMapOutput() ProjectGroupPermissionMapOutput {
	return o
}

func (o ProjectGroupPermissionMapOutput) ToProjectGroupPermissionMapOutputWithContext(ctx context.Context) ProjectGroupPermissionMapOutput {
	return o
}

func (o ProjectGroupPermissionMapOutput) MapIndex(k pulumi.StringInput) ProjectGroupPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectGroupPermission {
		return vs[0].(map[string]*ProjectGroupPermission)[vs[1].(string)]
	}).(ProjectGroupPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGroupPermissionInput)(nil)).Elem(), &ProjectGroupPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGroupPermissionArrayInput)(nil)).Elem(), ProjectGroupPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectGroupPermissionMapInput)(nil)).Elem(), ProjectGroupPermissionMap{})
	pulumi.RegisterOutputType(ProjectGroupPermissionOutput{})
	pulumi.RegisterOutputType(ProjectGroupPermissionArrayOutput{})
	pulumi.RegisterOutputType(ProjectGroupPermissionMapOutput{})
}
