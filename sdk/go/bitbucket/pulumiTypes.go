// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

var _ = internal.GetEnvOrDefault

type BranchRestrictionGroup struct {
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner string `pulumi:"owner"`
	Slug  string `pulumi:"slug"`
}

// BranchRestrictionGroupInput is an input type that accepts BranchRestrictionGroupArgs and BranchRestrictionGroupOutput values.
// You can construct a concrete instance of `BranchRestrictionGroupInput` via:
//
//	BranchRestrictionGroupArgs{...}
type BranchRestrictionGroupInput interface {
	pulumi.Input

	ToBranchRestrictionGroupOutput() BranchRestrictionGroupOutput
	ToBranchRestrictionGroupOutputWithContext(context.Context) BranchRestrictionGroupOutput
}

type BranchRestrictionGroupArgs struct {
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner pulumi.StringInput `pulumi:"owner"`
	Slug  pulumi.StringInput `pulumi:"slug"`
}

func (BranchRestrictionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchRestrictionGroup)(nil)).Elem()
}

func (i BranchRestrictionGroupArgs) ToBranchRestrictionGroupOutput() BranchRestrictionGroupOutput {
	return i.ToBranchRestrictionGroupOutputWithContext(context.Background())
}

func (i BranchRestrictionGroupArgs) ToBranchRestrictionGroupOutputWithContext(ctx context.Context) BranchRestrictionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRestrictionGroupOutput)
}

// BranchRestrictionGroupArrayInput is an input type that accepts BranchRestrictionGroupArray and BranchRestrictionGroupArrayOutput values.
// You can construct a concrete instance of `BranchRestrictionGroupArrayInput` via:
//
//	BranchRestrictionGroupArray{ BranchRestrictionGroupArgs{...} }
type BranchRestrictionGroupArrayInput interface {
	pulumi.Input

	ToBranchRestrictionGroupArrayOutput() BranchRestrictionGroupArrayOutput
	ToBranchRestrictionGroupArrayOutputWithContext(context.Context) BranchRestrictionGroupArrayOutput
}

type BranchRestrictionGroupArray []BranchRestrictionGroupInput

func (BranchRestrictionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchRestrictionGroup)(nil)).Elem()
}

func (i BranchRestrictionGroupArray) ToBranchRestrictionGroupArrayOutput() BranchRestrictionGroupArrayOutput {
	return i.ToBranchRestrictionGroupArrayOutputWithContext(context.Background())
}

func (i BranchRestrictionGroupArray) ToBranchRestrictionGroupArrayOutputWithContext(ctx context.Context) BranchRestrictionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRestrictionGroupArrayOutput)
}

type BranchRestrictionGroupOutput struct{ *pulumi.OutputState }

func (BranchRestrictionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchRestrictionGroup)(nil)).Elem()
}

func (o BranchRestrictionGroupOutput) ToBranchRestrictionGroupOutput() BranchRestrictionGroupOutput {
	return o
}

func (o BranchRestrictionGroupOutput) ToBranchRestrictionGroupOutputWithContext(ctx context.Context) BranchRestrictionGroupOutput {
	return o
}

// The owner of this repository. Can be you or any team you
// have write access to.
func (o BranchRestrictionGroupOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v BranchRestrictionGroup) string { return v.Owner }).(pulumi.StringOutput)
}

func (o BranchRestrictionGroupOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v BranchRestrictionGroup) string { return v.Slug }).(pulumi.StringOutput)
}

type BranchRestrictionGroupArrayOutput struct{ *pulumi.OutputState }

func (BranchRestrictionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchRestrictionGroup)(nil)).Elem()
}

func (o BranchRestrictionGroupArrayOutput) ToBranchRestrictionGroupArrayOutput() BranchRestrictionGroupArrayOutput {
	return o
}

func (o BranchRestrictionGroupArrayOutput) ToBranchRestrictionGroupArrayOutputWithContext(ctx context.Context) BranchRestrictionGroupArrayOutput {
	return o
}

func (o BranchRestrictionGroupArrayOutput) Index(i pulumi.IntInput) BranchRestrictionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchRestrictionGroup {
		return vs[0].([]BranchRestrictionGroup)[vs[1].(int)]
	}).(BranchRestrictionGroupOutput)
}

type BranchingModelBranchType struct {
	// Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.
	Enabled *bool `pulumi:"enabled"`
	// The kind of the branch type. Valid values are `feature`, `bugfix`, `release`, `hotfix`.
	Kind string `pulumi:"kind"`
	// The prefix for this branch type. A branch with this prefix will be classified as per kind. The prefix of an enabled branch type must be a valid branch prefix. Additionally, it cannot be blank, empty or null. The prefix for a disabled branch type can be empty or invalid.
	Prefix *string `pulumi:"prefix"`
}

// BranchingModelBranchTypeInput is an input type that accepts BranchingModelBranchTypeArgs and BranchingModelBranchTypeOutput values.
// You can construct a concrete instance of `BranchingModelBranchTypeInput` via:
//
//	BranchingModelBranchTypeArgs{...}
type BranchingModelBranchTypeInput interface {
	pulumi.Input

	ToBranchingModelBranchTypeOutput() BranchingModelBranchTypeOutput
	ToBranchingModelBranchTypeOutputWithContext(context.Context) BranchingModelBranchTypeOutput
}

type BranchingModelBranchTypeArgs struct {
	// Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The kind of the branch type. Valid values are `feature`, `bugfix`, `release`, `hotfix`.
	Kind pulumi.StringInput `pulumi:"kind"`
	// The prefix for this branch type. A branch with this prefix will be classified as per kind. The prefix of an enabled branch type must be a valid branch prefix. Additionally, it cannot be blank, empty or null. The prefix for a disabled branch type can be empty or invalid.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
}

func (BranchingModelBranchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchingModelBranchType)(nil)).Elem()
}

func (i BranchingModelBranchTypeArgs) ToBranchingModelBranchTypeOutput() BranchingModelBranchTypeOutput {
	return i.ToBranchingModelBranchTypeOutputWithContext(context.Background())
}

func (i BranchingModelBranchTypeArgs) ToBranchingModelBranchTypeOutputWithContext(ctx context.Context) BranchingModelBranchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchingModelBranchTypeOutput)
}

// BranchingModelBranchTypeArrayInput is an input type that accepts BranchingModelBranchTypeArray and BranchingModelBranchTypeArrayOutput values.
// You can construct a concrete instance of `BranchingModelBranchTypeArrayInput` via:
//
//	BranchingModelBranchTypeArray{ BranchingModelBranchTypeArgs{...} }
type BranchingModelBranchTypeArrayInput interface {
	pulumi.Input

	ToBranchingModelBranchTypeArrayOutput() BranchingModelBranchTypeArrayOutput
	ToBranchingModelBranchTypeArrayOutputWithContext(context.Context) BranchingModelBranchTypeArrayOutput
}

type BranchingModelBranchTypeArray []BranchingModelBranchTypeInput

func (BranchingModelBranchTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchingModelBranchType)(nil)).Elem()
}

func (i BranchingModelBranchTypeArray) ToBranchingModelBranchTypeArrayOutput() BranchingModelBranchTypeArrayOutput {
	return i.ToBranchingModelBranchTypeArrayOutputWithContext(context.Background())
}

func (i BranchingModelBranchTypeArray) ToBranchingModelBranchTypeArrayOutputWithContext(ctx context.Context) BranchingModelBranchTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchingModelBranchTypeArrayOutput)
}

type BranchingModelBranchTypeOutput struct{ *pulumi.OutputState }

func (BranchingModelBranchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchingModelBranchType)(nil)).Elem()
}

func (o BranchingModelBranchTypeOutput) ToBranchingModelBranchTypeOutput() BranchingModelBranchTypeOutput {
	return o
}

func (o BranchingModelBranchTypeOutput) ToBranchingModelBranchTypeOutputWithContext(ctx context.Context) BranchingModelBranchTypeOutput {
	return o
}

// Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.
func (o BranchingModelBranchTypeOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchingModelBranchType) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The kind of the branch type. Valid values are `feature`, `bugfix`, `release`, `hotfix`.
func (o BranchingModelBranchTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v BranchingModelBranchType) string { return v.Kind }).(pulumi.StringOutput)
}

// The prefix for this branch type. A branch with this prefix will be classified as per kind. The prefix of an enabled branch type must be a valid branch prefix. Additionally, it cannot be blank, empty or null. The prefix for a disabled branch type can be empty or invalid.
func (o BranchingModelBranchTypeOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchingModelBranchType) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type BranchingModelBranchTypeArrayOutput struct{ *pulumi.OutputState }

func (BranchingModelBranchTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BranchingModelBranchType)(nil)).Elem()
}

func (o BranchingModelBranchTypeArrayOutput) ToBranchingModelBranchTypeArrayOutput() BranchingModelBranchTypeArrayOutput {
	return o
}

func (o BranchingModelBranchTypeArrayOutput) ToBranchingModelBranchTypeArrayOutputWithContext(ctx context.Context) BranchingModelBranchTypeArrayOutput {
	return o
}

func (o BranchingModelBranchTypeArrayOutput) Index(i pulumi.IntInput) BranchingModelBranchTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BranchingModelBranchType {
		return vs[0].([]BranchingModelBranchType)[vs[1].(int)]
	}).(BranchingModelBranchTypeOutput)
}

type BranchingModelDevelopment struct {
	// Optional and only returned for a repository's branching model. Indicates if the indicated branch exists on the repository (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a repository is inheriting its project's branching model.
	BranchDoesNotExist *bool `pulumi:"branchDoesNotExist"`
	IsValid            *bool `pulumi:"isValid"`
	// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
	Name *string `pulumi:"name"`
	// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
	UseMainbranch *bool `pulumi:"useMainbranch"`
}

// BranchingModelDevelopmentInput is an input type that accepts BranchingModelDevelopmentArgs and BranchingModelDevelopmentOutput values.
// You can construct a concrete instance of `BranchingModelDevelopmentInput` via:
//
//	BranchingModelDevelopmentArgs{...}
type BranchingModelDevelopmentInput interface {
	pulumi.Input

	ToBranchingModelDevelopmentOutput() BranchingModelDevelopmentOutput
	ToBranchingModelDevelopmentOutputWithContext(context.Context) BranchingModelDevelopmentOutput
}

type BranchingModelDevelopmentArgs struct {
	// Optional and only returned for a repository's branching model. Indicates if the indicated branch exists on the repository (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a repository is inheriting its project's branching model.
	BranchDoesNotExist pulumi.BoolPtrInput `pulumi:"branchDoesNotExist"`
	IsValid            pulumi.BoolPtrInput `pulumi:"isValid"`
	// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
	UseMainbranch pulumi.BoolPtrInput `pulumi:"useMainbranch"`
}

func (BranchingModelDevelopmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchingModelDevelopment)(nil)).Elem()
}

func (i BranchingModelDevelopmentArgs) ToBranchingModelDevelopmentOutput() BranchingModelDevelopmentOutput {
	return i.ToBranchingModelDevelopmentOutputWithContext(context.Background())
}

func (i BranchingModelDevelopmentArgs) ToBranchingModelDevelopmentOutputWithContext(ctx context.Context) BranchingModelDevelopmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchingModelDevelopmentOutput)
}

func (i BranchingModelDevelopmentArgs) ToBranchingModelDevelopmentPtrOutput() BranchingModelDevelopmentPtrOutput {
	return i.ToBranchingModelDevelopmentPtrOutputWithContext(context.Background())
}

func (i BranchingModelDevelopmentArgs) ToBranchingModelDevelopmentPtrOutputWithContext(ctx context.Context) BranchingModelDevelopmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchingModelDevelopmentOutput).ToBranchingModelDevelopmentPtrOutputWithContext(ctx)
}

// BranchingModelDevelopmentPtrInput is an input type that accepts BranchingModelDevelopmentArgs, BranchingModelDevelopmentPtr and BranchingModelDevelopmentPtrOutput values.
// You can construct a concrete instance of `BranchingModelDevelopmentPtrInput` via:
//
//	        BranchingModelDevelopmentArgs{...}
//
//	or:
//
//	        nil
type BranchingModelDevelopmentPtrInput interface {
	pulumi.Input

	ToBranchingModelDevelopmentPtrOutput() BranchingModelDevelopmentPtrOutput
	ToBranchingModelDevelopmentPtrOutputWithContext(context.Context) BranchingModelDevelopmentPtrOutput
}

type branchingModelDevelopmentPtrType BranchingModelDevelopmentArgs

func BranchingModelDevelopmentPtr(v *BranchingModelDevelopmentArgs) BranchingModelDevelopmentPtrInput {
	return (*branchingModelDevelopmentPtrType)(v)
}

func (*branchingModelDevelopmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchingModelDevelopment)(nil)).Elem()
}

func (i *branchingModelDevelopmentPtrType) ToBranchingModelDevelopmentPtrOutput() BranchingModelDevelopmentPtrOutput {
	return i.ToBranchingModelDevelopmentPtrOutputWithContext(context.Background())
}

func (i *branchingModelDevelopmentPtrType) ToBranchingModelDevelopmentPtrOutputWithContext(ctx context.Context) BranchingModelDevelopmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchingModelDevelopmentPtrOutput)
}

type BranchingModelDevelopmentOutput struct{ *pulumi.OutputState }

func (BranchingModelDevelopmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchingModelDevelopment)(nil)).Elem()
}

func (o BranchingModelDevelopmentOutput) ToBranchingModelDevelopmentOutput() BranchingModelDevelopmentOutput {
	return o
}

func (o BranchingModelDevelopmentOutput) ToBranchingModelDevelopmentOutputWithContext(ctx context.Context) BranchingModelDevelopmentOutput {
	return o
}

func (o BranchingModelDevelopmentOutput) ToBranchingModelDevelopmentPtrOutput() BranchingModelDevelopmentPtrOutput {
	return o.ToBranchingModelDevelopmentPtrOutputWithContext(context.Background())
}

func (o BranchingModelDevelopmentOutput) ToBranchingModelDevelopmentPtrOutputWithContext(ctx context.Context) BranchingModelDevelopmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BranchingModelDevelopment) *BranchingModelDevelopment {
		return &v
	}).(BranchingModelDevelopmentPtrOutput)
}

// Optional and only returned for a repository's branching model. Indicates if the indicated branch exists on the repository (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a repository is inheriting its project's branching model.
func (o BranchingModelDevelopmentOutput) BranchDoesNotExist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchingModelDevelopment) *bool { return v.BranchDoesNotExist }).(pulumi.BoolPtrOutput)
}

func (o BranchingModelDevelopmentOutput) IsValid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchingModelDevelopment) *bool { return v.IsValid }).(pulumi.BoolPtrOutput)
}

// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
func (o BranchingModelDevelopmentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchingModelDevelopment) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
func (o BranchingModelDevelopmentOutput) UseMainbranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchingModelDevelopment) *bool { return v.UseMainbranch }).(pulumi.BoolPtrOutput)
}

type BranchingModelDevelopmentPtrOutput struct{ *pulumi.OutputState }

func (BranchingModelDevelopmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchingModelDevelopment)(nil)).Elem()
}

func (o BranchingModelDevelopmentPtrOutput) ToBranchingModelDevelopmentPtrOutput() BranchingModelDevelopmentPtrOutput {
	return o
}

func (o BranchingModelDevelopmentPtrOutput) ToBranchingModelDevelopmentPtrOutputWithContext(ctx context.Context) BranchingModelDevelopmentPtrOutput {
	return o
}

func (o BranchingModelDevelopmentPtrOutput) Elem() BranchingModelDevelopmentOutput {
	return o.ApplyT(func(v *BranchingModelDevelopment) BranchingModelDevelopment {
		if v != nil {
			return *v
		}
		var ret BranchingModelDevelopment
		return ret
	}).(BranchingModelDevelopmentOutput)
}

// Optional and only returned for a repository's branching model. Indicates if the indicated branch exists on the repository (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a repository is inheriting its project's branching model.
func (o BranchingModelDevelopmentPtrOutput) BranchDoesNotExist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchingModelDevelopment) *bool {
		if v == nil {
			return nil
		}
		return v.BranchDoesNotExist
	}).(pulumi.BoolPtrOutput)
}

func (o BranchingModelDevelopmentPtrOutput) IsValid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchingModelDevelopment) *bool {
		if v == nil {
			return nil
		}
		return v.IsValid
	}).(pulumi.BoolPtrOutput)
}

// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
func (o BranchingModelDevelopmentPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchingModelDevelopment) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
func (o BranchingModelDevelopmentPtrOutput) UseMainbranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchingModelDevelopment) *bool {
		if v == nil {
			return nil
		}
		return v.UseMainbranch
	}).(pulumi.BoolPtrOutput)
}

type BranchingModelProduction struct {
	// Optional and only returned for a repository's branching model. Indicates if the indicated branch exists on the repository (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a repository is inheriting its project's branching model.
	BranchDoesNotExist *bool `pulumi:"branchDoesNotExist"`
	// Indicates if branch is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	IsValid *bool `pulumi:"isValid"`
	// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
	Name *string `pulumi:"name"`
	// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
	UseMainbranch *bool `pulumi:"useMainbranch"`
}

// BranchingModelProductionInput is an input type that accepts BranchingModelProductionArgs and BranchingModelProductionOutput values.
// You can construct a concrete instance of `BranchingModelProductionInput` via:
//
//	BranchingModelProductionArgs{...}
type BranchingModelProductionInput interface {
	pulumi.Input

	ToBranchingModelProductionOutput() BranchingModelProductionOutput
	ToBranchingModelProductionOutputWithContext(context.Context) BranchingModelProductionOutput
}

type BranchingModelProductionArgs struct {
	// Optional and only returned for a repository's branching model. Indicates if the indicated branch exists on the repository (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a repository is inheriting its project's branching model.
	BranchDoesNotExist pulumi.BoolPtrInput `pulumi:"branchDoesNotExist"`
	// Indicates if branch is enabled or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	IsValid pulumi.BoolPtrInput `pulumi:"isValid"`
	// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
	UseMainbranch pulumi.BoolPtrInput `pulumi:"useMainbranch"`
}

func (BranchingModelProductionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchingModelProduction)(nil)).Elem()
}

func (i BranchingModelProductionArgs) ToBranchingModelProductionOutput() BranchingModelProductionOutput {
	return i.ToBranchingModelProductionOutputWithContext(context.Background())
}

func (i BranchingModelProductionArgs) ToBranchingModelProductionOutputWithContext(ctx context.Context) BranchingModelProductionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchingModelProductionOutput)
}

func (i BranchingModelProductionArgs) ToBranchingModelProductionPtrOutput() BranchingModelProductionPtrOutput {
	return i.ToBranchingModelProductionPtrOutputWithContext(context.Background())
}

func (i BranchingModelProductionArgs) ToBranchingModelProductionPtrOutputWithContext(ctx context.Context) BranchingModelProductionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchingModelProductionOutput).ToBranchingModelProductionPtrOutputWithContext(ctx)
}

// BranchingModelProductionPtrInput is an input type that accepts BranchingModelProductionArgs, BranchingModelProductionPtr and BranchingModelProductionPtrOutput values.
// You can construct a concrete instance of `BranchingModelProductionPtrInput` via:
//
//	        BranchingModelProductionArgs{...}
//
//	or:
//
//	        nil
type BranchingModelProductionPtrInput interface {
	pulumi.Input

	ToBranchingModelProductionPtrOutput() BranchingModelProductionPtrOutput
	ToBranchingModelProductionPtrOutputWithContext(context.Context) BranchingModelProductionPtrOutput
}

type branchingModelProductionPtrType BranchingModelProductionArgs

func BranchingModelProductionPtr(v *BranchingModelProductionArgs) BranchingModelProductionPtrInput {
	return (*branchingModelProductionPtrType)(v)
}

func (*branchingModelProductionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchingModelProduction)(nil)).Elem()
}

func (i *branchingModelProductionPtrType) ToBranchingModelProductionPtrOutput() BranchingModelProductionPtrOutput {
	return i.ToBranchingModelProductionPtrOutputWithContext(context.Background())
}

func (i *branchingModelProductionPtrType) ToBranchingModelProductionPtrOutputWithContext(ctx context.Context) BranchingModelProductionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchingModelProductionPtrOutput)
}

type BranchingModelProductionOutput struct{ *pulumi.OutputState }

func (BranchingModelProductionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BranchingModelProduction)(nil)).Elem()
}

func (o BranchingModelProductionOutput) ToBranchingModelProductionOutput() BranchingModelProductionOutput {
	return o
}

func (o BranchingModelProductionOutput) ToBranchingModelProductionOutputWithContext(ctx context.Context) BranchingModelProductionOutput {
	return o
}

func (o BranchingModelProductionOutput) ToBranchingModelProductionPtrOutput() BranchingModelProductionPtrOutput {
	return o.ToBranchingModelProductionPtrOutputWithContext(context.Background())
}

func (o BranchingModelProductionOutput) ToBranchingModelProductionPtrOutputWithContext(ctx context.Context) BranchingModelProductionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BranchingModelProduction) *BranchingModelProduction {
		return &v
	}).(BranchingModelProductionPtrOutput)
}

// Optional and only returned for a repository's branching model. Indicates if the indicated branch exists on the repository (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a repository is inheriting its project's branching model.
func (o BranchingModelProductionOutput) BranchDoesNotExist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchingModelProduction) *bool { return v.BranchDoesNotExist }).(pulumi.BoolPtrOutput)
}

// Indicates if branch is enabled or not.
func (o BranchingModelProductionOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchingModelProduction) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o BranchingModelProductionOutput) IsValid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchingModelProduction) *bool { return v.IsValid }).(pulumi.BoolPtrOutput)
}

// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
func (o BranchingModelProductionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BranchingModelProduction) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
func (o BranchingModelProductionOutput) UseMainbranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BranchingModelProduction) *bool { return v.UseMainbranch }).(pulumi.BoolPtrOutput)
}

type BranchingModelProductionPtrOutput struct{ *pulumi.OutputState }

func (BranchingModelProductionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchingModelProduction)(nil)).Elem()
}

func (o BranchingModelProductionPtrOutput) ToBranchingModelProductionPtrOutput() BranchingModelProductionPtrOutput {
	return o
}

func (o BranchingModelProductionPtrOutput) ToBranchingModelProductionPtrOutputWithContext(ctx context.Context) BranchingModelProductionPtrOutput {
	return o
}

func (o BranchingModelProductionPtrOutput) Elem() BranchingModelProductionOutput {
	return o.ApplyT(func(v *BranchingModelProduction) BranchingModelProduction {
		if v != nil {
			return *v
		}
		var ret BranchingModelProduction
		return ret
	}).(BranchingModelProductionOutput)
}

// Optional and only returned for a repository's branching model. Indicates if the indicated branch exists on the repository (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a repository is inheriting its project's branching model.
func (o BranchingModelProductionPtrOutput) BranchDoesNotExist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchingModelProduction) *bool {
		if v == nil {
			return nil
		}
		return v.BranchDoesNotExist
	}).(pulumi.BoolPtrOutput)
}

// Indicates if branch is enabled or not.
func (o BranchingModelProductionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchingModelProduction) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o BranchingModelProductionPtrOutput) IsValid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchingModelProduction) *bool {
		if v == nil {
			return nil
		}
		return v.IsValid
	}).(pulumi.BoolPtrOutput)
}

// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
func (o BranchingModelProductionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchingModelProduction) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
func (o BranchingModelProductionPtrOutput) UseMainbranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BranchingModelProduction) *bool {
		if v == nil {
			return nil
		}
		return v.UseMainbranch
	}).(pulumi.BoolPtrOutput)
}

type DeploymentRestrictions struct {
	// Only Admins can deploy this deployment stage.
	AdminOnly *bool `pulumi:"adminOnly"`
}

// DeploymentRestrictionsInput is an input type that accepts DeploymentRestrictionsArgs and DeploymentRestrictionsOutput values.
// You can construct a concrete instance of `DeploymentRestrictionsInput` via:
//
//	DeploymentRestrictionsArgs{...}
type DeploymentRestrictionsInput interface {
	pulumi.Input

	ToDeploymentRestrictionsOutput() DeploymentRestrictionsOutput
	ToDeploymentRestrictionsOutputWithContext(context.Context) DeploymentRestrictionsOutput
}

type DeploymentRestrictionsArgs struct {
	// Only Admins can deploy this deployment stage.
	AdminOnly pulumi.BoolPtrInput `pulumi:"adminOnly"`
}

func (DeploymentRestrictionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentRestrictions)(nil)).Elem()
}

func (i DeploymentRestrictionsArgs) ToDeploymentRestrictionsOutput() DeploymentRestrictionsOutput {
	return i.ToDeploymentRestrictionsOutputWithContext(context.Background())
}

func (i DeploymentRestrictionsArgs) ToDeploymentRestrictionsOutputWithContext(ctx context.Context) DeploymentRestrictionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentRestrictionsOutput)
}

func (i DeploymentRestrictionsArgs) ToDeploymentRestrictionsPtrOutput() DeploymentRestrictionsPtrOutput {
	return i.ToDeploymentRestrictionsPtrOutputWithContext(context.Background())
}

func (i DeploymentRestrictionsArgs) ToDeploymentRestrictionsPtrOutputWithContext(ctx context.Context) DeploymentRestrictionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentRestrictionsOutput).ToDeploymentRestrictionsPtrOutputWithContext(ctx)
}

// DeploymentRestrictionsPtrInput is an input type that accepts DeploymentRestrictionsArgs, DeploymentRestrictionsPtr and DeploymentRestrictionsPtrOutput values.
// You can construct a concrete instance of `DeploymentRestrictionsPtrInput` via:
//
//	        DeploymentRestrictionsArgs{...}
//
//	or:
//
//	        nil
type DeploymentRestrictionsPtrInput interface {
	pulumi.Input

	ToDeploymentRestrictionsPtrOutput() DeploymentRestrictionsPtrOutput
	ToDeploymentRestrictionsPtrOutputWithContext(context.Context) DeploymentRestrictionsPtrOutput
}

type deploymentRestrictionsPtrType DeploymentRestrictionsArgs

func DeploymentRestrictionsPtr(v *DeploymentRestrictionsArgs) DeploymentRestrictionsPtrInput {
	return (*deploymentRestrictionsPtrType)(v)
}

func (*deploymentRestrictionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentRestrictions)(nil)).Elem()
}

func (i *deploymentRestrictionsPtrType) ToDeploymentRestrictionsPtrOutput() DeploymentRestrictionsPtrOutput {
	return i.ToDeploymentRestrictionsPtrOutputWithContext(context.Background())
}

func (i *deploymentRestrictionsPtrType) ToDeploymentRestrictionsPtrOutputWithContext(ctx context.Context) DeploymentRestrictionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentRestrictionsPtrOutput)
}

type DeploymentRestrictionsOutput struct{ *pulumi.OutputState }

func (DeploymentRestrictionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentRestrictions)(nil)).Elem()
}

func (o DeploymentRestrictionsOutput) ToDeploymentRestrictionsOutput() DeploymentRestrictionsOutput {
	return o
}

func (o DeploymentRestrictionsOutput) ToDeploymentRestrictionsOutputWithContext(ctx context.Context) DeploymentRestrictionsOutput {
	return o
}

func (o DeploymentRestrictionsOutput) ToDeploymentRestrictionsPtrOutput() DeploymentRestrictionsPtrOutput {
	return o.ToDeploymentRestrictionsPtrOutputWithContext(context.Background())
}

func (o DeploymentRestrictionsOutput) ToDeploymentRestrictionsPtrOutputWithContext(ctx context.Context) DeploymentRestrictionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentRestrictions) *DeploymentRestrictions {
		return &v
	}).(DeploymentRestrictionsPtrOutput)
}

// Only Admins can deploy this deployment stage.
func (o DeploymentRestrictionsOutput) AdminOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeploymentRestrictions) *bool { return v.AdminOnly }).(pulumi.BoolPtrOutput)
}

type DeploymentRestrictionsPtrOutput struct{ *pulumi.OutputState }

func (DeploymentRestrictionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentRestrictions)(nil)).Elem()
}

func (o DeploymentRestrictionsPtrOutput) ToDeploymentRestrictionsPtrOutput() DeploymentRestrictionsPtrOutput {
	return o
}

func (o DeploymentRestrictionsPtrOutput) ToDeploymentRestrictionsPtrOutputWithContext(ctx context.Context) DeploymentRestrictionsPtrOutput {
	return o
}

func (o DeploymentRestrictionsPtrOutput) Elem() DeploymentRestrictionsOutput {
	return o.ApplyT(func(v *DeploymentRestrictions) DeploymentRestrictions {
		if v != nil {
			return *v
		}
		var ret DeploymentRestrictions
		return ret
	}).(DeploymentRestrictionsOutput)
}

// Only Admins can deploy this deployment stage.
func (o DeploymentRestrictionsPtrOutput) AdminOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DeploymentRestrictions) *bool {
		if v == nil {
			return nil
		}
		return v.AdminOnly
	}).(pulumi.BoolPtrOutput)
}

type ForkedRepositoryLink struct {
	// An avatar link to a resource related to this object. See Avatar Below.
	Avatar *ForkedRepositoryLinkAvatar `pulumi:"avatar"`
}

// ForkedRepositoryLinkInput is an input type that accepts ForkedRepositoryLinkArgs and ForkedRepositoryLinkOutput values.
// You can construct a concrete instance of `ForkedRepositoryLinkInput` via:
//
//	ForkedRepositoryLinkArgs{...}
type ForkedRepositoryLinkInput interface {
	pulumi.Input

	ToForkedRepositoryLinkOutput() ForkedRepositoryLinkOutput
	ToForkedRepositoryLinkOutputWithContext(context.Context) ForkedRepositoryLinkOutput
}

type ForkedRepositoryLinkArgs struct {
	// An avatar link to a resource related to this object. See Avatar Below.
	Avatar ForkedRepositoryLinkAvatarPtrInput `pulumi:"avatar"`
}

func (ForkedRepositoryLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForkedRepositoryLink)(nil)).Elem()
}

func (i ForkedRepositoryLinkArgs) ToForkedRepositoryLinkOutput() ForkedRepositoryLinkOutput {
	return i.ToForkedRepositoryLinkOutputWithContext(context.Background())
}

func (i ForkedRepositoryLinkArgs) ToForkedRepositoryLinkOutputWithContext(ctx context.Context) ForkedRepositoryLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForkedRepositoryLinkOutput)
}

func (i ForkedRepositoryLinkArgs) ToForkedRepositoryLinkPtrOutput() ForkedRepositoryLinkPtrOutput {
	return i.ToForkedRepositoryLinkPtrOutputWithContext(context.Background())
}

func (i ForkedRepositoryLinkArgs) ToForkedRepositoryLinkPtrOutputWithContext(ctx context.Context) ForkedRepositoryLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForkedRepositoryLinkOutput).ToForkedRepositoryLinkPtrOutputWithContext(ctx)
}

// ForkedRepositoryLinkPtrInput is an input type that accepts ForkedRepositoryLinkArgs, ForkedRepositoryLinkPtr and ForkedRepositoryLinkPtrOutput values.
// You can construct a concrete instance of `ForkedRepositoryLinkPtrInput` via:
//
//	        ForkedRepositoryLinkArgs{...}
//
//	or:
//
//	        nil
type ForkedRepositoryLinkPtrInput interface {
	pulumi.Input

	ToForkedRepositoryLinkPtrOutput() ForkedRepositoryLinkPtrOutput
	ToForkedRepositoryLinkPtrOutputWithContext(context.Context) ForkedRepositoryLinkPtrOutput
}

type forkedRepositoryLinkPtrType ForkedRepositoryLinkArgs

func ForkedRepositoryLinkPtr(v *ForkedRepositoryLinkArgs) ForkedRepositoryLinkPtrInput {
	return (*forkedRepositoryLinkPtrType)(v)
}

func (*forkedRepositoryLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForkedRepositoryLink)(nil)).Elem()
}

func (i *forkedRepositoryLinkPtrType) ToForkedRepositoryLinkPtrOutput() ForkedRepositoryLinkPtrOutput {
	return i.ToForkedRepositoryLinkPtrOutputWithContext(context.Background())
}

func (i *forkedRepositoryLinkPtrType) ToForkedRepositoryLinkPtrOutputWithContext(ctx context.Context) ForkedRepositoryLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForkedRepositoryLinkPtrOutput)
}

type ForkedRepositoryLinkOutput struct{ *pulumi.OutputState }

func (ForkedRepositoryLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForkedRepositoryLink)(nil)).Elem()
}

func (o ForkedRepositoryLinkOutput) ToForkedRepositoryLinkOutput() ForkedRepositoryLinkOutput {
	return o
}

func (o ForkedRepositoryLinkOutput) ToForkedRepositoryLinkOutputWithContext(ctx context.Context) ForkedRepositoryLinkOutput {
	return o
}

func (o ForkedRepositoryLinkOutput) ToForkedRepositoryLinkPtrOutput() ForkedRepositoryLinkPtrOutput {
	return o.ToForkedRepositoryLinkPtrOutputWithContext(context.Background())
}

func (o ForkedRepositoryLinkOutput) ToForkedRepositoryLinkPtrOutputWithContext(ctx context.Context) ForkedRepositoryLinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ForkedRepositoryLink) *ForkedRepositoryLink {
		return &v
	}).(ForkedRepositoryLinkPtrOutput)
}

// An avatar link to a resource related to this object. See Avatar Below.
func (o ForkedRepositoryLinkOutput) Avatar() ForkedRepositoryLinkAvatarPtrOutput {
	return o.ApplyT(func(v ForkedRepositoryLink) *ForkedRepositoryLinkAvatar { return v.Avatar }).(ForkedRepositoryLinkAvatarPtrOutput)
}

type ForkedRepositoryLinkPtrOutput struct{ *pulumi.OutputState }

func (ForkedRepositoryLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForkedRepositoryLink)(nil)).Elem()
}

func (o ForkedRepositoryLinkPtrOutput) ToForkedRepositoryLinkPtrOutput() ForkedRepositoryLinkPtrOutput {
	return o
}

func (o ForkedRepositoryLinkPtrOutput) ToForkedRepositoryLinkPtrOutputWithContext(ctx context.Context) ForkedRepositoryLinkPtrOutput {
	return o
}

func (o ForkedRepositoryLinkPtrOutput) Elem() ForkedRepositoryLinkOutput {
	return o.ApplyT(func(v *ForkedRepositoryLink) ForkedRepositoryLink {
		if v != nil {
			return *v
		}
		var ret ForkedRepositoryLink
		return ret
	}).(ForkedRepositoryLinkOutput)
}

// An avatar link to a resource related to this object. See Avatar Below.
func (o ForkedRepositoryLinkPtrOutput) Avatar() ForkedRepositoryLinkAvatarPtrOutput {
	return o.ApplyT(func(v *ForkedRepositoryLink) *ForkedRepositoryLinkAvatar {
		if v == nil {
			return nil
		}
		return v.Avatar
	}).(ForkedRepositoryLinkAvatarPtrOutput)
}

type ForkedRepositoryLinkAvatar struct {
	// href of the avatar.
	Href *string `pulumi:"href"`
}

// ForkedRepositoryLinkAvatarInput is an input type that accepts ForkedRepositoryLinkAvatarArgs and ForkedRepositoryLinkAvatarOutput values.
// You can construct a concrete instance of `ForkedRepositoryLinkAvatarInput` via:
//
//	ForkedRepositoryLinkAvatarArgs{...}
type ForkedRepositoryLinkAvatarInput interface {
	pulumi.Input

	ToForkedRepositoryLinkAvatarOutput() ForkedRepositoryLinkAvatarOutput
	ToForkedRepositoryLinkAvatarOutputWithContext(context.Context) ForkedRepositoryLinkAvatarOutput
}

type ForkedRepositoryLinkAvatarArgs struct {
	// href of the avatar.
	Href pulumi.StringPtrInput `pulumi:"href"`
}

func (ForkedRepositoryLinkAvatarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForkedRepositoryLinkAvatar)(nil)).Elem()
}

func (i ForkedRepositoryLinkAvatarArgs) ToForkedRepositoryLinkAvatarOutput() ForkedRepositoryLinkAvatarOutput {
	return i.ToForkedRepositoryLinkAvatarOutputWithContext(context.Background())
}

func (i ForkedRepositoryLinkAvatarArgs) ToForkedRepositoryLinkAvatarOutputWithContext(ctx context.Context) ForkedRepositoryLinkAvatarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForkedRepositoryLinkAvatarOutput)
}

func (i ForkedRepositoryLinkAvatarArgs) ToForkedRepositoryLinkAvatarPtrOutput() ForkedRepositoryLinkAvatarPtrOutput {
	return i.ToForkedRepositoryLinkAvatarPtrOutputWithContext(context.Background())
}

func (i ForkedRepositoryLinkAvatarArgs) ToForkedRepositoryLinkAvatarPtrOutputWithContext(ctx context.Context) ForkedRepositoryLinkAvatarPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForkedRepositoryLinkAvatarOutput).ToForkedRepositoryLinkAvatarPtrOutputWithContext(ctx)
}

// ForkedRepositoryLinkAvatarPtrInput is an input type that accepts ForkedRepositoryLinkAvatarArgs, ForkedRepositoryLinkAvatarPtr and ForkedRepositoryLinkAvatarPtrOutput values.
// You can construct a concrete instance of `ForkedRepositoryLinkAvatarPtrInput` via:
//
//	        ForkedRepositoryLinkAvatarArgs{...}
//
//	or:
//
//	        nil
type ForkedRepositoryLinkAvatarPtrInput interface {
	pulumi.Input

	ToForkedRepositoryLinkAvatarPtrOutput() ForkedRepositoryLinkAvatarPtrOutput
	ToForkedRepositoryLinkAvatarPtrOutputWithContext(context.Context) ForkedRepositoryLinkAvatarPtrOutput
}

type forkedRepositoryLinkAvatarPtrType ForkedRepositoryLinkAvatarArgs

func ForkedRepositoryLinkAvatarPtr(v *ForkedRepositoryLinkAvatarArgs) ForkedRepositoryLinkAvatarPtrInput {
	return (*forkedRepositoryLinkAvatarPtrType)(v)
}

func (*forkedRepositoryLinkAvatarPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForkedRepositoryLinkAvatar)(nil)).Elem()
}

func (i *forkedRepositoryLinkAvatarPtrType) ToForkedRepositoryLinkAvatarPtrOutput() ForkedRepositoryLinkAvatarPtrOutput {
	return i.ToForkedRepositoryLinkAvatarPtrOutputWithContext(context.Background())
}

func (i *forkedRepositoryLinkAvatarPtrType) ToForkedRepositoryLinkAvatarPtrOutputWithContext(ctx context.Context) ForkedRepositoryLinkAvatarPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForkedRepositoryLinkAvatarPtrOutput)
}

type ForkedRepositoryLinkAvatarOutput struct{ *pulumi.OutputState }

func (ForkedRepositoryLinkAvatarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForkedRepositoryLinkAvatar)(nil)).Elem()
}

func (o ForkedRepositoryLinkAvatarOutput) ToForkedRepositoryLinkAvatarOutput() ForkedRepositoryLinkAvatarOutput {
	return o
}

func (o ForkedRepositoryLinkAvatarOutput) ToForkedRepositoryLinkAvatarOutputWithContext(ctx context.Context) ForkedRepositoryLinkAvatarOutput {
	return o
}

func (o ForkedRepositoryLinkAvatarOutput) ToForkedRepositoryLinkAvatarPtrOutput() ForkedRepositoryLinkAvatarPtrOutput {
	return o.ToForkedRepositoryLinkAvatarPtrOutputWithContext(context.Background())
}

func (o ForkedRepositoryLinkAvatarOutput) ToForkedRepositoryLinkAvatarPtrOutputWithContext(ctx context.Context) ForkedRepositoryLinkAvatarPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ForkedRepositoryLinkAvatar) *ForkedRepositoryLinkAvatar {
		return &v
	}).(ForkedRepositoryLinkAvatarPtrOutput)
}

// href of the avatar.
func (o ForkedRepositoryLinkAvatarOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForkedRepositoryLinkAvatar) *string { return v.Href }).(pulumi.StringPtrOutput)
}

type ForkedRepositoryLinkAvatarPtrOutput struct{ *pulumi.OutputState }

func (ForkedRepositoryLinkAvatarPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForkedRepositoryLinkAvatar)(nil)).Elem()
}

func (o ForkedRepositoryLinkAvatarPtrOutput) ToForkedRepositoryLinkAvatarPtrOutput() ForkedRepositoryLinkAvatarPtrOutput {
	return o
}

func (o ForkedRepositoryLinkAvatarPtrOutput) ToForkedRepositoryLinkAvatarPtrOutputWithContext(ctx context.Context) ForkedRepositoryLinkAvatarPtrOutput {
	return o
}

func (o ForkedRepositoryLinkAvatarPtrOutput) Elem() ForkedRepositoryLinkAvatarOutput {
	return o.ApplyT(func(v *ForkedRepositoryLinkAvatar) ForkedRepositoryLinkAvatar {
		if v != nil {
			return *v
		}
		var ret ForkedRepositoryLinkAvatar
		return ret
	}).(ForkedRepositoryLinkAvatarOutput)
}

// href of the avatar.
func (o ForkedRepositoryLinkAvatarPtrOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForkedRepositoryLinkAvatar) *string {
		if v == nil {
			return nil
		}
		return v.Href
	}).(pulumi.StringPtrOutput)
}

type PipelineScheduleTarget struct {
	// The name of the reference.
	RefName string `pulumi:"refName"`
	// The type of reference. Valid values are `branch` and `tag`.
	RefType string `pulumi:"refType"`
	// Selector spec. See Selector below.
	Selector PipelineScheduleTargetSelector `pulumi:"selector"`
}

// PipelineScheduleTargetInput is an input type that accepts PipelineScheduleTargetArgs and PipelineScheduleTargetOutput values.
// You can construct a concrete instance of `PipelineScheduleTargetInput` via:
//
//	PipelineScheduleTargetArgs{...}
type PipelineScheduleTargetInput interface {
	pulumi.Input

	ToPipelineScheduleTargetOutput() PipelineScheduleTargetOutput
	ToPipelineScheduleTargetOutputWithContext(context.Context) PipelineScheduleTargetOutput
}

type PipelineScheduleTargetArgs struct {
	// The name of the reference.
	RefName pulumi.StringInput `pulumi:"refName"`
	// The type of reference. Valid values are `branch` and `tag`.
	RefType pulumi.StringInput `pulumi:"refType"`
	// Selector spec. See Selector below.
	Selector PipelineScheduleTargetSelectorInput `pulumi:"selector"`
}

func (PipelineScheduleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineScheduleTarget)(nil)).Elem()
}

func (i PipelineScheduleTargetArgs) ToPipelineScheduleTargetOutput() PipelineScheduleTargetOutput {
	return i.ToPipelineScheduleTargetOutputWithContext(context.Background())
}

func (i PipelineScheduleTargetArgs) ToPipelineScheduleTargetOutputWithContext(ctx context.Context) PipelineScheduleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineScheduleTargetOutput)
}

func (i PipelineScheduleTargetArgs) ToPipelineScheduleTargetPtrOutput() PipelineScheduleTargetPtrOutput {
	return i.ToPipelineScheduleTargetPtrOutputWithContext(context.Background())
}

func (i PipelineScheduleTargetArgs) ToPipelineScheduleTargetPtrOutputWithContext(ctx context.Context) PipelineScheduleTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineScheduleTargetOutput).ToPipelineScheduleTargetPtrOutputWithContext(ctx)
}

// PipelineScheduleTargetPtrInput is an input type that accepts PipelineScheduleTargetArgs, PipelineScheduleTargetPtr and PipelineScheduleTargetPtrOutput values.
// You can construct a concrete instance of `PipelineScheduleTargetPtrInput` via:
//
//	        PipelineScheduleTargetArgs{...}
//
//	or:
//
//	        nil
type PipelineScheduleTargetPtrInput interface {
	pulumi.Input

	ToPipelineScheduleTargetPtrOutput() PipelineScheduleTargetPtrOutput
	ToPipelineScheduleTargetPtrOutputWithContext(context.Context) PipelineScheduleTargetPtrOutput
}

type pipelineScheduleTargetPtrType PipelineScheduleTargetArgs

func PipelineScheduleTargetPtr(v *PipelineScheduleTargetArgs) PipelineScheduleTargetPtrInput {
	return (*pipelineScheduleTargetPtrType)(v)
}

func (*pipelineScheduleTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineScheduleTarget)(nil)).Elem()
}

func (i *pipelineScheduleTargetPtrType) ToPipelineScheduleTargetPtrOutput() PipelineScheduleTargetPtrOutput {
	return i.ToPipelineScheduleTargetPtrOutputWithContext(context.Background())
}

func (i *pipelineScheduleTargetPtrType) ToPipelineScheduleTargetPtrOutputWithContext(ctx context.Context) PipelineScheduleTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineScheduleTargetPtrOutput)
}

type PipelineScheduleTargetOutput struct{ *pulumi.OutputState }

func (PipelineScheduleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineScheduleTarget)(nil)).Elem()
}

func (o PipelineScheduleTargetOutput) ToPipelineScheduleTargetOutput() PipelineScheduleTargetOutput {
	return o
}

func (o PipelineScheduleTargetOutput) ToPipelineScheduleTargetOutputWithContext(ctx context.Context) PipelineScheduleTargetOutput {
	return o
}

func (o PipelineScheduleTargetOutput) ToPipelineScheduleTargetPtrOutput() PipelineScheduleTargetPtrOutput {
	return o.ToPipelineScheduleTargetPtrOutputWithContext(context.Background())
}

func (o PipelineScheduleTargetOutput) ToPipelineScheduleTargetPtrOutputWithContext(ctx context.Context) PipelineScheduleTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineScheduleTarget) *PipelineScheduleTarget {
		return &v
	}).(PipelineScheduleTargetPtrOutput)
}

// The name of the reference.
func (o PipelineScheduleTargetOutput) RefName() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineScheduleTarget) string { return v.RefName }).(pulumi.StringOutput)
}

// The type of reference. Valid values are `branch` and `tag`.
func (o PipelineScheduleTargetOutput) RefType() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineScheduleTarget) string { return v.RefType }).(pulumi.StringOutput)
}

// Selector spec. See Selector below.
func (o PipelineScheduleTargetOutput) Selector() PipelineScheduleTargetSelectorOutput {
	return o.ApplyT(func(v PipelineScheduleTarget) PipelineScheduleTargetSelector { return v.Selector }).(PipelineScheduleTargetSelectorOutput)
}

type PipelineScheduleTargetPtrOutput struct{ *pulumi.OutputState }

func (PipelineScheduleTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineScheduleTarget)(nil)).Elem()
}

func (o PipelineScheduleTargetPtrOutput) ToPipelineScheduleTargetPtrOutput() PipelineScheduleTargetPtrOutput {
	return o
}

func (o PipelineScheduleTargetPtrOutput) ToPipelineScheduleTargetPtrOutputWithContext(ctx context.Context) PipelineScheduleTargetPtrOutput {
	return o
}

func (o PipelineScheduleTargetPtrOutput) Elem() PipelineScheduleTargetOutput {
	return o.ApplyT(func(v *PipelineScheduleTarget) PipelineScheduleTarget {
		if v != nil {
			return *v
		}
		var ret PipelineScheduleTarget
		return ret
	}).(PipelineScheduleTargetOutput)
}

// The name of the reference.
func (o PipelineScheduleTargetPtrOutput) RefName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineScheduleTarget) *string {
		if v == nil {
			return nil
		}
		return &v.RefName
	}).(pulumi.StringPtrOutput)
}

// The type of reference. Valid values are `branch` and `tag`.
func (o PipelineScheduleTargetPtrOutput) RefType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineScheduleTarget) *string {
		if v == nil {
			return nil
		}
		return &v.RefType
	}).(pulumi.StringPtrOutput)
}

// Selector spec. See Selector below.
func (o PipelineScheduleTargetPtrOutput) Selector() PipelineScheduleTargetSelectorPtrOutput {
	return o.ApplyT(func(v *PipelineScheduleTarget) *PipelineScheduleTargetSelector {
		if v == nil {
			return nil
		}
		return &v.Selector
	}).(PipelineScheduleTargetSelectorPtrOutput)
}

type PipelineScheduleTargetSelector struct {
	// The name of the matching pipeline definition.
	Pattern string `pulumi:"pattern"`
	// Selector type. Default value is `branches`.
	Type *string `pulumi:"type"`
}

// PipelineScheduleTargetSelectorInput is an input type that accepts PipelineScheduleTargetSelectorArgs and PipelineScheduleTargetSelectorOutput values.
// You can construct a concrete instance of `PipelineScheduleTargetSelectorInput` via:
//
//	PipelineScheduleTargetSelectorArgs{...}
type PipelineScheduleTargetSelectorInput interface {
	pulumi.Input

	ToPipelineScheduleTargetSelectorOutput() PipelineScheduleTargetSelectorOutput
	ToPipelineScheduleTargetSelectorOutputWithContext(context.Context) PipelineScheduleTargetSelectorOutput
}

type PipelineScheduleTargetSelectorArgs struct {
	// The name of the matching pipeline definition.
	Pattern pulumi.StringInput `pulumi:"pattern"`
	// Selector type. Default value is `branches`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (PipelineScheduleTargetSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineScheduleTargetSelector)(nil)).Elem()
}

func (i PipelineScheduleTargetSelectorArgs) ToPipelineScheduleTargetSelectorOutput() PipelineScheduleTargetSelectorOutput {
	return i.ToPipelineScheduleTargetSelectorOutputWithContext(context.Background())
}

func (i PipelineScheduleTargetSelectorArgs) ToPipelineScheduleTargetSelectorOutputWithContext(ctx context.Context) PipelineScheduleTargetSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineScheduleTargetSelectorOutput)
}

func (i PipelineScheduleTargetSelectorArgs) ToPipelineScheduleTargetSelectorPtrOutput() PipelineScheduleTargetSelectorPtrOutput {
	return i.ToPipelineScheduleTargetSelectorPtrOutputWithContext(context.Background())
}

func (i PipelineScheduleTargetSelectorArgs) ToPipelineScheduleTargetSelectorPtrOutputWithContext(ctx context.Context) PipelineScheduleTargetSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineScheduleTargetSelectorOutput).ToPipelineScheduleTargetSelectorPtrOutputWithContext(ctx)
}

// PipelineScheduleTargetSelectorPtrInput is an input type that accepts PipelineScheduleTargetSelectorArgs, PipelineScheduleTargetSelectorPtr and PipelineScheduleTargetSelectorPtrOutput values.
// You can construct a concrete instance of `PipelineScheduleTargetSelectorPtrInput` via:
//
//	        PipelineScheduleTargetSelectorArgs{...}
//
//	or:
//
//	        nil
type PipelineScheduleTargetSelectorPtrInput interface {
	pulumi.Input

	ToPipelineScheduleTargetSelectorPtrOutput() PipelineScheduleTargetSelectorPtrOutput
	ToPipelineScheduleTargetSelectorPtrOutputWithContext(context.Context) PipelineScheduleTargetSelectorPtrOutput
}

type pipelineScheduleTargetSelectorPtrType PipelineScheduleTargetSelectorArgs

func PipelineScheduleTargetSelectorPtr(v *PipelineScheduleTargetSelectorArgs) PipelineScheduleTargetSelectorPtrInput {
	return (*pipelineScheduleTargetSelectorPtrType)(v)
}

func (*pipelineScheduleTargetSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineScheduleTargetSelector)(nil)).Elem()
}

func (i *pipelineScheduleTargetSelectorPtrType) ToPipelineScheduleTargetSelectorPtrOutput() PipelineScheduleTargetSelectorPtrOutput {
	return i.ToPipelineScheduleTargetSelectorPtrOutputWithContext(context.Background())
}

func (i *pipelineScheduleTargetSelectorPtrType) ToPipelineScheduleTargetSelectorPtrOutputWithContext(ctx context.Context) PipelineScheduleTargetSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineScheduleTargetSelectorPtrOutput)
}

type PipelineScheduleTargetSelectorOutput struct{ *pulumi.OutputState }

func (PipelineScheduleTargetSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineScheduleTargetSelector)(nil)).Elem()
}

func (o PipelineScheduleTargetSelectorOutput) ToPipelineScheduleTargetSelectorOutput() PipelineScheduleTargetSelectorOutput {
	return o
}

func (o PipelineScheduleTargetSelectorOutput) ToPipelineScheduleTargetSelectorOutputWithContext(ctx context.Context) PipelineScheduleTargetSelectorOutput {
	return o
}

func (o PipelineScheduleTargetSelectorOutput) ToPipelineScheduleTargetSelectorPtrOutput() PipelineScheduleTargetSelectorPtrOutput {
	return o.ToPipelineScheduleTargetSelectorPtrOutputWithContext(context.Background())
}

func (o PipelineScheduleTargetSelectorOutput) ToPipelineScheduleTargetSelectorPtrOutputWithContext(ctx context.Context) PipelineScheduleTargetSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineScheduleTargetSelector) *PipelineScheduleTargetSelector {
		return &v
	}).(PipelineScheduleTargetSelectorPtrOutput)
}

// The name of the matching pipeline definition.
func (o PipelineScheduleTargetSelectorOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineScheduleTargetSelector) string { return v.Pattern }).(pulumi.StringOutput)
}

// Selector type. Default value is `branches`.
func (o PipelineScheduleTargetSelectorOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineScheduleTargetSelector) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type PipelineScheduleTargetSelectorPtrOutput struct{ *pulumi.OutputState }

func (PipelineScheduleTargetSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineScheduleTargetSelector)(nil)).Elem()
}

func (o PipelineScheduleTargetSelectorPtrOutput) ToPipelineScheduleTargetSelectorPtrOutput() PipelineScheduleTargetSelectorPtrOutput {
	return o
}

func (o PipelineScheduleTargetSelectorPtrOutput) ToPipelineScheduleTargetSelectorPtrOutputWithContext(ctx context.Context) PipelineScheduleTargetSelectorPtrOutput {
	return o
}

func (o PipelineScheduleTargetSelectorPtrOutput) Elem() PipelineScheduleTargetSelectorOutput {
	return o.ApplyT(func(v *PipelineScheduleTargetSelector) PipelineScheduleTargetSelector {
		if v != nil {
			return *v
		}
		var ret PipelineScheduleTargetSelector
		return ret
	}).(PipelineScheduleTargetSelectorOutput)
}

// The name of the matching pipeline definition.
func (o PipelineScheduleTargetSelectorPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineScheduleTargetSelector) *string {
		if v == nil {
			return nil
		}
		return &v.Pattern
	}).(pulumi.StringPtrOutput)
}

// Selector type. Default value is `branches`.
func (o PipelineScheduleTargetSelectorPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineScheduleTargetSelector) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type PipelineSshKnownHostPublicKey struct {
	// The plain public key.
	Key string `pulumi:"key"`
	// The type of the public key. Valid values are `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ssh-rsa`, and `ssh-dss`.
	KeyType           string  `pulumi:"keyType"`
	Md5Fingerprint    *string `pulumi:"md5Fingerprint"`
	Sha256Fingerprint *string `pulumi:"sha256Fingerprint"`
}

// PipelineSshKnownHostPublicKeyInput is an input type that accepts PipelineSshKnownHostPublicKeyArgs and PipelineSshKnownHostPublicKeyOutput values.
// You can construct a concrete instance of `PipelineSshKnownHostPublicKeyInput` via:
//
//	PipelineSshKnownHostPublicKeyArgs{...}
type PipelineSshKnownHostPublicKeyInput interface {
	pulumi.Input

	ToPipelineSshKnownHostPublicKeyOutput() PipelineSshKnownHostPublicKeyOutput
	ToPipelineSshKnownHostPublicKeyOutputWithContext(context.Context) PipelineSshKnownHostPublicKeyOutput
}

type PipelineSshKnownHostPublicKeyArgs struct {
	// The plain public key.
	Key pulumi.StringInput `pulumi:"key"`
	// The type of the public key. Valid values are `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ssh-rsa`, and `ssh-dss`.
	KeyType           pulumi.StringInput    `pulumi:"keyType"`
	Md5Fingerprint    pulumi.StringPtrInput `pulumi:"md5Fingerprint"`
	Sha256Fingerprint pulumi.StringPtrInput `pulumi:"sha256Fingerprint"`
}

func (PipelineSshKnownHostPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSshKnownHostPublicKey)(nil)).Elem()
}

func (i PipelineSshKnownHostPublicKeyArgs) ToPipelineSshKnownHostPublicKeyOutput() PipelineSshKnownHostPublicKeyOutput {
	return i.ToPipelineSshKnownHostPublicKeyOutputWithContext(context.Background())
}

func (i PipelineSshKnownHostPublicKeyArgs) ToPipelineSshKnownHostPublicKeyOutputWithContext(ctx context.Context) PipelineSshKnownHostPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSshKnownHostPublicKeyOutput)
}

func (i PipelineSshKnownHostPublicKeyArgs) ToPipelineSshKnownHostPublicKeyPtrOutput() PipelineSshKnownHostPublicKeyPtrOutput {
	return i.ToPipelineSshKnownHostPublicKeyPtrOutputWithContext(context.Background())
}

func (i PipelineSshKnownHostPublicKeyArgs) ToPipelineSshKnownHostPublicKeyPtrOutputWithContext(ctx context.Context) PipelineSshKnownHostPublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSshKnownHostPublicKeyOutput).ToPipelineSshKnownHostPublicKeyPtrOutputWithContext(ctx)
}

// PipelineSshKnownHostPublicKeyPtrInput is an input type that accepts PipelineSshKnownHostPublicKeyArgs, PipelineSshKnownHostPublicKeyPtr and PipelineSshKnownHostPublicKeyPtrOutput values.
// You can construct a concrete instance of `PipelineSshKnownHostPublicKeyPtrInput` via:
//
//	        PipelineSshKnownHostPublicKeyArgs{...}
//
//	or:
//
//	        nil
type PipelineSshKnownHostPublicKeyPtrInput interface {
	pulumi.Input

	ToPipelineSshKnownHostPublicKeyPtrOutput() PipelineSshKnownHostPublicKeyPtrOutput
	ToPipelineSshKnownHostPublicKeyPtrOutputWithContext(context.Context) PipelineSshKnownHostPublicKeyPtrOutput
}

type pipelineSshKnownHostPublicKeyPtrType PipelineSshKnownHostPublicKeyArgs

func PipelineSshKnownHostPublicKeyPtr(v *PipelineSshKnownHostPublicKeyArgs) PipelineSshKnownHostPublicKeyPtrInput {
	return (*pipelineSshKnownHostPublicKeyPtrType)(v)
}

func (*pipelineSshKnownHostPublicKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSshKnownHostPublicKey)(nil)).Elem()
}

func (i *pipelineSshKnownHostPublicKeyPtrType) ToPipelineSshKnownHostPublicKeyPtrOutput() PipelineSshKnownHostPublicKeyPtrOutput {
	return i.ToPipelineSshKnownHostPublicKeyPtrOutputWithContext(context.Background())
}

func (i *pipelineSshKnownHostPublicKeyPtrType) ToPipelineSshKnownHostPublicKeyPtrOutputWithContext(ctx context.Context) PipelineSshKnownHostPublicKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSshKnownHostPublicKeyPtrOutput)
}

type PipelineSshKnownHostPublicKeyOutput struct{ *pulumi.OutputState }

func (PipelineSshKnownHostPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineSshKnownHostPublicKey)(nil)).Elem()
}

func (o PipelineSshKnownHostPublicKeyOutput) ToPipelineSshKnownHostPublicKeyOutput() PipelineSshKnownHostPublicKeyOutput {
	return o
}

func (o PipelineSshKnownHostPublicKeyOutput) ToPipelineSshKnownHostPublicKeyOutputWithContext(ctx context.Context) PipelineSshKnownHostPublicKeyOutput {
	return o
}

func (o PipelineSshKnownHostPublicKeyOutput) ToPipelineSshKnownHostPublicKeyPtrOutput() PipelineSshKnownHostPublicKeyPtrOutput {
	return o.ToPipelineSshKnownHostPublicKeyPtrOutputWithContext(context.Background())
}

func (o PipelineSshKnownHostPublicKeyOutput) ToPipelineSshKnownHostPublicKeyPtrOutputWithContext(ctx context.Context) PipelineSshKnownHostPublicKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineSshKnownHostPublicKey) *PipelineSshKnownHostPublicKey {
		return &v
	}).(PipelineSshKnownHostPublicKeyPtrOutput)
}

// The plain public key.
func (o PipelineSshKnownHostPublicKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineSshKnownHostPublicKey) string { return v.Key }).(pulumi.StringOutput)
}

// The type of the public key. Valid values are `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ssh-rsa`, and `ssh-dss`.
func (o PipelineSshKnownHostPublicKeyOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineSshKnownHostPublicKey) string { return v.KeyType }).(pulumi.StringOutput)
}

func (o PipelineSshKnownHostPublicKeyOutput) Md5Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSshKnownHostPublicKey) *string { return v.Md5Fingerprint }).(pulumi.StringPtrOutput)
}

func (o PipelineSshKnownHostPublicKeyOutput) Sha256Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineSshKnownHostPublicKey) *string { return v.Sha256Fingerprint }).(pulumi.StringPtrOutput)
}

type PipelineSshKnownHostPublicKeyPtrOutput struct{ *pulumi.OutputState }

func (PipelineSshKnownHostPublicKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSshKnownHostPublicKey)(nil)).Elem()
}

func (o PipelineSshKnownHostPublicKeyPtrOutput) ToPipelineSshKnownHostPublicKeyPtrOutput() PipelineSshKnownHostPublicKeyPtrOutput {
	return o
}

func (o PipelineSshKnownHostPublicKeyPtrOutput) ToPipelineSshKnownHostPublicKeyPtrOutputWithContext(ctx context.Context) PipelineSshKnownHostPublicKeyPtrOutput {
	return o
}

func (o PipelineSshKnownHostPublicKeyPtrOutput) Elem() PipelineSshKnownHostPublicKeyOutput {
	return o.ApplyT(func(v *PipelineSshKnownHostPublicKey) PipelineSshKnownHostPublicKey {
		if v != nil {
			return *v
		}
		var ret PipelineSshKnownHostPublicKey
		return ret
	}).(PipelineSshKnownHostPublicKeyOutput)
}

// The plain public key.
func (o PipelineSshKnownHostPublicKeyPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineSshKnownHostPublicKey) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// The type of the public key. Valid values are `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ssh-rsa`, and `ssh-dss`.
func (o PipelineSshKnownHostPublicKeyPtrOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineSshKnownHostPublicKey) *string {
		if v == nil {
			return nil
		}
		return &v.KeyType
	}).(pulumi.StringPtrOutput)
}

func (o PipelineSshKnownHostPublicKeyPtrOutput) Md5Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineSshKnownHostPublicKey) *string {
		if v == nil {
			return nil
		}
		return v.Md5Fingerprint
	}).(pulumi.StringPtrOutput)
}

func (o PipelineSshKnownHostPublicKeyPtrOutput) Sha256Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineSshKnownHostPublicKey) *string {
		if v == nil {
			return nil
		}
		return v.Sha256Fingerprint
	}).(pulumi.StringPtrOutput)
}

type ProjectBranchingModelBranchType struct {
	// Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.
	Enabled *bool `pulumi:"enabled"`
	// The kind of the branch type. Valid values are `feature`, `bugfix`, `release`, `hotfix`.
	Kind string `pulumi:"kind"`
	// The prefix for this branch type. A branch with this prefix will be classified as per kind. The prefix of an enabled branch type must be a valid branch prefix. Additionally, it cannot be blank, empty or null. The prefix for a disabled branch type can be empty or invalid.
	Prefix *string `pulumi:"prefix"`
}

// ProjectBranchingModelBranchTypeInput is an input type that accepts ProjectBranchingModelBranchTypeArgs and ProjectBranchingModelBranchTypeOutput values.
// You can construct a concrete instance of `ProjectBranchingModelBranchTypeInput` via:
//
//	ProjectBranchingModelBranchTypeArgs{...}
type ProjectBranchingModelBranchTypeInput interface {
	pulumi.Input

	ToProjectBranchingModelBranchTypeOutput() ProjectBranchingModelBranchTypeOutput
	ToProjectBranchingModelBranchTypeOutputWithContext(context.Context) ProjectBranchingModelBranchTypeOutput
}

type ProjectBranchingModelBranchTypeArgs struct {
	// Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The kind of the branch type. Valid values are `feature`, `bugfix`, `release`, `hotfix`.
	Kind pulumi.StringInput `pulumi:"kind"`
	// The prefix for this branch type. A branch with this prefix will be classified as per kind. The prefix of an enabled branch type must be a valid branch prefix. Additionally, it cannot be blank, empty or null. The prefix for a disabled branch type can be empty or invalid.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
}

func (ProjectBranchingModelBranchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBranchingModelBranchType)(nil)).Elem()
}

func (i ProjectBranchingModelBranchTypeArgs) ToProjectBranchingModelBranchTypeOutput() ProjectBranchingModelBranchTypeOutput {
	return i.ToProjectBranchingModelBranchTypeOutputWithContext(context.Background())
}

func (i ProjectBranchingModelBranchTypeArgs) ToProjectBranchingModelBranchTypeOutputWithContext(ctx context.Context) ProjectBranchingModelBranchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBranchingModelBranchTypeOutput)
}

// ProjectBranchingModelBranchTypeArrayInput is an input type that accepts ProjectBranchingModelBranchTypeArray and ProjectBranchingModelBranchTypeArrayOutput values.
// You can construct a concrete instance of `ProjectBranchingModelBranchTypeArrayInput` via:
//
//	ProjectBranchingModelBranchTypeArray{ ProjectBranchingModelBranchTypeArgs{...} }
type ProjectBranchingModelBranchTypeArrayInput interface {
	pulumi.Input

	ToProjectBranchingModelBranchTypeArrayOutput() ProjectBranchingModelBranchTypeArrayOutput
	ToProjectBranchingModelBranchTypeArrayOutputWithContext(context.Context) ProjectBranchingModelBranchTypeArrayOutput
}

type ProjectBranchingModelBranchTypeArray []ProjectBranchingModelBranchTypeInput

func (ProjectBranchingModelBranchTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectBranchingModelBranchType)(nil)).Elem()
}

func (i ProjectBranchingModelBranchTypeArray) ToProjectBranchingModelBranchTypeArrayOutput() ProjectBranchingModelBranchTypeArrayOutput {
	return i.ToProjectBranchingModelBranchTypeArrayOutputWithContext(context.Background())
}

func (i ProjectBranchingModelBranchTypeArray) ToProjectBranchingModelBranchTypeArrayOutputWithContext(ctx context.Context) ProjectBranchingModelBranchTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBranchingModelBranchTypeArrayOutput)
}

type ProjectBranchingModelBranchTypeOutput struct{ *pulumi.OutputState }

func (ProjectBranchingModelBranchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBranchingModelBranchType)(nil)).Elem()
}

func (o ProjectBranchingModelBranchTypeOutput) ToProjectBranchingModelBranchTypeOutput() ProjectBranchingModelBranchTypeOutput {
	return o
}

func (o ProjectBranchingModelBranchTypeOutput) ToProjectBranchingModelBranchTypeOutputWithContext(ctx context.Context) ProjectBranchingModelBranchTypeOutput {
	return o
}

// Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.
func (o ProjectBranchingModelBranchTypeOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectBranchingModelBranchType) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The kind of the branch type. Valid values are `feature`, `bugfix`, `release`, `hotfix`.
func (o ProjectBranchingModelBranchTypeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectBranchingModelBranchType) string { return v.Kind }).(pulumi.StringOutput)
}

// The prefix for this branch type. A branch with this prefix will be classified as per kind. The prefix of an enabled branch type must be a valid branch prefix. Additionally, it cannot be blank, empty or null. The prefix for a disabled branch type can be empty or invalid.
func (o ProjectBranchingModelBranchTypeOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectBranchingModelBranchType) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

type ProjectBranchingModelBranchTypeArrayOutput struct{ *pulumi.OutputState }

func (ProjectBranchingModelBranchTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectBranchingModelBranchType)(nil)).Elem()
}

func (o ProjectBranchingModelBranchTypeArrayOutput) ToProjectBranchingModelBranchTypeArrayOutput() ProjectBranchingModelBranchTypeArrayOutput {
	return o
}

func (o ProjectBranchingModelBranchTypeArrayOutput) ToProjectBranchingModelBranchTypeArrayOutputWithContext(ctx context.Context) ProjectBranchingModelBranchTypeArrayOutput {
	return o
}

func (o ProjectBranchingModelBranchTypeArrayOutput) Index(i pulumi.IntInput) ProjectBranchingModelBranchTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectBranchingModelBranchType {
		return vs[0].([]ProjectBranchingModelBranchType)[vs[1].(int)]
	}).(ProjectBranchingModelBranchTypeOutput)
}

type ProjectBranchingModelDevelopment struct {
	// Optional and only returned for a project's branching model. Indicates if the indicated branch exists on the project (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a project is inheriting its project's branching model.
	BranchDoesNotExist *bool `pulumi:"branchDoesNotExist"`
	IsValid            *bool `pulumi:"isValid"`
	// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
	Name *string `pulumi:"name"`
	// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
	UseMainbranch *bool `pulumi:"useMainbranch"`
}

// ProjectBranchingModelDevelopmentInput is an input type that accepts ProjectBranchingModelDevelopmentArgs and ProjectBranchingModelDevelopmentOutput values.
// You can construct a concrete instance of `ProjectBranchingModelDevelopmentInput` via:
//
//	ProjectBranchingModelDevelopmentArgs{...}
type ProjectBranchingModelDevelopmentInput interface {
	pulumi.Input

	ToProjectBranchingModelDevelopmentOutput() ProjectBranchingModelDevelopmentOutput
	ToProjectBranchingModelDevelopmentOutputWithContext(context.Context) ProjectBranchingModelDevelopmentOutput
}

type ProjectBranchingModelDevelopmentArgs struct {
	// Optional and only returned for a project's branching model. Indicates if the indicated branch exists on the project (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a project is inheriting its project's branching model.
	BranchDoesNotExist pulumi.BoolPtrInput `pulumi:"branchDoesNotExist"`
	IsValid            pulumi.BoolPtrInput `pulumi:"isValid"`
	// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
	UseMainbranch pulumi.BoolPtrInput `pulumi:"useMainbranch"`
}

func (ProjectBranchingModelDevelopmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBranchingModelDevelopment)(nil)).Elem()
}

func (i ProjectBranchingModelDevelopmentArgs) ToProjectBranchingModelDevelopmentOutput() ProjectBranchingModelDevelopmentOutput {
	return i.ToProjectBranchingModelDevelopmentOutputWithContext(context.Background())
}

func (i ProjectBranchingModelDevelopmentArgs) ToProjectBranchingModelDevelopmentOutputWithContext(ctx context.Context) ProjectBranchingModelDevelopmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBranchingModelDevelopmentOutput)
}

func (i ProjectBranchingModelDevelopmentArgs) ToProjectBranchingModelDevelopmentPtrOutput() ProjectBranchingModelDevelopmentPtrOutput {
	return i.ToProjectBranchingModelDevelopmentPtrOutputWithContext(context.Background())
}

func (i ProjectBranchingModelDevelopmentArgs) ToProjectBranchingModelDevelopmentPtrOutputWithContext(ctx context.Context) ProjectBranchingModelDevelopmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBranchingModelDevelopmentOutput).ToProjectBranchingModelDevelopmentPtrOutputWithContext(ctx)
}

// ProjectBranchingModelDevelopmentPtrInput is an input type that accepts ProjectBranchingModelDevelopmentArgs, ProjectBranchingModelDevelopmentPtr and ProjectBranchingModelDevelopmentPtrOutput values.
// You can construct a concrete instance of `ProjectBranchingModelDevelopmentPtrInput` via:
//
//	        ProjectBranchingModelDevelopmentArgs{...}
//
//	or:
//
//	        nil
type ProjectBranchingModelDevelopmentPtrInput interface {
	pulumi.Input

	ToProjectBranchingModelDevelopmentPtrOutput() ProjectBranchingModelDevelopmentPtrOutput
	ToProjectBranchingModelDevelopmentPtrOutputWithContext(context.Context) ProjectBranchingModelDevelopmentPtrOutput
}

type projectBranchingModelDevelopmentPtrType ProjectBranchingModelDevelopmentArgs

func ProjectBranchingModelDevelopmentPtr(v *ProjectBranchingModelDevelopmentArgs) ProjectBranchingModelDevelopmentPtrInput {
	return (*projectBranchingModelDevelopmentPtrType)(v)
}

func (*projectBranchingModelDevelopmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectBranchingModelDevelopment)(nil)).Elem()
}

func (i *projectBranchingModelDevelopmentPtrType) ToProjectBranchingModelDevelopmentPtrOutput() ProjectBranchingModelDevelopmentPtrOutput {
	return i.ToProjectBranchingModelDevelopmentPtrOutputWithContext(context.Background())
}

func (i *projectBranchingModelDevelopmentPtrType) ToProjectBranchingModelDevelopmentPtrOutputWithContext(ctx context.Context) ProjectBranchingModelDevelopmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBranchingModelDevelopmentPtrOutput)
}

type ProjectBranchingModelDevelopmentOutput struct{ *pulumi.OutputState }

func (ProjectBranchingModelDevelopmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBranchingModelDevelopment)(nil)).Elem()
}

func (o ProjectBranchingModelDevelopmentOutput) ToProjectBranchingModelDevelopmentOutput() ProjectBranchingModelDevelopmentOutput {
	return o
}

func (o ProjectBranchingModelDevelopmentOutput) ToProjectBranchingModelDevelopmentOutputWithContext(ctx context.Context) ProjectBranchingModelDevelopmentOutput {
	return o
}

func (o ProjectBranchingModelDevelopmentOutput) ToProjectBranchingModelDevelopmentPtrOutput() ProjectBranchingModelDevelopmentPtrOutput {
	return o.ToProjectBranchingModelDevelopmentPtrOutputWithContext(context.Background())
}

func (o ProjectBranchingModelDevelopmentOutput) ToProjectBranchingModelDevelopmentPtrOutputWithContext(ctx context.Context) ProjectBranchingModelDevelopmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectBranchingModelDevelopment) *ProjectBranchingModelDevelopment {
		return &v
	}).(ProjectBranchingModelDevelopmentPtrOutput)
}

// Optional and only returned for a project's branching model. Indicates if the indicated branch exists on the project (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a project is inheriting its project's branching model.
func (o ProjectBranchingModelDevelopmentOutput) BranchDoesNotExist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectBranchingModelDevelopment) *bool { return v.BranchDoesNotExist }).(pulumi.BoolPtrOutput)
}

func (o ProjectBranchingModelDevelopmentOutput) IsValid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectBranchingModelDevelopment) *bool { return v.IsValid }).(pulumi.BoolPtrOutput)
}

// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
func (o ProjectBranchingModelDevelopmentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectBranchingModelDevelopment) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
func (o ProjectBranchingModelDevelopmentOutput) UseMainbranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectBranchingModelDevelopment) *bool { return v.UseMainbranch }).(pulumi.BoolPtrOutput)
}

type ProjectBranchingModelDevelopmentPtrOutput struct{ *pulumi.OutputState }

func (ProjectBranchingModelDevelopmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectBranchingModelDevelopment)(nil)).Elem()
}

func (o ProjectBranchingModelDevelopmentPtrOutput) ToProjectBranchingModelDevelopmentPtrOutput() ProjectBranchingModelDevelopmentPtrOutput {
	return o
}

func (o ProjectBranchingModelDevelopmentPtrOutput) ToProjectBranchingModelDevelopmentPtrOutputWithContext(ctx context.Context) ProjectBranchingModelDevelopmentPtrOutput {
	return o
}

func (o ProjectBranchingModelDevelopmentPtrOutput) Elem() ProjectBranchingModelDevelopmentOutput {
	return o.ApplyT(func(v *ProjectBranchingModelDevelopment) ProjectBranchingModelDevelopment {
		if v != nil {
			return *v
		}
		var ret ProjectBranchingModelDevelopment
		return ret
	}).(ProjectBranchingModelDevelopmentOutput)
}

// Optional and only returned for a project's branching model. Indicates if the indicated branch exists on the project (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a project is inheriting its project's branching model.
func (o ProjectBranchingModelDevelopmentPtrOutput) BranchDoesNotExist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectBranchingModelDevelopment) *bool {
		if v == nil {
			return nil
		}
		return v.BranchDoesNotExist
	}).(pulumi.BoolPtrOutput)
}

func (o ProjectBranchingModelDevelopmentPtrOutput) IsValid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectBranchingModelDevelopment) *bool {
		if v == nil {
			return nil
		}
		return v.IsValid
	}).(pulumi.BoolPtrOutput)
}

// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
func (o ProjectBranchingModelDevelopmentPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectBranchingModelDevelopment) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
func (o ProjectBranchingModelDevelopmentPtrOutput) UseMainbranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectBranchingModelDevelopment) *bool {
		if v == nil {
			return nil
		}
		return v.UseMainbranch
	}).(pulumi.BoolPtrOutput)
}

type ProjectBranchingModelProduction struct {
	// Optional and only returned for a project's branching model. Indicates if the indicated branch exists on the project (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a project is inheriting its project's branching model.
	BranchDoesNotExist *bool `pulumi:"branchDoesNotExist"`
	// Indicates if branch is enabled or not.
	Enabled *bool `pulumi:"enabled"`
	IsValid *bool `pulumi:"isValid"`
	// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
	Name *string `pulumi:"name"`
	// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
	UseMainbranch *bool `pulumi:"useMainbranch"`
}

// ProjectBranchingModelProductionInput is an input type that accepts ProjectBranchingModelProductionArgs and ProjectBranchingModelProductionOutput values.
// You can construct a concrete instance of `ProjectBranchingModelProductionInput` via:
//
//	ProjectBranchingModelProductionArgs{...}
type ProjectBranchingModelProductionInput interface {
	pulumi.Input

	ToProjectBranchingModelProductionOutput() ProjectBranchingModelProductionOutput
	ToProjectBranchingModelProductionOutputWithContext(context.Context) ProjectBranchingModelProductionOutput
}

type ProjectBranchingModelProductionArgs struct {
	// Optional and only returned for a project's branching model. Indicates if the indicated branch exists on the project (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a project is inheriting its project's branching model.
	BranchDoesNotExist pulumi.BoolPtrInput `pulumi:"branchDoesNotExist"`
	// Indicates if branch is enabled or not.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	IsValid pulumi.BoolPtrInput `pulumi:"isValid"`
	// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
	UseMainbranch pulumi.BoolPtrInput `pulumi:"useMainbranch"`
}

func (ProjectBranchingModelProductionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBranchingModelProduction)(nil)).Elem()
}

func (i ProjectBranchingModelProductionArgs) ToProjectBranchingModelProductionOutput() ProjectBranchingModelProductionOutput {
	return i.ToProjectBranchingModelProductionOutputWithContext(context.Background())
}

func (i ProjectBranchingModelProductionArgs) ToProjectBranchingModelProductionOutputWithContext(ctx context.Context) ProjectBranchingModelProductionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBranchingModelProductionOutput)
}

func (i ProjectBranchingModelProductionArgs) ToProjectBranchingModelProductionPtrOutput() ProjectBranchingModelProductionPtrOutput {
	return i.ToProjectBranchingModelProductionPtrOutputWithContext(context.Background())
}

func (i ProjectBranchingModelProductionArgs) ToProjectBranchingModelProductionPtrOutputWithContext(ctx context.Context) ProjectBranchingModelProductionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBranchingModelProductionOutput).ToProjectBranchingModelProductionPtrOutputWithContext(ctx)
}

// ProjectBranchingModelProductionPtrInput is an input type that accepts ProjectBranchingModelProductionArgs, ProjectBranchingModelProductionPtr and ProjectBranchingModelProductionPtrOutput values.
// You can construct a concrete instance of `ProjectBranchingModelProductionPtrInput` via:
//
//	        ProjectBranchingModelProductionArgs{...}
//
//	or:
//
//	        nil
type ProjectBranchingModelProductionPtrInput interface {
	pulumi.Input

	ToProjectBranchingModelProductionPtrOutput() ProjectBranchingModelProductionPtrOutput
	ToProjectBranchingModelProductionPtrOutputWithContext(context.Context) ProjectBranchingModelProductionPtrOutput
}

type projectBranchingModelProductionPtrType ProjectBranchingModelProductionArgs

func ProjectBranchingModelProductionPtr(v *ProjectBranchingModelProductionArgs) ProjectBranchingModelProductionPtrInput {
	return (*projectBranchingModelProductionPtrType)(v)
}

func (*projectBranchingModelProductionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectBranchingModelProduction)(nil)).Elem()
}

func (i *projectBranchingModelProductionPtrType) ToProjectBranchingModelProductionPtrOutput() ProjectBranchingModelProductionPtrOutput {
	return i.ToProjectBranchingModelProductionPtrOutputWithContext(context.Background())
}

func (i *projectBranchingModelProductionPtrType) ToProjectBranchingModelProductionPtrOutputWithContext(ctx context.Context) ProjectBranchingModelProductionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBranchingModelProductionPtrOutput)
}

type ProjectBranchingModelProductionOutput struct{ *pulumi.OutputState }

func (ProjectBranchingModelProductionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectBranchingModelProduction)(nil)).Elem()
}

func (o ProjectBranchingModelProductionOutput) ToProjectBranchingModelProductionOutput() ProjectBranchingModelProductionOutput {
	return o
}

func (o ProjectBranchingModelProductionOutput) ToProjectBranchingModelProductionOutputWithContext(ctx context.Context) ProjectBranchingModelProductionOutput {
	return o
}

func (o ProjectBranchingModelProductionOutput) ToProjectBranchingModelProductionPtrOutput() ProjectBranchingModelProductionPtrOutput {
	return o.ToProjectBranchingModelProductionPtrOutputWithContext(context.Background())
}

func (o ProjectBranchingModelProductionOutput) ToProjectBranchingModelProductionPtrOutputWithContext(ctx context.Context) ProjectBranchingModelProductionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectBranchingModelProduction) *ProjectBranchingModelProduction {
		return &v
	}).(ProjectBranchingModelProductionPtrOutput)
}

// Optional and only returned for a project's branching model. Indicates if the indicated branch exists on the project (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a project is inheriting its project's branching model.
func (o ProjectBranchingModelProductionOutput) BranchDoesNotExist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectBranchingModelProduction) *bool { return v.BranchDoesNotExist }).(pulumi.BoolPtrOutput)
}

// Indicates if branch is enabled or not.
func (o ProjectBranchingModelProductionOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectBranchingModelProduction) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o ProjectBranchingModelProductionOutput) IsValid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectBranchingModelProduction) *bool { return v.IsValid }).(pulumi.BoolPtrOutput)
}

// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
func (o ProjectBranchingModelProductionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectBranchingModelProduction) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
func (o ProjectBranchingModelProductionOutput) UseMainbranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectBranchingModelProduction) *bool { return v.UseMainbranch }).(pulumi.BoolPtrOutput)
}

type ProjectBranchingModelProductionPtrOutput struct{ *pulumi.OutputState }

func (ProjectBranchingModelProductionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectBranchingModelProduction)(nil)).Elem()
}

func (o ProjectBranchingModelProductionPtrOutput) ToProjectBranchingModelProductionPtrOutput() ProjectBranchingModelProductionPtrOutput {
	return o
}

func (o ProjectBranchingModelProductionPtrOutput) ToProjectBranchingModelProductionPtrOutputWithContext(ctx context.Context) ProjectBranchingModelProductionPtrOutput {
	return o
}

func (o ProjectBranchingModelProductionPtrOutput) Elem() ProjectBranchingModelProductionOutput {
	return o.ApplyT(func(v *ProjectBranchingModelProduction) ProjectBranchingModelProduction {
		if v != nil {
			return *v
		}
		var ret ProjectBranchingModelProduction
		return ret
	}).(ProjectBranchingModelProductionOutput)
}

// Optional and only returned for a project's branching model. Indicates if the indicated branch exists on the project (`false`) or not (`true`). This is useful for determining a fallback to the mainbranch when a project is inheriting its project's branching model.
func (o ProjectBranchingModelProductionPtrOutput) BranchDoesNotExist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectBranchingModelProduction) *bool {
		if v == nil {
			return nil
		}
		return v.BranchDoesNotExist
	}).(pulumi.BoolPtrOutput)
}

// Indicates if branch is enabled or not.
func (o ProjectBranchingModelProductionPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectBranchingModelProduction) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o ProjectBranchingModelProductionPtrOutput) IsValid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectBranchingModelProduction) *bool {
		if v == nil {
			return nil
		}
		return v.IsValid
	}).(pulumi.BoolPtrOutput)
}

// The configured branch. It must be null when `useMainbranch` is true. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set).
func (o ProjectBranchingModelProductionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectBranchingModelProduction) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the name must be null or not provided. When `false` the name must contain a non-empty branch name.
func (o ProjectBranchingModelProductionPtrOutput) UseMainbranch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectBranchingModelProduction) *bool {
		if v == nil {
			return nil
		}
		return v.UseMainbranch
	}).(pulumi.BoolPtrOutput)
}

type ProjectLink struct {
	// An avatar link to a resource related to this object. See Avatar Below.
	Avatar *ProjectLinkAvatar `pulumi:"avatar"`
}

// ProjectLinkInput is an input type that accepts ProjectLinkArgs and ProjectLinkOutput values.
// You can construct a concrete instance of `ProjectLinkInput` via:
//
//	ProjectLinkArgs{...}
type ProjectLinkInput interface {
	pulumi.Input

	ToProjectLinkOutput() ProjectLinkOutput
	ToProjectLinkOutputWithContext(context.Context) ProjectLinkOutput
}

type ProjectLinkArgs struct {
	// An avatar link to a resource related to this object. See Avatar Below.
	Avatar ProjectLinkAvatarPtrInput `pulumi:"avatar"`
}

func (ProjectLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLink)(nil)).Elem()
}

func (i ProjectLinkArgs) ToProjectLinkOutput() ProjectLinkOutput {
	return i.ToProjectLinkOutputWithContext(context.Background())
}

func (i ProjectLinkArgs) ToProjectLinkOutputWithContext(ctx context.Context) ProjectLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLinkOutput)
}

func (i ProjectLinkArgs) ToProjectLinkPtrOutput() ProjectLinkPtrOutput {
	return i.ToProjectLinkPtrOutputWithContext(context.Background())
}

func (i ProjectLinkArgs) ToProjectLinkPtrOutputWithContext(ctx context.Context) ProjectLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLinkOutput).ToProjectLinkPtrOutputWithContext(ctx)
}

// ProjectLinkPtrInput is an input type that accepts ProjectLinkArgs, ProjectLinkPtr and ProjectLinkPtrOutput values.
// You can construct a concrete instance of `ProjectLinkPtrInput` via:
//
//	        ProjectLinkArgs{...}
//
//	or:
//
//	        nil
type ProjectLinkPtrInput interface {
	pulumi.Input

	ToProjectLinkPtrOutput() ProjectLinkPtrOutput
	ToProjectLinkPtrOutputWithContext(context.Context) ProjectLinkPtrOutput
}

type projectLinkPtrType ProjectLinkArgs

func ProjectLinkPtr(v *ProjectLinkArgs) ProjectLinkPtrInput {
	return (*projectLinkPtrType)(v)
}

func (*projectLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLink)(nil)).Elem()
}

func (i *projectLinkPtrType) ToProjectLinkPtrOutput() ProjectLinkPtrOutput {
	return i.ToProjectLinkPtrOutputWithContext(context.Background())
}

func (i *projectLinkPtrType) ToProjectLinkPtrOutputWithContext(ctx context.Context) ProjectLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLinkPtrOutput)
}

type ProjectLinkOutput struct{ *pulumi.OutputState }

func (ProjectLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLink)(nil)).Elem()
}

func (o ProjectLinkOutput) ToProjectLinkOutput() ProjectLinkOutput {
	return o
}

func (o ProjectLinkOutput) ToProjectLinkOutputWithContext(ctx context.Context) ProjectLinkOutput {
	return o
}

func (o ProjectLinkOutput) ToProjectLinkPtrOutput() ProjectLinkPtrOutput {
	return o.ToProjectLinkPtrOutputWithContext(context.Background())
}

func (o ProjectLinkOutput) ToProjectLinkPtrOutputWithContext(ctx context.Context) ProjectLinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectLink) *ProjectLink {
		return &v
	}).(ProjectLinkPtrOutput)
}

// An avatar link to a resource related to this object. See Avatar Below.
func (o ProjectLinkOutput) Avatar() ProjectLinkAvatarPtrOutput {
	return o.ApplyT(func(v ProjectLink) *ProjectLinkAvatar { return v.Avatar }).(ProjectLinkAvatarPtrOutput)
}

type ProjectLinkPtrOutput struct{ *pulumi.OutputState }

func (ProjectLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLink)(nil)).Elem()
}

func (o ProjectLinkPtrOutput) ToProjectLinkPtrOutput() ProjectLinkPtrOutput {
	return o
}

func (o ProjectLinkPtrOutput) ToProjectLinkPtrOutputWithContext(ctx context.Context) ProjectLinkPtrOutput {
	return o
}

func (o ProjectLinkPtrOutput) Elem() ProjectLinkOutput {
	return o.ApplyT(func(v *ProjectLink) ProjectLink {
		if v != nil {
			return *v
		}
		var ret ProjectLink
		return ret
	}).(ProjectLinkOutput)
}

// An avatar link to a resource related to this object. See Avatar Below.
func (o ProjectLinkPtrOutput) Avatar() ProjectLinkAvatarPtrOutput {
	return o.ApplyT(func(v *ProjectLink) *ProjectLinkAvatar {
		if v == nil {
			return nil
		}
		return v.Avatar
	}).(ProjectLinkAvatarPtrOutput)
}

type ProjectLinkAvatar struct {
	// href of the avatar.
	Href *string `pulumi:"href"`
}

// ProjectLinkAvatarInput is an input type that accepts ProjectLinkAvatarArgs and ProjectLinkAvatarOutput values.
// You can construct a concrete instance of `ProjectLinkAvatarInput` via:
//
//	ProjectLinkAvatarArgs{...}
type ProjectLinkAvatarInput interface {
	pulumi.Input

	ToProjectLinkAvatarOutput() ProjectLinkAvatarOutput
	ToProjectLinkAvatarOutputWithContext(context.Context) ProjectLinkAvatarOutput
}

type ProjectLinkAvatarArgs struct {
	// href of the avatar.
	Href pulumi.StringPtrInput `pulumi:"href"`
}

func (ProjectLinkAvatarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLinkAvatar)(nil)).Elem()
}

func (i ProjectLinkAvatarArgs) ToProjectLinkAvatarOutput() ProjectLinkAvatarOutput {
	return i.ToProjectLinkAvatarOutputWithContext(context.Background())
}

func (i ProjectLinkAvatarArgs) ToProjectLinkAvatarOutputWithContext(ctx context.Context) ProjectLinkAvatarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLinkAvatarOutput)
}

func (i ProjectLinkAvatarArgs) ToProjectLinkAvatarPtrOutput() ProjectLinkAvatarPtrOutput {
	return i.ToProjectLinkAvatarPtrOutputWithContext(context.Background())
}

func (i ProjectLinkAvatarArgs) ToProjectLinkAvatarPtrOutputWithContext(ctx context.Context) ProjectLinkAvatarPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLinkAvatarOutput).ToProjectLinkAvatarPtrOutputWithContext(ctx)
}

// ProjectLinkAvatarPtrInput is an input type that accepts ProjectLinkAvatarArgs, ProjectLinkAvatarPtr and ProjectLinkAvatarPtrOutput values.
// You can construct a concrete instance of `ProjectLinkAvatarPtrInput` via:
//
//	        ProjectLinkAvatarArgs{...}
//
//	or:
//
//	        nil
type ProjectLinkAvatarPtrInput interface {
	pulumi.Input

	ToProjectLinkAvatarPtrOutput() ProjectLinkAvatarPtrOutput
	ToProjectLinkAvatarPtrOutputWithContext(context.Context) ProjectLinkAvatarPtrOutput
}

type projectLinkAvatarPtrType ProjectLinkAvatarArgs

func ProjectLinkAvatarPtr(v *ProjectLinkAvatarArgs) ProjectLinkAvatarPtrInput {
	return (*projectLinkAvatarPtrType)(v)
}

func (*projectLinkAvatarPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLinkAvatar)(nil)).Elem()
}

func (i *projectLinkAvatarPtrType) ToProjectLinkAvatarPtrOutput() ProjectLinkAvatarPtrOutput {
	return i.ToProjectLinkAvatarPtrOutputWithContext(context.Background())
}

func (i *projectLinkAvatarPtrType) ToProjectLinkAvatarPtrOutputWithContext(ctx context.Context) ProjectLinkAvatarPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLinkAvatarPtrOutput)
}

type ProjectLinkAvatarOutput struct{ *pulumi.OutputState }

func (ProjectLinkAvatarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectLinkAvatar)(nil)).Elem()
}

func (o ProjectLinkAvatarOutput) ToProjectLinkAvatarOutput() ProjectLinkAvatarOutput {
	return o
}

func (o ProjectLinkAvatarOutput) ToProjectLinkAvatarOutputWithContext(ctx context.Context) ProjectLinkAvatarOutput {
	return o
}

func (o ProjectLinkAvatarOutput) ToProjectLinkAvatarPtrOutput() ProjectLinkAvatarPtrOutput {
	return o.ToProjectLinkAvatarPtrOutputWithContext(context.Background())
}

func (o ProjectLinkAvatarOutput) ToProjectLinkAvatarPtrOutputWithContext(ctx context.Context) ProjectLinkAvatarPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectLinkAvatar) *ProjectLinkAvatar {
		return &v
	}).(ProjectLinkAvatarPtrOutput)
}

// href of the avatar.
func (o ProjectLinkAvatarOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectLinkAvatar) *string { return v.Href }).(pulumi.StringPtrOutput)
}

type ProjectLinkAvatarPtrOutput struct{ *pulumi.OutputState }

func (ProjectLinkAvatarPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLinkAvatar)(nil)).Elem()
}

func (o ProjectLinkAvatarPtrOutput) ToProjectLinkAvatarPtrOutput() ProjectLinkAvatarPtrOutput {
	return o
}

func (o ProjectLinkAvatarPtrOutput) ToProjectLinkAvatarPtrOutputWithContext(ctx context.Context) ProjectLinkAvatarPtrOutput {
	return o
}

func (o ProjectLinkAvatarPtrOutput) Elem() ProjectLinkAvatarOutput {
	return o.ApplyT(func(v *ProjectLinkAvatar) ProjectLinkAvatar {
		if v != nil {
			return *v
		}
		var ret ProjectLinkAvatar
		return ret
	}).(ProjectLinkAvatarOutput)
}

// href of the avatar.
func (o ProjectLinkAvatarPtrOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectLinkAvatar) *string {
		if v == nil {
			return nil
		}
		return v.Href
	}).(pulumi.StringPtrOutput)
}

type RepositoryLink struct {
	// An avatar link to a resource related to this object. See Avatar Below.
	Avatar *RepositoryLinkAvatar `pulumi:"avatar"`
}

// RepositoryLinkInput is an input type that accepts RepositoryLinkArgs and RepositoryLinkOutput values.
// You can construct a concrete instance of `RepositoryLinkInput` via:
//
//	RepositoryLinkArgs{...}
type RepositoryLinkInput interface {
	pulumi.Input

	ToRepositoryLinkOutput() RepositoryLinkOutput
	ToRepositoryLinkOutputWithContext(context.Context) RepositoryLinkOutput
}

type RepositoryLinkArgs struct {
	// An avatar link to a resource related to this object. See Avatar Below.
	Avatar RepositoryLinkAvatarPtrInput `pulumi:"avatar"`
}

func (RepositoryLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryLink)(nil)).Elem()
}

func (i RepositoryLinkArgs) ToRepositoryLinkOutput() RepositoryLinkOutput {
	return i.ToRepositoryLinkOutputWithContext(context.Background())
}

func (i RepositoryLinkArgs) ToRepositoryLinkOutputWithContext(ctx context.Context) RepositoryLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLinkOutput)
}

func (i RepositoryLinkArgs) ToRepositoryLinkPtrOutput() RepositoryLinkPtrOutput {
	return i.ToRepositoryLinkPtrOutputWithContext(context.Background())
}

func (i RepositoryLinkArgs) ToRepositoryLinkPtrOutputWithContext(ctx context.Context) RepositoryLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLinkOutput).ToRepositoryLinkPtrOutputWithContext(ctx)
}

// RepositoryLinkPtrInput is an input type that accepts RepositoryLinkArgs, RepositoryLinkPtr and RepositoryLinkPtrOutput values.
// You can construct a concrete instance of `RepositoryLinkPtrInput` via:
//
//	        RepositoryLinkArgs{...}
//
//	or:
//
//	        nil
type RepositoryLinkPtrInput interface {
	pulumi.Input

	ToRepositoryLinkPtrOutput() RepositoryLinkPtrOutput
	ToRepositoryLinkPtrOutputWithContext(context.Context) RepositoryLinkPtrOutput
}

type repositoryLinkPtrType RepositoryLinkArgs

func RepositoryLinkPtr(v *RepositoryLinkArgs) RepositoryLinkPtrInput {
	return (*repositoryLinkPtrType)(v)
}

func (*repositoryLinkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryLink)(nil)).Elem()
}

func (i *repositoryLinkPtrType) ToRepositoryLinkPtrOutput() RepositoryLinkPtrOutput {
	return i.ToRepositoryLinkPtrOutputWithContext(context.Background())
}

func (i *repositoryLinkPtrType) ToRepositoryLinkPtrOutputWithContext(ctx context.Context) RepositoryLinkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLinkPtrOutput)
}

type RepositoryLinkOutput struct{ *pulumi.OutputState }

func (RepositoryLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryLink)(nil)).Elem()
}

func (o RepositoryLinkOutput) ToRepositoryLinkOutput() RepositoryLinkOutput {
	return o
}

func (o RepositoryLinkOutput) ToRepositoryLinkOutputWithContext(ctx context.Context) RepositoryLinkOutput {
	return o
}

func (o RepositoryLinkOutput) ToRepositoryLinkPtrOutput() RepositoryLinkPtrOutput {
	return o.ToRepositoryLinkPtrOutputWithContext(context.Background())
}

func (o RepositoryLinkOutput) ToRepositoryLinkPtrOutputWithContext(ctx context.Context) RepositoryLinkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryLink) *RepositoryLink {
		return &v
	}).(RepositoryLinkPtrOutput)
}

// An avatar link to a resource related to this object. See Avatar Below.
func (o RepositoryLinkOutput) Avatar() RepositoryLinkAvatarPtrOutput {
	return o.ApplyT(func(v RepositoryLink) *RepositoryLinkAvatar { return v.Avatar }).(RepositoryLinkAvatarPtrOutput)
}

type RepositoryLinkPtrOutput struct{ *pulumi.OutputState }

func (RepositoryLinkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryLink)(nil)).Elem()
}

func (o RepositoryLinkPtrOutput) ToRepositoryLinkPtrOutput() RepositoryLinkPtrOutput {
	return o
}

func (o RepositoryLinkPtrOutput) ToRepositoryLinkPtrOutputWithContext(ctx context.Context) RepositoryLinkPtrOutput {
	return o
}

func (o RepositoryLinkPtrOutput) Elem() RepositoryLinkOutput {
	return o.ApplyT(func(v *RepositoryLink) RepositoryLink {
		if v != nil {
			return *v
		}
		var ret RepositoryLink
		return ret
	}).(RepositoryLinkOutput)
}

// An avatar link to a resource related to this object. See Avatar Below.
func (o RepositoryLinkPtrOutput) Avatar() RepositoryLinkAvatarPtrOutput {
	return o.ApplyT(func(v *RepositoryLink) *RepositoryLinkAvatar {
		if v == nil {
			return nil
		}
		return v.Avatar
	}).(RepositoryLinkAvatarPtrOutput)
}

type RepositoryLinkAvatar struct {
	// href of the avatar.
	Href *string `pulumi:"href"`
}

// RepositoryLinkAvatarInput is an input type that accepts RepositoryLinkAvatarArgs and RepositoryLinkAvatarOutput values.
// You can construct a concrete instance of `RepositoryLinkAvatarInput` via:
//
//	RepositoryLinkAvatarArgs{...}
type RepositoryLinkAvatarInput interface {
	pulumi.Input

	ToRepositoryLinkAvatarOutput() RepositoryLinkAvatarOutput
	ToRepositoryLinkAvatarOutputWithContext(context.Context) RepositoryLinkAvatarOutput
}

type RepositoryLinkAvatarArgs struct {
	// href of the avatar.
	Href pulumi.StringPtrInput `pulumi:"href"`
}

func (RepositoryLinkAvatarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryLinkAvatar)(nil)).Elem()
}

func (i RepositoryLinkAvatarArgs) ToRepositoryLinkAvatarOutput() RepositoryLinkAvatarOutput {
	return i.ToRepositoryLinkAvatarOutputWithContext(context.Background())
}

func (i RepositoryLinkAvatarArgs) ToRepositoryLinkAvatarOutputWithContext(ctx context.Context) RepositoryLinkAvatarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLinkAvatarOutput)
}

func (i RepositoryLinkAvatarArgs) ToRepositoryLinkAvatarPtrOutput() RepositoryLinkAvatarPtrOutput {
	return i.ToRepositoryLinkAvatarPtrOutputWithContext(context.Background())
}

func (i RepositoryLinkAvatarArgs) ToRepositoryLinkAvatarPtrOutputWithContext(ctx context.Context) RepositoryLinkAvatarPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLinkAvatarOutput).ToRepositoryLinkAvatarPtrOutputWithContext(ctx)
}

// RepositoryLinkAvatarPtrInput is an input type that accepts RepositoryLinkAvatarArgs, RepositoryLinkAvatarPtr and RepositoryLinkAvatarPtrOutput values.
// You can construct a concrete instance of `RepositoryLinkAvatarPtrInput` via:
//
//	        RepositoryLinkAvatarArgs{...}
//
//	or:
//
//	        nil
type RepositoryLinkAvatarPtrInput interface {
	pulumi.Input

	ToRepositoryLinkAvatarPtrOutput() RepositoryLinkAvatarPtrOutput
	ToRepositoryLinkAvatarPtrOutputWithContext(context.Context) RepositoryLinkAvatarPtrOutput
}

type repositoryLinkAvatarPtrType RepositoryLinkAvatarArgs

func RepositoryLinkAvatarPtr(v *RepositoryLinkAvatarArgs) RepositoryLinkAvatarPtrInput {
	return (*repositoryLinkAvatarPtrType)(v)
}

func (*repositoryLinkAvatarPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryLinkAvatar)(nil)).Elem()
}

func (i *repositoryLinkAvatarPtrType) ToRepositoryLinkAvatarPtrOutput() RepositoryLinkAvatarPtrOutput {
	return i.ToRepositoryLinkAvatarPtrOutputWithContext(context.Background())
}

func (i *repositoryLinkAvatarPtrType) ToRepositoryLinkAvatarPtrOutputWithContext(ctx context.Context) RepositoryLinkAvatarPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryLinkAvatarPtrOutput)
}

type RepositoryLinkAvatarOutput struct{ *pulumi.OutputState }

func (RepositoryLinkAvatarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryLinkAvatar)(nil)).Elem()
}

func (o RepositoryLinkAvatarOutput) ToRepositoryLinkAvatarOutput() RepositoryLinkAvatarOutput {
	return o
}

func (o RepositoryLinkAvatarOutput) ToRepositoryLinkAvatarOutputWithContext(ctx context.Context) RepositoryLinkAvatarOutput {
	return o
}

func (o RepositoryLinkAvatarOutput) ToRepositoryLinkAvatarPtrOutput() RepositoryLinkAvatarPtrOutput {
	return o.ToRepositoryLinkAvatarPtrOutputWithContext(context.Background())
}

func (o RepositoryLinkAvatarOutput) ToRepositoryLinkAvatarPtrOutputWithContext(ctx context.Context) RepositoryLinkAvatarPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryLinkAvatar) *RepositoryLinkAvatar {
		return &v
	}).(RepositoryLinkAvatarPtrOutput)
}

// href of the avatar.
func (o RepositoryLinkAvatarOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryLinkAvatar) *string { return v.Href }).(pulumi.StringPtrOutput)
}

type RepositoryLinkAvatarPtrOutput struct{ *pulumi.OutputState }

func (RepositoryLinkAvatarPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryLinkAvatar)(nil)).Elem()
}

func (o RepositoryLinkAvatarPtrOutput) ToRepositoryLinkAvatarPtrOutput() RepositoryLinkAvatarPtrOutput {
	return o
}

func (o RepositoryLinkAvatarPtrOutput) ToRepositoryLinkAvatarPtrOutputWithContext(ctx context.Context) RepositoryLinkAvatarPtrOutput {
	return o
}

func (o RepositoryLinkAvatarPtrOutput) Elem() RepositoryLinkAvatarOutput {
	return o.ApplyT(func(v *RepositoryLinkAvatar) RepositoryLinkAvatar {
		if v != nil {
			return *v
		}
		var ret RepositoryLinkAvatar
		return ret
	}).(RepositoryLinkAvatarOutput)
}

// href of the avatar.
func (o RepositoryLinkAvatarPtrOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryLinkAvatar) *string {
		if v == nil {
			return nil
		}
		return v.Href
	}).(pulumi.StringPtrOutput)
}

type GetCurrentUserEmail struct {
	// The email address.
	Email string `pulumi:"email"`
	// Whether the email is confirmed.
	IsConfirmed bool `pulumi:"isConfirmed"`
	// Whether is primary email for the user.
	IsPrimary bool `pulumi:"isPrimary"`
}

// GetCurrentUserEmailInput is an input type that accepts GetCurrentUserEmailArgs and GetCurrentUserEmailOutput values.
// You can construct a concrete instance of `GetCurrentUserEmailInput` via:
//
//	GetCurrentUserEmailArgs{...}
type GetCurrentUserEmailInput interface {
	pulumi.Input

	ToGetCurrentUserEmailOutput() GetCurrentUserEmailOutput
	ToGetCurrentUserEmailOutputWithContext(context.Context) GetCurrentUserEmailOutput
}

type GetCurrentUserEmailArgs struct {
	// The email address.
	Email pulumi.StringInput `pulumi:"email"`
	// Whether the email is confirmed.
	IsConfirmed pulumi.BoolInput `pulumi:"isConfirmed"`
	// Whether is primary email for the user.
	IsPrimary pulumi.BoolInput `pulumi:"isPrimary"`
}

func (GetCurrentUserEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCurrentUserEmail)(nil)).Elem()
}

func (i GetCurrentUserEmailArgs) ToGetCurrentUserEmailOutput() GetCurrentUserEmailOutput {
	return i.ToGetCurrentUserEmailOutputWithContext(context.Background())
}

func (i GetCurrentUserEmailArgs) ToGetCurrentUserEmailOutputWithContext(ctx context.Context) GetCurrentUserEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCurrentUserEmailOutput)
}

// GetCurrentUserEmailArrayInput is an input type that accepts GetCurrentUserEmailArray and GetCurrentUserEmailArrayOutput values.
// You can construct a concrete instance of `GetCurrentUserEmailArrayInput` via:
//
//	GetCurrentUserEmailArray{ GetCurrentUserEmailArgs{...} }
type GetCurrentUserEmailArrayInput interface {
	pulumi.Input

	ToGetCurrentUserEmailArrayOutput() GetCurrentUserEmailArrayOutput
	ToGetCurrentUserEmailArrayOutputWithContext(context.Context) GetCurrentUserEmailArrayOutput
}

type GetCurrentUserEmailArray []GetCurrentUserEmailInput

func (GetCurrentUserEmailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCurrentUserEmail)(nil)).Elem()
}

func (i GetCurrentUserEmailArray) ToGetCurrentUserEmailArrayOutput() GetCurrentUserEmailArrayOutput {
	return i.ToGetCurrentUserEmailArrayOutputWithContext(context.Background())
}

func (i GetCurrentUserEmailArray) ToGetCurrentUserEmailArrayOutputWithContext(ctx context.Context) GetCurrentUserEmailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCurrentUserEmailArrayOutput)
}

type GetCurrentUserEmailOutput struct{ *pulumi.OutputState }

func (GetCurrentUserEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCurrentUserEmail)(nil)).Elem()
}

func (o GetCurrentUserEmailOutput) ToGetCurrentUserEmailOutput() GetCurrentUserEmailOutput {
	return o
}

func (o GetCurrentUserEmailOutput) ToGetCurrentUserEmailOutputWithContext(ctx context.Context) GetCurrentUserEmailOutput {
	return o
}

// The email address.
func (o GetCurrentUserEmailOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetCurrentUserEmail) string { return v.Email }).(pulumi.StringOutput)
}

// Whether the email is confirmed.
func (o GetCurrentUserEmailOutput) IsConfirmed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCurrentUserEmail) bool { return v.IsConfirmed }).(pulumi.BoolOutput)
}

// Whether is primary email for the user.
func (o GetCurrentUserEmailOutput) IsPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCurrentUserEmail) bool { return v.IsPrimary }).(pulumi.BoolOutput)
}

type GetCurrentUserEmailArrayOutput struct{ *pulumi.OutputState }

func (GetCurrentUserEmailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCurrentUserEmail)(nil)).Elem()
}

func (o GetCurrentUserEmailArrayOutput) ToGetCurrentUserEmailArrayOutput() GetCurrentUserEmailArrayOutput {
	return o
}

func (o GetCurrentUserEmailArrayOutput) ToGetCurrentUserEmailArrayOutputWithContext(ctx context.Context) GetCurrentUserEmailArrayOutput {
	return o
}

func (o GetCurrentUserEmailArrayOutput) Index(i pulumi.IntInput) GetCurrentUserEmailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCurrentUserEmail {
		return vs[0].([]GetCurrentUserEmail)[vs[1].(int)]
	}).(GetCurrentUserEmailOutput)
}

type GetGroupMembersGroupMember struct {
	// The User display name.
	DisplayName string `pulumi:"displayName"`
	// The Username.
	Username string `pulumi:"username"`
	// User UUID.
	Uuid string `pulumi:"uuid"`
}

// GetGroupMembersGroupMemberInput is an input type that accepts GetGroupMembersGroupMemberArgs and GetGroupMembersGroupMemberOutput values.
// You can construct a concrete instance of `GetGroupMembersGroupMemberInput` via:
//
//	GetGroupMembersGroupMemberArgs{...}
type GetGroupMembersGroupMemberInput interface {
	pulumi.Input

	ToGetGroupMembersGroupMemberOutput() GetGroupMembersGroupMemberOutput
	ToGetGroupMembersGroupMemberOutputWithContext(context.Context) GetGroupMembersGroupMemberOutput
}

type GetGroupMembersGroupMemberArgs struct {
	// The User display name.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The Username.
	Username pulumi.StringInput `pulumi:"username"`
	// User UUID.
	Uuid pulumi.StringInput `pulumi:"uuid"`
}

func (GetGroupMembersGroupMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembersGroupMember)(nil)).Elem()
}

func (i GetGroupMembersGroupMemberArgs) ToGetGroupMembersGroupMemberOutput() GetGroupMembersGroupMemberOutput {
	return i.ToGetGroupMembersGroupMemberOutputWithContext(context.Background())
}

func (i GetGroupMembersGroupMemberArgs) ToGetGroupMembersGroupMemberOutputWithContext(ctx context.Context) GetGroupMembersGroupMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembersGroupMemberOutput)
}

// GetGroupMembersGroupMemberArrayInput is an input type that accepts GetGroupMembersGroupMemberArray and GetGroupMembersGroupMemberArrayOutput values.
// You can construct a concrete instance of `GetGroupMembersGroupMemberArrayInput` via:
//
//	GetGroupMembersGroupMemberArray{ GetGroupMembersGroupMemberArgs{...} }
type GetGroupMembersGroupMemberArrayInput interface {
	pulumi.Input

	ToGetGroupMembersGroupMemberArrayOutput() GetGroupMembersGroupMemberArrayOutput
	ToGetGroupMembersGroupMemberArrayOutputWithContext(context.Context) GetGroupMembersGroupMemberArrayOutput
}

type GetGroupMembersGroupMemberArray []GetGroupMembersGroupMemberInput

func (GetGroupMembersGroupMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembersGroupMember)(nil)).Elem()
}

func (i GetGroupMembersGroupMemberArray) ToGetGroupMembersGroupMemberArrayOutput() GetGroupMembersGroupMemberArrayOutput {
	return i.ToGetGroupMembersGroupMemberArrayOutputWithContext(context.Background())
}

func (i GetGroupMembersGroupMemberArray) ToGetGroupMembersGroupMemberArrayOutputWithContext(ctx context.Context) GetGroupMembersGroupMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembersGroupMemberArrayOutput)
}

type GetGroupMembersGroupMemberOutput struct{ *pulumi.OutputState }

func (GetGroupMembersGroupMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembersGroupMember)(nil)).Elem()
}

func (o GetGroupMembersGroupMemberOutput) ToGetGroupMembersGroupMemberOutput() GetGroupMembersGroupMemberOutput {
	return o
}

func (o GetGroupMembersGroupMemberOutput) ToGetGroupMembersGroupMemberOutputWithContext(ctx context.Context) GetGroupMembersGroupMemberOutput {
	return o
}

// The User display name.
func (o GetGroupMembersGroupMemberOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembersGroupMember) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The Username.
func (o GetGroupMembersGroupMemberOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembersGroupMember) string { return v.Username }).(pulumi.StringOutput)
}

// User UUID.
func (o GetGroupMembersGroupMemberOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembersGroupMember) string { return v.Uuid }).(pulumi.StringOutput)
}

type GetGroupMembersGroupMemberArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembersGroupMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembersGroupMember)(nil)).Elem()
}

func (o GetGroupMembersGroupMemberArrayOutput) ToGetGroupMembersGroupMemberArrayOutput() GetGroupMembersGroupMemberArrayOutput {
	return o
}

func (o GetGroupMembersGroupMemberArrayOutput) ToGetGroupMembersGroupMemberArrayOutputWithContext(ctx context.Context) GetGroupMembersGroupMemberArrayOutput {
	return o
}

func (o GetGroupMembersGroupMemberArrayOutput) Index(i pulumi.IntInput) GetGroupMembersGroupMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembersGroupMember {
		return vs[0].([]GetGroupMembersGroupMember)[vs[1].(int)]
	}).(GetGroupMembersGroupMemberOutput)
}

type GetGroupsGroup struct {
	// Whether to automatically add users the groups
	AutoAdd bool `pulumi:"autoAdd"`
	// Whether to disable email forwarding for group.
	EmailForwardingDisabled bool `pulumi:"emailForwardingDisabled"`
	// The name of the groups.
	Name string `pulumi:"name"`
	// One of `read`, `write`, and `admin`.
	Permission string `pulumi:"permission"`
	// The groups's slug.
	Slug string `pulumi:"slug"`
}

// GetGroupsGroupInput is an input type that accepts GetGroupsGroupArgs and GetGroupsGroupOutput values.
// You can construct a concrete instance of `GetGroupsGroupInput` via:
//
//	GetGroupsGroupArgs{...}
type GetGroupsGroupInput interface {
	pulumi.Input

	ToGetGroupsGroupOutput() GetGroupsGroupOutput
	ToGetGroupsGroupOutputWithContext(context.Context) GetGroupsGroupOutput
}

type GetGroupsGroupArgs struct {
	// Whether to automatically add users the groups
	AutoAdd pulumi.BoolInput `pulumi:"autoAdd"`
	// Whether to disable email forwarding for group.
	EmailForwardingDisabled pulumi.BoolInput `pulumi:"emailForwardingDisabled"`
	// The name of the groups.
	Name pulumi.StringInput `pulumi:"name"`
	// One of `read`, `write`, and `admin`.
	Permission pulumi.StringInput `pulumi:"permission"`
	// The groups's slug.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return i.ToGetGroupsGroupOutputWithContext(context.Background())
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupOutput)
}

// GetGroupsGroupArrayInput is an input type that accepts GetGroupsGroupArray and GetGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetGroupsGroupArrayInput` via:
//
//	GetGroupsGroupArray{ GetGroupsGroupArgs{...} }
type GetGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput
	ToGetGroupsGroupArrayOutputWithContext(context.Context) GetGroupsGroupArrayOutput
}

type GetGroupsGroupArray []GetGroupsGroupInput

func (GetGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return i.ToGetGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupArrayOutput)
}

type GetGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return o
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return o
}

// Whether to automatically add users the groups
func (o GetGroupsGroupOutput) AutoAdd() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupsGroup) bool { return v.AutoAdd }).(pulumi.BoolOutput)
}

// Whether to disable email forwarding for group.
func (o GetGroupsGroupOutput) EmailForwardingDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupsGroup) bool { return v.EmailForwardingDisabled }).(pulumi.BoolOutput)
}

// The name of the groups.
func (o GetGroupsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Name }).(pulumi.StringOutput)
}

// One of `read`, `write`, and `admin`.
func (o GetGroupsGroupOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Permission }).(pulumi.StringOutput)
}

// The groups's slug.
func (o GetGroupsGroupOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Slug }).(pulumi.StringOutput)
}

type GetGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsGroup {
		return vs[0].([]GetGroupsGroup)[vs[1].(int)]
	}).(GetGroupsGroupOutput)
}

type GetHookTypesHookType struct {
	// The category this event belongs to.
	Category string `pulumi:"category"`
	// More detailed description of the webhook event type.
	Description string `pulumi:"description"`
	// The event identifier.
	Event string `pulumi:"event"`
	// Summary of the webhook event type.
	Label string `pulumi:"label"`
}

// GetHookTypesHookTypeInput is an input type that accepts GetHookTypesHookTypeArgs and GetHookTypesHookTypeOutput values.
// You can construct a concrete instance of `GetHookTypesHookTypeInput` via:
//
//	GetHookTypesHookTypeArgs{...}
type GetHookTypesHookTypeInput interface {
	pulumi.Input

	ToGetHookTypesHookTypeOutput() GetHookTypesHookTypeOutput
	ToGetHookTypesHookTypeOutputWithContext(context.Context) GetHookTypesHookTypeOutput
}

type GetHookTypesHookTypeArgs struct {
	// The category this event belongs to.
	Category pulumi.StringInput `pulumi:"category"`
	// More detailed description of the webhook event type.
	Description pulumi.StringInput `pulumi:"description"`
	// The event identifier.
	Event pulumi.StringInput `pulumi:"event"`
	// Summary of the webhook event type.
	Label pulumi.StringInput `pulumi:"label"`
}

func (GetHookTypesHookTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHookTypesHookType)(nil)).Elem()
}

func (i GetHookTypesHookTypeArgs) ToGetHookTypesHookTypeOutput() GetHookTypesHookTypeOutput {
	return i.ToGetHookTypesHookTypeOutputWithContext(context.Background())
}

func (i GetHookTypesHookTypeArgs) ToGetHookTypesHookTypeOutputWithContext(ctx context.Context) GetHookTypesHookTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHookTypesHookTypeOutput)
}

// GetHookTypesHookTypeArrayInput is an input type that accepts GetHookTypesHookTypeArray and GetHookTypesHookTypeArrayOutput values.
// You can construct a concrete instance of `GetHookTypesHookTypeArrayInput` via:
//
//	GetHookTypesHookTypeArray{ GetHookTypesHookTypeArgs{...} }
type GetHookTypesHookTypeArrayInput interface {
	pulumi.Input

	ToGetHookTypesHookTypeArrayOutput() GetHookTypesHookTypeArrayOutput
	ToGetHookTypesHookTypeArrayOutputWithContext(context.Context) GetHookTypesHookTypeArrayOutput
}

type GetHookTypesHookTypeArray []GetHookTypesHookTypeInput

func (GetHookTypesHookTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHookTypesHookType)(nil)).Elem()
}

func (i GetHookTypesHookTypeArray) ToGetHookTypesHookTypeArrayOutput() GetHookTypesHookTypeArrayOutput {
	return i.ToGetHookTypesHookTypeArrayOutputWithContext(context.Background())
}

func (i GetHookTypesHookTypeArray) ToGetHookTypesHookTypeArrayOutputWithContext(ctx context.Context) GetHookTypesHookTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHookTypesHookTypeArrayOutput)
}

type GetHookTypesHookTypeOutput struct{ *pulumi.OutputState }

func (GetHookTypesHookTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHookTypesHookType)(nil)).Elem()
}

func (o GetHookTypesHookTypeOutput) ToGetHookTypesHookTypeOutput() GetHookTypesHookTypeOutput {
	return o
}

func (o GetHookTypesHookTypeOutput) ToGetHookTypesHookTypeOutputWithContext(ctx context.Context) GetHookTypesHookTypeOutput {
	return o
}

// The category this event belongs to.
func (o GetHookTypesHookTypeOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v GetHookTypesHookType) string { return v.Category }).(pulumi.StringOutput)
}

// More detailed description of the webhook event type.
func (o GetHookTypesHookTypeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetHookTypesHookType) string { return v.Description }).(pulumi.StringOutput)
}

// The event identifier.
func (o GetHookTypesHookTypeOutput) Event() pulumi.StringOutput {
	return o.ApplyT(func(v GetHookTypesHookType) string { return v.Event }).(pulumi.StringOutput)
}

// Summary of the webhook event type.
func (o GetHookTypesHookTypeOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetHookTypesHookType) string { return v.Label }).(pulumi.StringOutput)
}

type GetHookTypesHookTypeArrayOutput struct{ *pulumi.OutputState }

func (GetHookTypesHookTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHookTypesHookType)(nil)).Elem()
}

func (o GetHookTypesHookTypeArrayOutput) ToGetHookTypesHookTypeArrayOutput() GetHookTypesHookTypeArrayOutput {
	return o
}

func (o GetHookTypesHookTypeArrayOutput) ToGetHookTypesHookTypeArrayOutputWithContext(ctx context.Context) GetHookTypesHookTypeArrayOutput {
	return o
}

func (o GetHookTypesHookTypeArrayOutput) Index(i pulumi.IntInput) GetHookTypesHookTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetHookTypesHookType {
		return vs[0].([]GetHookTypesHookType)[vs[1].(int)]
	}).(GetHookTypesHookTypeOutput)
}

type GetIpRangesRange struct {
	// The CIDR of the range.
	Cidr string `pulumi:"cidr"`
	// A Set of directions (Ingress/Egress) the range is associated with.
	Directions []string `pulumi:"directions"`
	// More mask of the range.
	Mask string `pulumi:"mask"`
	// The make length of the range.
	MaskLen int `pulumi:"maskLen"`
	// The network of the range.
	Network string `pulumi:"network"`
	// The allowed perimeter of the range.
	Perimeter string `pulumi:"perimeter"`
	// A Set of Atlasian products (Bitbucket, Jira, etc) the range is associated with.
	Products []string `pulumi:"products"`
	// A Set of regions the range is associated with.
	Regions []string `pulumi:"regions"`
}

// GetIpRangesRangeInput is an input type that accepts GetIpRangesRangeArgs and GetIpRangesRangeOutput values.
// You can construct a concrete instance of `GetIpRangesRangeInput` via:
//
//	GetIpRangesRangeArgs{...}
type GetIpRangesRangeInput interface {
	pulumi.Input

	ToGetIpRangesRangeOutput() GetIpRangesRangeOutput
	ToGetIpRangesRangeOutputWithContext(context.Context) GetIpRangesRangeOutput
}

type GetIpRangesRangeArgs struct {
	// The CIDR of the range.
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// A Set of directions (Ingress/Egress) the range is associated with.
	Directions pulumi.StringArrayInput `pulumi:"directions"`
	// More mask of the range.
	Mask pulumi.StringInput `pulumi:"mask"`
	// The make length of the range.
	MaskLen pulumi.IntInput `pulumi:"maskLen"`
	// The network of the range.
	Network pulumi.StringInput `pulumi:"network"`
	// The allowed perimeter of the range.
	Perimeter pulumi.StringInput `pulumi:"perimeter"`
	// A Set of Atlasian products (Bitbucket, Jira, etc) the range is associated with.
	Products pulumi.StringArrayInput `pulumi:"products"`
	// A Set of regions the range is associated with.
	Regions pulumi.StringArrayInput `pulumi:"regions"`
}

func (GetIpRangesRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpRangesRange)(nil)).Elem()
}

func (i GetIpRangesRangeArgs) ToGetIpRangesRangeOutput() GetIpRangesRangeOutput {
	return i.ToGetIpRangesRangeOutputWithContext(context.Background())
}

func (i GetIpRangesRangeArgs) ToGetIpRangesRangeOutputWithContext(ctx context.Context) GetIpRangesRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpRangesRangeOutput)
}

// GetIpRangesRangeArrayInput is an input type that accepts GetIpRangesRangeArray and GetIpRangesRangeArrayOutput values.
// You can construct a concrete instance of `GetIpRangesRangeArrayInput` via:
//
//	GetIpRangesRangeArray{ GetIpRangesRangeArgs{...} }
type GetIpRangesRangeArrayInput interface {
	pulumi.Input

	ToGetIpRangesRangeArrayOutput() GetIpRangesRangeArrayOutput
	ToGetIpRangesRangeArrayOutputWithContext(context.Context) GetIpRangesRangeArrayOutput
}

type GetIpRangesRangeArray []GetIpRangesRangeInput

func (GetIpRangesRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpRangesRange)(nil)).Elem()
}

func (i GetIpRangesRangeArray) ToGetIpRangesRangeArrayOutput() GetIpRangesRangeArrayOutput {
	return i.ToGetIpRangesRangeArrayOutputWithContext(context.Background())
}

func (i GetIpRangesRangeArray) ToGetIpRangesRangeArrayOutputWithContext(ctx context.Context) GetIpRangesRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpRangesRangeArrayOutput)
}

type GetIpRangesRangeOutput struct{ *pulumi.OutputState }

func (GetIpRangesRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpRangesRange)(nil)).Elem()
}

func (o GetIpRangesRangeOutput) ToGetIpRangesRangeOutput() GetIpRangesRangeOutput {
	return o
}

func (o GetIpRangesRangeOutput) ToGetIpRangesRangeOutputWithContext(ctx context.Context) GetIpRangesRangeOutput {
	return o
}

// The CIDR of the range.
func (o GetIpRangesRangeOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpRangesRange) string { return v.Cidr }).(pulumi.StringOutput)
}

// A Set of directions (Ingress/Egress) the range is associated with.
func (o GetIpRangesRangeOutput) Directions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIpRangesRange) []string { return v.Directions }).(pulumi.StringArrayOutput)
}

// More mask of the range.
func (o GetIpRangesRangeOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpRangesRange) string { return v.Mask }).(pulumi.StringOutput)
}

// The make length of the range.
func (o GetIpRangesRangeOutput) MaskLen() pulumi.IntOutput {
	return o.ApplyT(func(v GetIpRangesRange) int { return v.MaskLen }).(pulumi.IntOutput)
}

// The network of the range.
func (o GetIpRangesRangeOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpRangesRange) string { return v.Network }).(pulumi.StringOutput)
}

// The allowed perimeter of the range.
func (o GetIpRangesRangeOutput) Perimeter() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpRangesRange) string { return v.Perimeter }).(pulumi.StringOutput)
}

// A Set of Atlasian products (Bitbucket, Jira, etc) the range is associated with.
func (o GetIpRangesRangeOutput) Products() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIpRangesRange) []string { return v.Products }).(pulumi.StringArrayOutput)
}

// A Set of regions the range is associated with.
func (o GetIpRangesRangeOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetIpRangesRange) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

type GetIpRangesRangeArrayOutput struct{ *pulumi.OutputState }

func (GetIpRangesRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpRangesRange)(nil)).Elem()
}

func (o GetIpRangesRangeArrayOutput) ToGetIpRangesRangeArrayOutput() GetIpRangesRangeArrayOutput {
	return o
}

func (o GetIpRangesRangeArrayOutput) ToGetIpRangesRangeArrayOutputWithContext(ctx context.Context) GetIpRangesRangeArrayOutput {
	return o
}

func (o GetIpRangesRangeArrayOutput) Index(i pulumi.IntInput) GetIpRangesRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIpRangesRange {
		return vs[0].([]GetIpRangesRange)[vs[1].(int)]
	}).(GetIpRangesRangeOutput)
}

type GetWorkspaceMembersWorkspaceMember struct {
	// The User display name.
	DisplayName string `pulumi:"displayName"`
	// The Username.
	Username string `pulumi:"username"`
	// User UUID.
	Uuid string `pulumi:"uuid"`
}

// GetWorkspaceMembersWorkspaceMemberInput is an input type that accepts GetWorkspaceMembersWorkspaceMemberArgs and GetWorkspaceMembersWorkspaceMemberOutput values.
// You can construct a concrete instance of `GetWorkspaceMembersWorkspaceMemberInput` via:
//
//	GetWorkspaceMembersWorkspaceMemberArgs{...}
type GetWorkspaceMembersWorkspaceMemberInput interface {
	pulumi.Input

	ToGetWorkspaceMembersWorkspaceMemberOutput() GetWorkspaceMembersWorkspaceMemberOutput
	ToGetWorkspaceMembersWorkspaceMemberOutputWithContext(context.Context) GetWorkspaceMembersWorkspaceMemberOutput
}

type GetWorkspaceMembersWorkspaceMemberArgs struct {
	// The User display name.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The Username.
	Username pulumi.StringInput `pulumi:"username"`
	// User UUID.
	Uuid pulumi.StringInput `pulumi:"uuid"`
}

func (GetWorkspaceMembersWorkspaceMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceMembersWorkspaceMember)(nil)).Elem()
}

func (i GetWorkspaceMembersWorkspaceMemberArgs) ToGetWorkspaceMembersWorkspaceMemberOutput() GetWorkspaceMembersWorkspaceMemberOutput {
	return i.ToGetWorkspaceMembersWorkspaceMemberOutputWithContext(context.Background())
}

func (i GetWorkspaceMembersWorkspaceMemberArgs) ToGetWorkspaceMembersWorkspaceMemberOutputWithContext(ctx context.Context) GetWorkspaceMembersWorkspaceMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkspaceMembersWorkspaceMemberOutput)
}

// GetWorkspaceMembersWorkspaceMemberArrayInput is an input type that accepts GetWorkspaceMembersWorkspaceMemberArray and GetWorkspaceMembersWorkspaceMemberArrayOutput values.
// You can construct a concrete instance of `GetWorkspaceMembersWorkspaceMemberArrayInput` via:
//
//	GetWorkspaceMembersWorkspaceMemberArray{ GetWorkspaceMembersWorkspaceMemberArgs{...} }
type GetWorkspaceMembersWorkspaceMemberArrayInput interface {
	pulumi.Input

	ToGetWorkspaceMembersWorkspaceMemberArrayOutput() GetWorkspaceMembersWorkspaceMemberArrayOutput
	ToGetWorkspaceMembersWorkspaceMemberArrayOutputWithContext(context.Context) GetWorkspaceMembersWorkspaceMemberArrayOutput
}

type GetWorkspaceMembersWorkspaceMemberArray []GetWorkspaceMembersWorkspaceMemberInput

func (GetWorkspaceMembersWorkspaceMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkspaceMembersWorkspaceMember)(nil)).Elem()
}

func (i GetWorkspaceMembersWorkspaceMemberArray) ToGetWorkspaceMembersWorkspaceMemberArrayOutput() GetWorkspaceMembersWorkspaceMemberArrayOutput {
	return i.ToGetWorkspaceMembersWorkspaceMemberArrayOutputWithContext(context.Background())
}

func (i GetWorkspaceMembersWorkspaceMemberArray) ToGetWorkspaceMembersWorkspaceMemberArrayOutputWithContext(ctx context.Context) GetWorkspaceMembersWorkspaceMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkspaceMembersWorkspaceMemberArrayOutput)
}

type GetWorkspaceMembersWorkspaceMemberOutput struct{ *pulumi.OutputState }

func (GetWorkspaceMembersWorkspaceMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceMembersWorkspaceMember)(nil)).Elem()
}

func (o GetWorkspaceMembersWorkspaceMemberOutput) ToGetWorkspaceMembersWorkspaceMemberOutput() GetWorkspaceMembersWorkspaceMemberOutput {
	return o
}

func (o GetWorkspaceMembersWorkspaceMemberOutput) ToGetWorkspaceMembersWorkspaceMemberOutputWithContext(ctx context.Context) GetWorkspaceMembersWorkspaceMemberOutput {
	return o
}

// The User display name.
func (o GetWorkspaceMembersWorkspaceMemberOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspaceMembersWorkspaceMember) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The Username.
func (o GetWorkspaceMembersWorkspaceMemberOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspaceMembersWorkspaceMember) string { return v.Username }).(pulumi.StringOutput)
}

// User UUID.
func (o GetWorkspaceMembersWorkspaceMemberOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspaceMembersWorkspaceMember) string { return v.Uuid }).(pulumi.StringOutput)
}

type GetWorkspaceMembersWorkspaceMemberArrayOutput struct{ *pulumi.OutputState }

func (GetWorkspaceMembersWorkspaceMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkspaceMembersWorkspaceMember)(nil)).Elem()
}

func (o GetWorkspaceMembersWorkspaceMemberArrayOutput) ToGetWorkspaceMembersWorkspaceMemberArrayOutput() GetWorkspaceMembersWorkspaceMemberArrayOutput {
	return o
}

func (o GetWorkspaceMembersWorkspaceMemberArrayOutput) ToGetWorkspaceMembersWorkspaceMemberArrayOutputWithContext(ctx context.Context) GetWorkspaceMembersWorkspaceMemberArrayOutput {
	return o
}

func (o GetWorkspaceMembersWorkspaceMemberArrayOutput) Index(i pulumi.IntInput) GetWorkspaceMembersWorkspaceMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWorkspaceMembersWorkspaceMember {
		return vs[0].([]GetWorkspaceMembersWorkspaceMember)[vs[1].(int)]
	}).(GetWorkspaceMembersWorkspaceMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRestrictionGroupInput)(nil)).Elem(), BranchRestrictionGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRestrictionGroupArrayInput)(nil)).Elem(), BranchRestrictionGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchingModelBranchTypeInput)(nil)).Elem(), BranchingModelBranchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchingModelBranchTypeArrayInput)(nil)).Elem(), BranchingModelBranchTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchingModelDevelopmentInput)(nil)).Elem(), BranchingModelDevelopmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchingModelDevelopmentPtrInput)(nil)).Elem(), BranchingModelDevelopmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchingModelProductionInput)(nil)).Elem(), BranchingModelProductionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchingModelProductionPtrInput)(nil)).Elem(), BranchingModelProductionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentRestrictionsInput)(nil)).Elem(), DeploymentRestrictionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentRestrictionsPtrInput)(nil)).Elem(), DeploymentRestrictionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForkedRepositoryLinkInput)(nil)).Elem(), ForkedRepositoryLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForkedRepositoryLinkPtrInput)(nil)).Elem(), ForkedRepositoryLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForkedRepositoryLinkAvatarInput)(nil)).Elem(), ForkedRepositoryLinkAvatarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForkedRepositoryLinkAvatarPtrInput)(nil)).Elem(), ForkedRepositoryLinkAvatarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineScheduleTargetInput)(nil)).Elem(), PipelineScheduleTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineScheduleTargetPtrInput)(nil)).Elem(), PipelineScheduleTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineScheduleTargetSelectorInput)(nil)).Elem(), PipelineScheduleTargetSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineScheduleTargetSelectorPtrInput)(nil)).Elem(), PipelineScheduleTargetSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSshKnownHostPublicKeyInput)(nil)).Elem(), PipelineSshKnownHostPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSshKnownHostPublicKeyPtrInput)(nil)).Elem(), PipelineSshKnownHostPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectBranchingModelBranchTypeInput)(nil)).Elem(), ProjectBranchingModelBranchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectBranchingModelBranchTypeArrayInput)(nil)).Elem(), ProjectBranchingModelBranchTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectBranchingModelDevelopmentInput)(nil)).Elem(), ProjectBranchingModelDevelopmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectBranchingModelDevelopmentPtrInput)(nil)).Elem(), ProjectBranchingModelDevelopmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectBranchingModelProductionInput)(nil)).Elem(), ProjectBranchingModelProductionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectBranchingModelProductionPtrInput)(nil)).Elem(), ProjectBranchingModelProductionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectLinkInput)(nil)).Elem(), ProjectLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectLinkPtrInput)(nil)).Elem(), ProjectLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectLinkAvatarInput)(nil)).Elem(), ProjectLinkAvatarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectLinkAvatarPtrInput)(nil)).Elem(), ProjectLinkAvatarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryLinkInput)(nil)).Elem(), RepositoryLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryLinkPtrInput)(nil)).Elem(), RepositoryLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryLinkAvatarInput)(nil)).Elem(), RepositoryLinkAvatarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryLinkAvatarPtrInput)(nil)).Elem(), RepositoryLinkAvatarArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCurrentUserEmailInput)(nil)).Elem(), GetCurrentUserEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCurrentUserEmailArrayInput)(nil)).Elem(), GetCurrentUserEmailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembersGroupMemberInput)(nil)).Elem(), GetGroupMembersGroupMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembersGroupMemberArrayInput)(nil)).Elem(), GetGroupMembersGroupMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupInput)(nil)).Elem(), GetGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupArrayInput)(nil)).Elem(), GetGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHookTypesHookTypeInput)(nil)).Elem(), GetHookTypesHookTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHookTypesHookTypeArrayInput)(nil)).Elem(), GetHookTypesHookTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpRangesRangeInput)(nil)).Elem(), GetIpRangesRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpRangesRangeArrayInput)(nil)).Elem(), GetIpRangesRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkspaceMembersWorkspaceMemberInput)(nil)).Elem(), GetWorkspaceMembersWorkspaceMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkspaceMembersWorkspaceMemberArrayInput)(nil)).Elem(), GetWorkspaceMembersWorkspaceMemberArray{})
	pulumi.RegisterOutputType(BranchRestrictionGroupOutput{})
	pulumi.RegisterOutputType(BranchRestrictionGroupArrayOutput{})
	pulumi.RegisterOutputType(BranchingModelBranchTypeOutput{})
	pulumi.RegisterOutputType(BranchingModelBranchTypeArrayOutput{})
	pulumi.RegisterOutputType(BranchingModelDevelopmentOutput{})
	pulumi.RegisterOutputType(BranchingModelDevelopmentPtrOutput{})
	pulumi.RegisterOutputType(BranchingModelProductionOutput{})
	pulumi.RegisterOutputType(BranchingModelProductionPtrOutput{})
	pulumi.RegisterOutputType(DeploymentRestrictionsOutput{})
	pulumi.RegisterOutputType(DeploymentRestrictionsPtrOutput{})
	pulumi.RegisterOutputType(ForkedRepositoryLinkOutput{})
	pulumi.RegisterOutputType(ForkedRepositoryLinkPtrOutput{})
	pulumi.RegisterOutputType(ForkedRepositoryLinkAvatarOutput{})
	pulumi.RegisterOutputType(ForkedRepositoryLinkAvatarPtrOutput{})
	pulumi.RegisterOutputType(PipelineScheduleTargetOutput{})
	pulumi.RegisterOutputType(PipelineScheduleTargetPtrOutput{})
	pulumi.RegisterOutputType(PipelineScheduleTargetSelectorOutput{})
	pulumi.RegisterOutputType(PipelineScheduleTargetSelectorPtrOutput{})
	pulumi.RegisterOutputType(PipelineSshKnownHostPublicKeyOutput{})
	pulumi.RegisterOutputType(PipelineSshKnownHostPublicKeyPtrOutput{})
	pulumi.RegisterOutputType(ProjectBranchingModelBranchTypeOutput{})
	pulumi.RegisterOutputType(ProjectBranchingModelBranchTypeArrayOutput{})
	pulumi.RegisterOutputType(ProjectBranchingModelDevelopmentOutput{})
	pulumi.RegisterOutputType(ProjectBranchingModelDevelopmentPtrOutput{})
	pulumi.RegisterOutputType(ProjectBranchingModelProductionOutput{})
	pulumi.RegisterOutputType(ProjectBranchingModelProductionPtrOutput{})
	pulumi.RegisterOutputType(ProjectLinkOutput{})
	pulumi.RegisterOutputType(ProjectLinkPtrOutput{})
	pulumi.RegisterOutputType(ProjectLinkAvatarOutput{})
	pulumi.RegisterOutputType(ProjectLinkAvatarPtrOutput{})
	pulumi.RegisterOutputType(RepositoryLinkOutput{})
	pulumi.RegisterOutputType(RepositoryLinkPtrOutput{})
	pulumi.RegisterOutputType(RepositoryLinkAvatarOutput{})
	pulumi.RegisterOutputType(RepositoryLinkAvatarPtrOutput{})
	pulumi.RegisterOutputType(GetCurrentUserEmailOutput{})
	pulumi.RegisterOutputType(GetCurrentUserEmailArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembersGroupMemberOutput{})
	pulumi.RegisterOutputType(GetGroupMembersGroupMemberArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetHookTypesHookTypeOutput{})
	pulumi.RegisterOutputType(GetHookTypesHookTypeArrayOutput{})
	pulumi.RegisterOutputType(GetIpRangesRangeOutput{})
	pulumi.RegisterOutputType(GetIpRangesRangeArrayOutput{})
	pulumi.RegisterOutputType(GetWorkspaceMembersWorkspaceMemberOutput{})
	pulumi.RegisterOutputType(GetWorkspaceMembersWorkspaceMemberArrayOutput{})
}
