// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

type WorkspaceHook struct {
	pulumi.CustomResourceState

	Active               pulumi.BoolPtrOutput     `pulumi:"active"`
	Description          pulumi.StringOutput      `pulumi:"description"`
	Events               pulumi.StringArrayOutput `pulumi:"events"`
	SkipCertVerification pulumi.BoolPtrOutput     `pulumi:"skipCertVerification"`
	Url                  pulumi.StringOutput      `pulumi:"url"`
	Uuid                 pulumi.StringOutput      `pulumi:"uuid"`
	Workspace            pulumi.StringOutput      `pulumi:"workspace"`
}

// NewWorkspaceHook registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceHook(ctx *pulumi.Context,
	name string, args *WorkspaceHookArgs, opts ...pulumi.ResourceOption) (*WorkspaceHook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Events == nil {
		return nil, errors.New("invalid value for required argument 'Events'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceHook
	err := ctx.RegisterResource("bitbucket:index/workspaceHook:WorkspaceHook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceHook gets an existing WorkspaceHook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceHookState, opts ...pulumi.ResourceOption) (*WorkspaceHook, error) {
	var resource WorkspaceHook
	err := ctx.ReadResource("bitbucket:index/workspaceHook:WorkspaceHook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceHook resources.
type workspaceHookState struct {
	Active               *bool    `pulumi:"active"`
	Description          *string  `pulumi:"description"`
	Events               []string `pulumi:"events"`
	SkipCertVerification *bool    `pulumi:"skipCertVerification"`
	Url                  *string  `pulumi:"url"`
	Uuid                 *string  `pulumi:"uuid"`
	Workspace            *string  `pulumi:"workspace"`
}

type WorkspaceHookState struct {
	Active               pulumi.BoolPtrInput
	Description          pulumi.StringPtrInput
	Events               pulumi.StringArrayInput
	SkipCertVerification pulumi.BoolPtrInput
	Url                  pulumi.StringPtrInput
	Uuid                 pulumi.StringPtrInput
	Workspace            pulumi.StringPtrInput
}

func (WorkspaceHookState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceHookState)(nil)).Elem()
}

type workspaceHookArgs struct {
	Active               *bool    `pulumi:"active"`
	Description          string   `pulumi:"description"`
	Events               []string `pulumi:"events"`
	SkipCertVerification *bool    `pulumi:"skipCertVerification"`
	Url                  string   `pulumi:"url"`
	Workspace            string   `pulumi:"workspace"`
}

// The set of arguments for constructing a WorkspaceHook resource.
type WorkspaceHookArgs struct {
	Active               pulumi.BoolPtrInput
	Description          pulumi.StringInput
	Events               pulumi.StringArrayInput
	SkipCertVerification pulumi.BoolPtrInput
	Url                  pulumi.StringInput
	Workspace            pulumi.StringInput
}

func (WorkspaceHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceHookArgs)(nil)).Elem()
}

type WorkspaceHookInput interface {
	pulumi.Input

	ToWorkspaceHookOutput() WorkspaceHookOutput
	ToWorkspaceHookOutputWithContext(ctx context.Context) WorkspaceHookOutput
}

func (*WorkspaceHook) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceHook)(nil)).Elem()
}

func (i *WorkspaceHook) ToWorkspaceHookOutput() WorkspaceHookOutput {
	return i.ToWorkspaceHookOutputWithContext(context.Background())
}

func (i *WorkspaceHook) ToWorkspaceHookOutputWithContext(ctx context.Context) WorkspaceHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceHookOutput)
}

func (i *WorkspaceHook) ToOutput(ctx context.Context) pulumix.Output[*WorkspaceHook] {
	return pulumix.Output[*WorkspaceHook]{
		OutputState: i.ToWorkspaceHookOutputWithContext(ctx).OutputState,
	}
}

// WorkspaceHookArrayInput is an input type that accepts WorkspaceHookArray and WorkspaceHookArrayOutput values.
// You can construct a concrete instance of `WorkspaceHookArrayInput` via:
//
//	WorkspaceHookArray{ WorkspaceHookArgs{...} }
type WorkspaceHookArrayInput interface {
	pulumi.Input

	ToWorkspaceHookArrayOutput() WorkspaceHookArrayOutput
	ToWorkspaceHookArrayOutputWithContext(context.Context) WorkspaceHookArrayOutput
}

type WorkspaceHookArray []WorkspaceHookInput

func (WorkspaceHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceHook)(nil)).Elem()
}

func (i WorkspaceHookArray) ToWorkspaceHookArrayOutput() WorkspaceHookArrayOutput {
	return i.ToWorkspaceHookArrayOutputWithContext(context.Background())
}

func (i WorkspaceHookArray) ToWorkspaceHookArrayOutputWithContext(ctx context.Context) WorkspaceHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceHookArrayOutput)
}

func (i WorkspaceHookArray) ToOutput(ctx context.Context) pulumix.Output[[]*WorkspaceHook] {
	return pulumix.Output[[]*WorkspaceHook]{
		OutputState: i.ToWorkspaceHookArrayOutputWithContext(ctx).OutputState,
	}
}

// WorkspaceHookMapInput is an input type that accepts WorkspaceHookMap and WorkspaceHookMapOutput values.
// You can construct a concrete instance of `WorkspaceHookMapInput` via:
//
//	WorkspaceHookMap{ "key": WorkspaceHookArgs{...} }
type WorkspaceHookMapInput interface {
	pulumi.Input

	ToWorkspaceHookMapOutput() WorkspaceHookMapOutput
	ToWorkspaceHookMapOutputWithContext(context.Context) WorkspaceHookMapOutput
}

type WorkspaceHookMap map[string]WorkspaceHookInput

func (WorkspaceHookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceHook)(nil)).Elem()
}

func (i WorkspaceHookMap) ToWorkspaceHookMapOutput() WorkspaceHookMapOutput {
	return i.ToWorkspaceHookMapOutputWithContext(context.Background())
}

func (i WorkspaceHookMap) ToWorkspaceHookMapOutputWithContext(ctx context.Context) WorkspaceHookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceHookMapOutput)
}

func (i WorkspaceHookMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*WorkspaceHook] {
	return pulumix.Output[map[string]*WorkspaceHook]{
		OutputState: i.ToWorkspaceHookMapOutputWithContext(ctx).OutputState,
	}
}

type WorkspaceHookOutput struct{ *pulumi.OutputState }

func (WorkspaceHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceHook)(nil)).Elem()
}

func (o WorkspaceHookOutput) ToWorkspaceHookOutput() WorkspaceHookOutput {
	return o
}

func (o WorkspaceHookOutput) ToWorkspaceHookOutputWithContext(ctx context.Context) WorkspaceHookOutput {
	return o
}

func (o WorkspaceHookOutput) ToOutput(ctx context.Context) pulumix.Output[*WorkspaceHook] {
	return pulumix.Output[*WorkspaceHook]{
		OutputState: o.OutputState,
	}
}

func (o WorkspaceHookOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

func (o WorkspaceHookOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o WorkspaceHookOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.StringArrayOutput { return v.Events }).(pulumi.StringArrayOutput)
}

func (o WorkspaceHookOutput) SkipCertVerification() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.BoolPtrOutput { return v.SkipCertVerification }).(pulumi.BoolPtrOutput)
}

func (o WorkspaceHookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o WorkspaceHookOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

func (o WorkspaceHookOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type WorkspaceHookArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceHook)(nil)).Elem()
}

func (o WorkspaceHookArrayOutput) ToWorkspaceHookArrayOutput() WorkspaceHookArrayOutput {
	return o
}

func (o WorkspaceHookArrayOutput) ToWorkspaceHookArrayOutputWithContext(ctx context.Context) WorkspaceHookArrayOutput {
	return o
}

func (o WorkspaceHookArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*WorkspaceHook] {
	return pulumix.Output[[]*WorkspaceHook]{
		OutputState: o.OutputState,
	}
}

func (o WorkspaceHookArrayOutput) Index(i pulumi.IntInput) WorkspaceHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceHook {
		return vs[0].([]*WorkspaceHook)[vs[1].(int)]
	}).(WorkspaceHookOutput)
}

type WorkspaceHookMapOutput struct{ *pulumi.OutputState }

func (WorkspaceHookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceHook)(nil)).Elem()
}

func (o WorkspaceHookMapOutput) ToWorkspaceHookMapOutput() WorkspaceHookMapOutput {
	return o
}

func (o WorkspaceHookMapOutput) ToWorkspaceHookMapOutputWithContext(ctx context.Context) WorkspaceHookMapOutput {
	return o
}

func (o WorkspaceHookMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*WorkspaceHook] {
	return pulumix.Output[map[string]*WorkspaceHook]{
		OutputState: o.OutputState,
	}
}

func (o WorkspaceHookMapOutput) MapIndex(k pulumi.StringInput) WorkspaceHookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceHook {
		return vs[0].(map[string]*WorkspaceHook)[vs[1].(string)]
	}).(WorkspaceHookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceHookInput)(nil)).Elem(), &WorkspaceHook{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceHookArrayInput)(nil)).Elem(), WorkspaceHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceHookMapInput)(nil)).Elem(), WorkspaceHookMap{})
	pulumi.RegisterOutputType(WorkspaceHookOutput{})
	pulumi.RegisterOutputType(WorkspaceHookArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceHookMapOutput{})
}
