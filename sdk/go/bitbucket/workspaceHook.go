// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

// Provides a Bitbucket workspace hook resource.
//
// This allows you to manage your webhooks on a workspace.
//
// OAuth2 Scopes: `webhook`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bitbucket.NewWorkspaceHook(ctx, "deployOnPush", &bitbucket.WorkspaceHookArgs{
//				Description: pulumi.String("Deploy the code via my webhook"),
//				Events: pulumi.StringArray{
//					pulumi.String("repo:push"),
//				},
//				Url:       pulumi.String("https://mywebhookservice.mycompany.com/deploy-on-push"),
//				Workspace: pulumi.String("myteam"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Hooks can be imported using their `workspace/hook-id` ID, e.g.
//
// ```sh
//
//	$ pulumi import bitbucket:index/workspaceHook:WorkspaceHook hook my-account/hook-id
//
// ```
type WorkspaceHook struct {
	pulumi.CustomResourceState

	// Whether the webhook configuration is active or not (Default: `true`).
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The name / description to show in the UI.
	Description pulumi.StringOutput `pulumi:"description"`
	// The events this webhook is subscribed to. Valid values can be found at [Bitbucket Webhook Docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/#api-repositories-workspace-repo-slug-hooks-post).
	Events pulumi.StringArrayOutput `pulumi:"events"`
	// Whether a webhook history is enabled.
	HistoryEnabled pulumi.BoolPtrOutput `pulumi:"historyEnabled"`
	// A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
	Secret pulumi.StringPtrOutput `pulumi:"secret"`
	// Whether a webhook secret is set.
	SecretSet pulumi.BoolOutput `pulumi:"secretSet"`
	// Whether to skip certificate verification or not (Default: `true`).
	SkipCertVerification pulumi.BoolPtrOutput `pulumi:"skipCertVerification"`
	// Where to POST to.
	Url pulumi.StringOutput `pulumi:"url"`
	// The UUID of the workspace webhook.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// The workspace of this repository. Can be you or any team you
	// have write access to.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewWorkspaceHook registers a new resource with the given unique name, arguments, and options.
func NewWorkspaceHook(ctx *pulumi.Context,
	name string, args *WorkspaceHookArgs, opts ...pulumi.ResourceOption) (*WorkspaceHook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Events == nil {
		return nil, errors.New("invalid value for required argument 'Events'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	if args.Secret != nil {
		args.Secret = pulumi.ToSecret(args.Secret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkspaceHook
	err := ctx.RegisterResource("bitbucket:index/workspaceHook:WorkspaceHook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspaceHook gets an existing WorkspaceHook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspaceHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceHookState, opts ...pulumi.ResourceOption) (*WorkspaceHook, error) {
	var resource WorkspaceHook
	err := ctx.ReadResource("bitbucket:index/workspaceHook:WorkspaceHook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkspaceHook resources.
type workspaceHookState struct {
	// Whether the webhook configuration is active or not (Default: `true`).
	Active *bool `pulumi:"active"`
	// The name / description to show in the UI.
	Description *string `pulumi:"description"`
	// The events this webhook is subscribed to. Valid values can be found at [Bitbucket Webhook Docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/#api-repositories-workspace-repo-slug-hooks-post).
	Events []string `pulumi:"events"`
	// Whether a webhook history is enabled.
	HistoryEnabled *bool `pulumi:"historyEnabled"`
	// A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
	Secret *string `pulumi:"secret"`
	// Whether a webhook secret is set.
	SecretSet *bool `pulumi:"secretSet"`
	// Whether to skip certificate verification or not (Default: `true`).
	SkipCertVerification *bool `pulumi:"skipCertVerification"`
	// Where to POST to.
	Url *string `pulumi:"url"`
	// The UUID of the workspace webhook.
	Uuid *string `pulumi:"uuid"`
	// The workspace of this repository. Can be you or any team you
	// have write access to.
	Workspace *string `pulumi:"workspace"`
}

type WorkspaceHookState struct {
	// Whether the webhook configuration is active or not (Default: `true`).
	Active pulumi.BoolPtrInput
	// The name / description to show in the UI.
	Description pulumi.StringPtrInput
	// The events this webhook is subscribed to. Valid values can be found at [Bitbucket Webhook Docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/#api-repositories-workspace-repo-slug-hooks-post).
	Events pulumi.StringArrayInput
	// Whether a webhook history is enabled.
	HistoryEnabled pulumi.BoolPtrInput
	// A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
	Secret pulumi.StringPtrInput
	// Whether a webhook secret is set.
	SecretSet pulumi.BoolPtrInput
	// Whether to skip certificate verification or not (Default: `true`).
	SkipCertVerification pulumi.BoolPtrInput
	// Where to POST to.
	Url pulumi.StringPtrInput
	// The UUID of the workspace webhook.
	Uuid pulumi.StringPtrInput
	// The workspace of this repository. Can be you or any team you
	// have write access to.
	Workspace pulumi.StringPtrInput
}

func (WorkspaceHookState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceHookState)(nil)).Elem()
}

type workspaceHookArgs struct {
	// Whether the webhook configuration is active or not (Default: `true`).
	Active *bool `pulumi:"active"`
	// The name / description to show in the UI.
	Description string `pulumi:"description"`
	// The events this webhook is subscribed to. Valid values can be found at [Bitbucket Webhook Docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/#api-repositories-workspace-repo-slug-hooks-post).
	Events []string `pulumi:"events"`
	// Whether a webhook history is enabled.
	HistoryEnabled *bool `pulumi:"historyEnabled"`
	// A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
	Secret *string `pulumi:"secret"`
	// Whether to skip certificate verification or not (Default: `true`).
	SkipCertVerification *bool `pulumi:"skipCertVerification"`
	// Where to POST to.
	Url string `pulumi:"url"`
	// The workspace of this repository. Can be you or any team you
	// have write access to.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a WorkspaceHook resource.
type WorkspaceHookArgs struct {
	// Whether the webhook configuration is active or not (Default: `true`).
	Active pulumi.BoolPtrInput
	// The name / description to show in the UI.
	Description pulumi.StringInput
	// The events this webhook is subscribed to. Valid values can be found at [Bitbucket Webhook Docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/#api-repositories-workspace-repo-slug-hooks-post).
	Events pulumi.StringArrayInput
	// Whether a webhook history is enabled.
	HistoryEnabled pulumi.BoolPtrInput
	// A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
	Secret pulumi.StringPtrInput
	// Whether to skip certificate verification or not (Default: `true`).
	SkipCertVerification pulumi.BoolPtrInput
	// Where to POST to.
	Url pulumi.StringInput
	// The workspace of this repository. Can be you or any team you
	// have write access to.
	Workspace pulumi.StringInput
}

func (WorkspaceHookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceHookArgs)(nil)).Elem()
}

type WorkspaceHookInput interface {
	pulumi.Input

	ToWorkspaceHookOutput() WorkspaceHookOutput
	ToWorkspaceHookOutputWithContext(ctx context.Context) WorkspaceHookOutput
}

func (*WorkspaceHook) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceHook)(nil)).Elem()
}

func (i *WorkspaceHook) ToWorkspaceHookOutput() WorkspaceHookOutput {
	return i.ToWorkspaceHookOutputWithContext(context.Background())
}

func (i *WorkspaceHook) ToWorkspaceHookOutputWithContext(ctx context.Context) WorkspaceHookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceHookOutput)
}

// WorkspaceHookArrayInput is an input type that accepts WorkspaceHookArray and WorkspaceHookArrayOutput values.
// You can construct a concrete instance of `WorkspaceHookArrayInput` via:
//
//	WorkspaceHookArray{ WorkspaceHookArgs{...} }
type WorkspaceHookArrayInput interface {
	pulumi.Input

	ToWorkspaceHookArrayOutput() WorkspaceHookArrayOutput
	ToWorkspaceHookArrayOutputWithContext(context.Context) WorkspaceHookArrayOutput
}

type WorkspaceHookArray []WorkspaceHookInput

func (WorkspaceHookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceHook)(nil)).Elem()
}

func (i WorkspaceHookArray) ToWorkspaceHookArrayOutput() WorkspaceHookArrayOutput {
	return i.ToWorkspaceHookArrayOutputWithContext(context.Background())
}

func (i WorkspaceHookArray) ToWorkspaceHookArrayOutputWithContext(ctx context.Context) WorkspaceHookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceHookArrayOutput)
}

// WorkspaceHookMapInput is an input type that accepts WorkspaceHookMap and WorkspaceHookMapOutput values.
// You can construct a concrete instance of `WorkspaceHookMapInput` via:
//
//	WorkspaceHookMap{ "key": WorkspaceHookArgs{...} }
type WorkspaceHookMapInput interface {
	pulumi.Input

	ToWorkspaceHookMapOutput() WorkspaceHookMapOutput
	ToWorkspaceHookMapOutputWithContext(context.Context) WorkspaceHookMapOutput
}

type WorkspaceHookMap map[string]WorkspaceHookInput

func (WorkspaceHookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceHook)(nil)).Elem()
}

func (i WorkspaceHookMap) ToWorkspaceHookMapOutput() WorkspaceHookMapOutput {
	return i.ToWorkspaceHookMapOutputWithContext(context.Background())
}

func (i WorkspaceHookMap) ToWorkspaceHookMapOutputWithContext(ctx context.Context) WorkspaceHookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceHookMapOutput)
}

type WorkspaceHookOutput struct{ *pulumi.OutputState }

func (WorkspaceHookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceHook)(nil)).Elem()
}

func (o WorkspaceHookOutput) ToWorkspaceHookOutput() WorkspaceHookOutput {
	return o
}

func (o WorkspaceHookOutput) ToWorkspaceHookOutputWithContext(ctx context.Context) WorkspaceHookOutput {
	return o
}

// Whether the webhook configuration is active or not (Default: `true`).
func (o WorkspaceHookOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// The name / description to show in the UI.
func (o WorkspaceHookOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The events this webhook is subscribed to. Valid values can be found at [Bitbucket Webhook Docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/#api-repositories-workspace-repo-slug-hooks-post).
func (o WorkspaceHookOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.StringArrayOutput { return v.Events }).(pulumi.StringArrayOutput)
}

// Whether a webhook history is enabled.
func (o WorkspaceHookOutput) HistoryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.BoolPtrOutput { return v.HistoryEnabled }).(pulumi.BoolPtrOutput)
}

// A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
func (o WorkspaceHookOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.StringPtrOutput { return v.Secret }).(pulumi.StringPtrOutput)
}

// Whether a webhook secret is set.
func (o WorkspaceHookOutput) SecretSet() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.BoolOutput { return v.SecretSet }).(pulumi.BoolOutput)
}

// Whether to skip certificate verification or not (Default: `true`).
func (o WorkspaceHookOutput) SkipCertVerification() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.BoolPtrOutput { return v.SkipCertVerification }).(pulumi.BoolPtrOutput)
}

// Where to POST to.
func (o WorkspaceHookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The UUID of the workspace webhook.
func (o WorkspaceHookOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// The workspace of this repository. Can be you or any team you
// have write access to.
func (o WorkspaceHookOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkspaceHook) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type WorkspaceHookArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceHookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkspaceHook)(nil)).Elem()
}

func (o WorkspaceHookArrayOutput) ToWorkspaceHookArrayOutput() WorkspaceHookArrayOutput {
	return o
}

func (o WorkspaceHookArrayOutput) ToWorkspaceHookArrayOutputWithContext(ctx context.Context) WorkspaceHookArrayOutput {
	return o
}

func (o WorkspaceHookArrayOutput) Index(i pulumi.IntInput) WorkspaceHookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkspaceHook {
		return vs[0].([]*WorkspaceHook)[vs[1].(int)]
	}).(WorkspaceHookOutput)
}

type WorkspaceHookMapOutput struct{ *pulumi.OutputState }

func (WorkspaceHookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkspaceHook)(nil)).Elem()
}

func (o WorkspaceHookMapOutput) ToWorkspaceHookMapOutput() WorkspaceHookMapOutput {
	return o
}

func (o WorkspaceHookMapOutput) ToWorkspaceHookMapOutputWithContext(ctx context.Context) WorkspaceHookMapOutput {
	return o
}

func (o WorkspaceHookMapOutput) MapIndex(k pulumi.StringInput) WorkspaceHookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkspaceHook {
		return vs[0].(map[string]*WorkspaceHook)[vs[1].(string)]
	}).(WorkspaceHookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceHookInput)(nil)).Elem(), &WorkspaceHook{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceHookArrayInput)(nil)).Elem(), WorkspaceHookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceHookMapInput)(nil)).Elem(), WorkspaceHookMap{})
	pulumi.RegisterOutputType(WorkspaceHookOutput{})
	pulumi.RegisterOutputType(WorkspaceHookArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceHookMapOutput{})
}
