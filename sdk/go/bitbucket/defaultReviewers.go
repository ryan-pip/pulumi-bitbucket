// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

type DefaultReviewers struct {
	pulumi.CustomResourceState

	Owner      pulumi.StringOutput      `pulumi:"owner"`
	Repository pulumi.StringOutput      `pulumi:"repository"`
	Reviewers  pulumi.StringArrayOutput `pulumi:"reviewers"`
}

// NewDefaultReviewers registers a new resource with the given unique name, arguments, and options.
func NewDefaultReviewers(ctx *pulumi.Context,
	name string, args *DefaultReviewersArgs, opts ...pulumi.ResourceOption) (*DefaultReviewers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Reviewers == nil {
		return nil, errors.New("invalid value for required argument 'Reviewers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DefaultReviewers
	err := ctx.RegisterResource("bitbucket:index/defaultReviewers:DefaultReviewers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultReviewers gets an existing DefaultReviewers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultReviewers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefaultReviewersState, opts ...pulumi.ResourceOption) (*DefaultReviewers, error) {
	var resource DefaultReviewers
	err := ctx.ReadResource("bitbucket:index/defaultReviewers:DefaultReviewers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefaultReviewers resources.
type defaultReviewersState struct {
	Owner      *string  `pulumi:"owner"`
	Repository *string  `pulumi:"repository"`
	Reviewers  []string `pulumi:"reviewers"`
}

type DefaultReviewersState struct {
	Owner      pulumi.StringPtrInput
	Repository pulumi.StringPtrInput
	Reviewers  pulumi.StringArrayInput
}

func (DefaultReviewersState) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultReviewersState)(nil)).Elem()
}

type defaultReviewersArgs struct {
	Owner      string   `pulumi:"owner"`
	Repository string   `pulumi:"repository"`
	Reviewers  []string `pulumi:"reviewers"`
}

// The set of arguments for constructing a DefaultReviewers resource.
type DefaultReviewersArgs struct {
	Owner      pulumi.StringInput
	Repository pulumi.StringInput
	Reviewers  pulumi.StringArrayInput
}

func (DefaultReviewersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultReviewersArgs)(nil)).Elem()
}

type DefaultReviewersInput interface {
	pulumi.Input

	ToDefaultReviewersOutput() DefaultReviewersOutput
	ToDefaultReviewersOutputWithContext(ctx context.Context) DefaultReviewersOutput
}

func (*DefaultReviewers) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultReviewers)(nil)).Elem()
}

func (i *DefaultReviewers) ToDefaultReviewersOutput() DefaultReviewersOutput {
	return i.ToDefaultReviewersOutputWithContext(context.Background())
}

func (i *DefaultReviewers) ToDefaultReviewersOutputWithContext(ctx context.Context) DefaultReviewersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultReviewersOutput)
}

func (i *DefaultReviewers) ToOutput(ctx context.Context) pulumix.Output[*DefaultReviewers] {
	return pulumix.Output[*DefaultReviewers]{
		OutputState: i.ToDefaultReviewersOutputWithContext(ctx).OutputState,
	}
}

// DefaultReviewersArrayInput is an input type that accepts DefaultReviewersArray and DefaultReviewersArrayOutput values.
// You can construct a concrete instance of `DefaultReviewersArrayInput` via:
//
//	DefaultReviewersArray{ DefaultReviewersArgs{...} }
type DefaultReviewersArrayInput interface {
	pulumi.Input

	ToDefaultReviewersArrayOutput() DefaultReviewersArrayOutput
	ToDefaultReviewersArrayOutputWithContext(context.Context) DefaultReviewersArrayOutput
}

type DefaultReviewersArray []DefaultReviewersInput

func (DefaultReviewersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultReviewers)(nil)).Elem()
}

func (i DefaultReviewersArray) ToDefaultReviewersArrayOutput() DefaultReviewersArrayOutput {
	return i.ToDefaultReviewersArrayOutputWithContext(context.Background())
}

func (i DefaultReviewersArray) ToDefaultReviewersArrayOutputWithContext(ctx context.Context) DefaultReviewersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultReviewersArrayOutput)
}

func (i DefaultReviewersArray) ToOutput(ctx context.Context) pulumix.Output[[]*DefaultReviewers] {
	return pulumix.Output[[]*DefaultReviewers]{
		OutputState: i.ToDefaultReviewersArrayOutputWithContext(ctx).OutputState,
	}
}

// DefaultReviewersMapInput is an input type that accepts DefaultReviewersMap and DefaultReviewersMapOutput values.
// You can construct a concrete instance of `DefaultReviewersMapInput` via:
//
//	DefaultReviewersMap{ "key": DefaultReviewersArgs{...} }
type DefaultReviewersMapInput interface {
	pulumi.Input

	ToDefaultReviewersMapOutput() DefaultReviewersMapOutput
	ToDefaultReviewersMapOutputWithContext(context.Context) DefaultReviewersMapOutput
}

type DefaultReviewersMap map[string]DefaultReviewersInput

func (DefaultReviewersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultReviewers)(nil)).Elem()
}

func (i DefaultReviewersMap) ToDefaultReviewersMapOutput() DefaultReviewersMapOutput {
	return i.ToDefaultReviewersMapOutputWithContext(context.Background())
}

func (i DefaultReviewersMap) ToDefaultReviewersMapOutputWithContext(ctx context.Context) DefaultReviewersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultReviewersMapOutput)
}

func (i DefaultReviewersMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DefaultReviewers] {
	return pulumix.Output[map[string]*DefaultReviewers]{
		OutputState: i.ToDefaultReviewersMapOutputWithContext(ctx).OutputState,
	}
}

type DefaultReviewersOutput struct{ *pulumi.OutputState }

func (DefaultReviewersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultReviewers)(nil)).Elem()
}

func (o DefaultReviewersOutput) ToDefaultReviewersOutput() DefaultReviewersOutput {
	return o
}

func (o DefaultReviewersOutput) ToDefaultReviewersOutputWithContext(ctx context.Context) DefaultReviewersOutput {
	return o
}

func (o DefaultReviewersOutput) ToOutput(ctx context.Context) pulumix.Output[*DefaultReviewers] {
	return pulumix.Output[*DefaultReviewers]{
		OutputState: o.OutputState,
	}
}

func (o DefaultReviewersOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultReviewers) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o DefaultReviewersOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultReviewers) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o DefaultReviewersOutput) Reviewers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DefaultReviewers) pulumi.StringArrayOutput { return v.Reviewers }).(pulumi.StringArrayOutput)
}

type DefaultReviewersArrayOutput struct{ *pulumi.OutputState }

func (DefaultReviewersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultReviewers)(nil)).Elem()
}

func (o DefaultReviewersArrayOutput) ToDefaultReviewersArrayOutput() DefaultReviewersArrayOutput {
	return o
}

func (o DefaultReviewersArrayOutput) ToDefaultReviewersArrayOutputWithContext(ctx context.Context) DefaultReviewersArrayOutput {
	return o
}

func (o DefaultReviewersArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DefaultReviewers] {
	return pulumix.Output[[]*DefaultReviewers]{
		OutputState: o.OutputState,
	}
}

func (o DefaultReviewersArrayOutput) Index(i pulumi.IntInput) DefaultReviewersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DefaultReviewers {
		return vs[0].([]*DefaultReviewers)[vs[1].(int)]
	}).(DefaultReviewersOutput)
}

type DefaultReviewersMapOutput struct{ *pulumi.OutputState }

func (DefaultReviewersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultReviewers)(nil)).Elem()
}

func (o DefaultReviewersMapOutput) ToDefaultReviewersMapOutput() DefaultReviewersMapOutput {
	return o
}

func (o DefaultReviewersMapOutput) ToDefaultReviewersMapOutputWithContext(ctx context.Context) DefaultReviewersMapOutput {
	return o
}

func (o DefaultReviewersMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DefaultReviewers] {
	return pulumix.Output[map[string]*DefaultReviewers]{
		OutputState: o.OutputState,
	}
}

func (o DefaultReviewersMapOutput) MapIndex(k pulumi.StringInput) DefaultReviewersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DefaultReviewers {
		return vs[0].(map[string]*DefaultReviewers)[vs[1].(string)]
	}).(DefaultReviewersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultReviewersInput)(nil)).Elem(), &DefaultReviewers{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultReviewersArrayInput)(nil)).Elem(), DefaultReviewersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultReviewersMapInput)(nil)).Elem(), DefaultReviewersMap{})
	pulumi.RegisterOutputType(DefaultReviewersOutput{})
	pulumi.RegisterOutputType(DefaultReviewersArrayOutput{})
	pulumi.RegisterOutputType(DefaultReviewersMapOutput{})
}
