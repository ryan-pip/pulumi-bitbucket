// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

// Provides support for setting up default reviewers for your repository. You must however have the UUID of the user available. Since Bitbucket has removed usernames from its APIs the best case is to use the UUID via the data provider.
//
// OAuth2 Scopes: `pullrequest` and `repository:admin`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			reviewer, err := bitbucket.GetUser(ctx, &bitbucket.GetUserArgs{
//				Uuid: pulumi.StringRef("{account UUID}"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = bitbucket.NewDefaultReviewers(ctx, "infrastructure", &bitbucket.DefaultReviewersArgs{
//				Owner:      pulumi.String("myteam"),
//				Repository: pulumi.String("terraform-code"),
//				Reviewers: pulumi.StringArray{
//					*pulumi.String(reviewer.Uuid),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Default Reviewers can be imported using the owner and repo separated by a (`/`) and the string `reviewers` and the end, e.g.,
//
// ```sh
//
//	$ pulumi import bitbucket:index/defaultReviewers:DefaultReviewers example myteam/terraform-code/reviewers
//
// ```
type DefaultReviewers struct {
	pulumi.CustomResourceState

	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The name of the repository.
	Repository pulumi.StringOutput `pulumi:"repository"`
	// A list of reviewers to use.
	Reviewers pulumi.StringArrayOutput `pulumi:"reviewers"`
}

// NewDefaultReviewers registers a new resource with the given unique name, arguments, and options.
func NewDefaultReviewers(ctx *pulumi.Context,
	name string, args *DefaultReviewersArgs, opts ...pulumi.ResourceOption) (*DefaultReviewers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Reviewers == nil {
		return nil, errors.New("invalid value for required argument 'Reviewers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DefaultReviewers
	err := ctx.RegisterResource("bitbucket:index/defaultReviewers:DefaultReviewers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDefaultReviewers gets an existing DefaultReviewers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDefaultReviewers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DefaultReviewersState, opts ...pulumi.ResourceOption) (*DefaultReviewers, error) {
	var resource DefaultReviewers
	err := ctx.ReadResource("bitbucket:index/defaultReviewers:DefaultReviewers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DefaultReviewers resources.
type defaultReviewersState struct {
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner *string `pulumi:"owner"`
	// The name of the repository.
	Repository *string `pulumi:"repository"`
	// A list of reviewers to use.
	Reviewers []string `pulumi:"reviewers"`
}

type DefaultReviewersState struct {
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner pulumi.StringPtrInput
	// The name of the repository.
	Repository pulumi.StringPtrInput
	// A list of reviewers to use.
	Reviewers pulumi.StringArrayInput
}

func (DefaultReviewersState) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultReviewersState)(nil)).Elem()
}

type defaultReviewersArgs struct {
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner string `pulumi:"owner"`
	// The name of the repository.
	Repository string `pulumi:"repository"`
	// A list of reviewers to use.
	Reviewers []string `pulumi:"reviewers"`
}

// The set of arguments for constructing a DefaultReviewers resource.
type DefaultReviewersArgs struct {
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner pulumi.StringInput
	// The name of the repository.
	Repository pulumi.StringInput
	// A list of reviewers to use.
	Reviewers pulumi.StringArrayInput
}

func (DefaultReviewersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*defaultReviewersArgs)(nil)).Elem()
}

type DefaultReviewersInput interface {
	pulumi.Input

	ToDefaultReviewersOutput() DefaultReviewersOutput
	ToDefaultReviewersOutputWithContext(ctx context.Context) DefaultReviewersOutput
}

func (*DefaultReviewers) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultReviewers)(nil)).Elem()
}

func (i *DefaultReviewers) ToDefaultReviewersOutput() DefaultReviewersOutput {
	return i.ToDefaultReviewersOutputWithContext(context.Background())
}

func (i *DefaultReviewers) ToDefaultReviewersOutputWithContext(ctx context.Context) DefaultReviewersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultReviewersOutput)
}

// DefaultReviewersArrayInput is an input type that accepts DefaultReviewersArray and DefaultReviewersArrayOutput values.
// You can construct a concrete instance of `DefaultReviewersArrayInput` via:
//
//	DefaultReviewersArray{ DefaultReviewersArgs{...} }
type DefaultReviewersArrayInput interface {
	pulumi.Input

	ToDefaultReviewersArrayOutput() DefaultReviewersArrayOutput
	ToDefaultReviewersArrayOutputWithContext(context.Context) DefaultReviewersArrayOutput
}

type DefaultReviewersArray []DefaultReviewersInput

func (DefaultReviewersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultReviewers)(nil)).Elem()
}

func (i DefaultReviewersArray) ToDefaultReviewersArrayOutput() DefaultReviewersArrayOutput {
	return i.ToDefaultReviewersArrayOutputWithContext(context.Background())
}

func (i DefaultReviewersArray) ToDefaultReviewersArrayOutputWithContext(ctx context.Context) DefaultReviewersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultReviewersArrayOutput)
}

// DefaultReviewersMapInput is an input type that accepts DefaultReviewersMap and DefaultReviewersMapOutput values.
// You can construct a concrete instance of `DefaultReviewersMapInput` via:
//
//	DefaultReviewersMap{ "key": DefaultReviewersArgs{...} }
type DefaultReviewersMapInput interface {
	pulumi.Input

	ToDefaultReviewersMapOutput() DefaultReviewersMapOutput
	ToDefaultReviewersMapOutputWithContext(context.Context) DefaultReviewersMapOutput
}

type DefaultReviewersMap map[string]DefaultReviewersInput

func (DefaultReviewersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultReviewers)(nil)).Elem()
}

func (i DefaultReviewersMap) ToDefaultReviewersMapOutput() DefaultReviewersMapOutput {
	return i.ToDefaultReviewersMapOutputWithContext(context.Background())
}

func (i DefaultReviewersMap) ToDefaultReviewersMapOutputWithContext(ctx context.Context) DefaultReviewersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultReviewersMapOutput)
}

type DefaultReviewersOutput struct{ *pulumi.OutputState }

func (DefaultReviewersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultReviewers)(nil)).Elem()
}

func (o DefaultReviewersOutput) ToDefaultReviewersOutput() DefaultReviewersOutput {
	return o
}

func (o DefaultReviewersOutput) ToDefaultReviewersOutputWithContext(ctx context.Context) DefaultReviewersOutput {
	return o
}

// The owner of this repository. Can be you or any team you
// have write access to.
func (o DefaultReviewersOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultReviewers) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The name of the repository.
func (o DefaultReviewersOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *DefaultReviewers) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// A list of reviewers to use.
func (o DefaultReviewersOutput) Reviewers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DefaultReviewers) pulumi.StringArrayOutput { return v.Reviewers }).(pulumi.StringArrayOutput)
}

type DefaultReviewersArrayOutput struct{ *pulumi.OutputState }

func (DefaultReviewersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DefaultReviewers)(nil)).Elem()
}

func (o DefaultReviewersArrayOutput) ToDefaultReviewersArrayOutput() DefaultReviewersArrayOutput {
	return o
}

func (o DefaultReviewersArrayOutput) ToDefaultReviewersArrayOutputWithContext(ctx context.Context) DefaultReviewersArrayOutput {
	return o
}

func (o DefaultReviewersArrayOutput) Index(i pulumi.IntInput) DefaultReviewersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DefaultReviewers {
		return vs[0].([]*DefaultReviewers)[vs[1].(int)]
	}).(DefaultReviewersOutput)
}

type DefaultReviewersMapOutput struct{ *pulumi.OutputState }

func (DefaultReviewersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DefaultReviewers)(nil)).Elem()
}

func (o DefaultReviewersMapOutput) ToDefaultReviewersMapOutput() DefaultReviewersMapOutput {
	return o
}

func (o DefaultReviewersMapOutput) ToDefaultReviewersMapOutputWithContext(ctx context.Context) DefaultReviewersMapOutput {
	return o
}

func (o DefaultReviewersMapOutput) MapIndex(k pulumi.StringInput) DefaultReviewersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DefaultReviewers {
		return vs[0].(map[string]*DefaultReviewers)[vs[1].(string)]
	}).(DefaultReviewersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultReviewersInput)(nil)).Elem(), &DefaultReviewers{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultReviewersArrayInput)(nil)).Elem(), DefaultReviewersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultReviewersMapInput)(nil)).Elem(), DefaultReviewersMap{})
	pulumi.RegisterOutputType(DefaultReviewersOutput{})
	pulumi.RegisterOutputType(DefaultReviewersArrayOutput{})
	pulumi.RegisterOutputType(DefaultReviewersMapOutput{})
}
