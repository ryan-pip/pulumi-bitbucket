// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

// Provides a Bitbucket Pipeline Ssh Key resource.
//
// This allows you to manage your Pipeline Ssh Keys for a repository.
//
// OAuth2 Scopes: `none`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bitbucket.NewPipelineSshKey(ctx, "test", &bitbucket.PipelineSshKeyArgs{
//				PrivateKey: pulumi.String("test-key"),
//				PublicKey:  pulumi.String("ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKqP3Cr632C2dNhhgKVcon4ldUSAeKiku2yP9O9/bDtY"),
//				Repository: pulumi.String("example"),
//				Workspace:  pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Pipeline Ssh Keys can be imported using their `workspace/repo-slug` ID, e.g.
//
// ```sh
//
//	$ pulumi import bitbucket:index/pipelineSshKey:PipelineSshKey key workspace/repo-slug
//
// ```
type PipelineSshKey struct {
	pulumi.CustomResourceState

	// The SSH private key value in OpenSSH format.
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// The SSH public key value in OpenSSH format.
	PublicKey pulumi.StringPtrOutput `pulumi:"publicKey"`
	// The Repository to create ssh key in.
	Repository pulumi.StringOutput `pulumi:"repository"`
	// The Workspace where the repository resides.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewPipelineSshKey registers a new resource with the given unique name, arguments, and options.
func NewPipelineSshKey(ctx *pulumi.Context,
	name string, args *PipelineSshKeyArgs, opts ...pulumi.ResourceOption) (*PipelineSshKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PipelineSshKey
	err := ctx.RegisterResource("bitbucket:index/pipelineSshKey:PipelineSshKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipelineSshKey gets an existing PipelineSshKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipelineSshKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineSshKeyState, opts ...pulumi.ResourceOption) (*PipelineSshKey, error) {
	var resource PipelineSshKey
	err := ctx.ReadResource("bitbucket:index/pipelineSshKey:PipelineSshKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PipelineSshKey resources.
type pipelineSshKeyState struct {
	// The SSH private key value in OpenSSH format.
	PrivateKey *string `pulumi:"privateKey"`
	// The SSH public key value in OpenSSH format.
	PublicKey *string `pulumi:"publicKey"`
	// The Repository to create ssh key in.
	Repository *string `pulumi:"repository"`
	// The Workspace where the repository resides.
	Workspace *string `pulumi:"workspace"`
}

type PipelineSshKeyState struct {
	// The SSH private key value in OpenSSH format.
	PrivateKey pulumi.StringPtrInput
	// The SSH public key value in OpenSSH format.
	PublicKey pulumi.StringPtrInput
	// The Repository to create ssh key in.
	Repository pulumi.StringPtrInput
	// The Workspace where the repository resides.
	Workspace pulumi.StringPtrInput
}

func (PipelineSshKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineSshKeyState)(nil)).Elem()
}

type pipelineSshKeyArgs struct {
	// The SSH private key value in OpenSSH format.
	PrivateKey *string `pulumi:"privateKey"`
	// The SSH public key value in OpenSSH format.
	PublicKey *string `pulumi:"publicKey"`
	// The Repository to create ssh key in.
	Repository string `pulumi:"repository"`
	// The Workspace where the repository resides.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a PipelineSshKey resource.
type PipelineSshKeyArgs struct {
	// The SSH private key value in OpenSSH format.
	PrivateKey pulumi.StringPtrInput
	// The SSH public key value in OpenSSH format.
	PublicKey pulumi.StringPtrInput
	// The Repository to create ssh key in.
	Repository pulumi.StringInput
	// The Workspace where the repository resides.
	Workspace pulumi.StringInput
}

func (PipelineSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineSshKeyArgs)(nil)).Elem()
}

type PipelineSshKeyInput interface {
	pulumi.Input

	ToPipelineSshKeyOutput() PipelineSshKeyOutput
	ToPipelineSshKeyOutputWithContext(ctx context.Context) PipelineSshKeyOutput
}

func (*PipelineSshKey) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSshKey)(nil)).Elem()
}

func (i *PipelineSshKey) ToPipelineSshKeyOutput() PipelineSshKeyOutput {
	return i.ToPipelineSshKeyOutputWithContext(context.Background())
}

func (i *PipelineSshKey) ToPipelineSshKeyOutputWithContext(ctx context.Context) PipelineSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSshKeyOutput)
}

// PipelineSshKeyArrayInput is an input type that accepts PipelineSshKeyArray and PipelineSshKeyArrayOutput values.
// You can construct a concrete instance of `PipelineSshKeyArrayInput` via:
//
//	PipelineSshKeyArray{ PipelineSshKeyArgs{...} }
type PipelineSshKeyArrayInput interface {
	pulumi.Input

	ToPipelineSshKeyArrayOutput() PipelineSshKeyArrayOutput
	ToPipelineSshKeyArrayOutputWithContext(context.Context) PipelineSshKeyArrayOutput
}

type PipelineSshKeyArray []PipelineSshKeyInput

func (PipelineSshKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PipelineSshKey)(nil)).Elem()
}

func (i PipelineSshKeyArray) ToPipelineSshKeyArrayOutput() PipelineSshKeyArrayOutput {
	return i.ToPipelineSshKeyArrayOutputWithContext(context.Background())
}

func (i PipelineSshKeyArray) ToPipelineSshKeyArrayOutputWithContext(ctx context.Context) PipelineSshKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSshKeyArrayOutput)
}

// PipelineSshKeyMapInput is an input type that accepts PipelineSshKeyMap and PipelineSshKeyMapOutput values.
// You can construct a concrete instance of `PipelineSshKeyMapInput` via:
//
//	PipelineSshKeyMap{ "key": PipelineSshKeyArgs{...} }
type PipelineSshKeyMapInput interface {
	pulumi.Input

	ToPipelineSshKeyMapOutput() PipelineSshKeyMapOutput
	ToPipelineSshKeyMapOutputWithContext(context.Context) PipelineSshKeyMapOutput
}

type PipelineSshKeyMap map[string]PipelineSshKeyInput

func (PipelineSshKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PipelineSshKey)(nil)).Elem()
}

func (i PipelineSshKeyMap) ToPipelineSshKeyMapOutput() PipelineSshKeyMapOutput {
	return i.ToPipelineSshKeyMapOutputWithContext(context.Background())
}

func (i PipelineSshKeyMap) ToPipelineSshKeyMapOutputWithContext(ctx context.Context) PipelineSshKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineSshKeyMapOutput)
}

type PipelineSshKeyOutput struct{ *pulumi.OutputState }

func (PipelineSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineSshKey)(nil)).Elem()
}

func (o PipelineSshKeyOutput) ToPipelineSshKeyOutput() PipelineSshKeyOutput {
	return o
}

func (o PipelineSshKeyOutput) ToPipelineSshKeyOutputWithContext(ctx context.Context) PipelineSshKeyOutput {
	return o
}

// The SSH private key value in OpenSSH format.
func (o PipelineSshKeyOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineSshKey) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// The SSH public key value in OpenSSH format.
func (o PipelineSshKeyOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineSshKey) pulumi.StringPtrOutput { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The Repository to create ssh key in.
func (o PipelineSshKeyOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineSshKey) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// The Workspace where the repository resides.
func (o PipelineSshKeyOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *PipelineSshKey) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type PipelineSshKeyArrayOutput struct{ *pulumi.OutputState }

func (PipelineSshKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PipelineSshKey)(nil)).Elem()
}

func (o PipelineSshKeyArrayOutput) ToPipelineSshKeyArrayOutput() PipelineSshKeyArrayOutput {
	return o
}

func (o PipelineSshKeyArrayOutput) ToPipelineSshKeyArrayOutputWithContext(ctx context.Context) PipelineSshKeyArrayOutput {
	return o
}

func (o PipelineSshKeyArrayOutput) Index(i pulumi.IntInput) PipelineSshKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PipelineSshKey {
		return vs[0].([]*PipelineSshKey)[vs[1].(int)]
	}).(PipelineSshKeyOutput)
}

type PipelineSshKeyMapOutput struct{ *pulumi.OutputState }

func (PipelineSshKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PipelineSshKey)(nil)).Elem()
}

func (o PipelineSshKeyMapOutput) ToPipelineSshKeyMapOutput() PipelineSshKeyMapOutput {
	return o
}

func (o PipelineSshKeyMapOutput) ToPipelineSshKeyMapOutputWithContext(ctx context.Context) PipelineSshKeyMapOutput {
	return o
}

func (o PipelineSshKeyMapOutput) MapIndex(k pulumi.StringInput) PipelineSshKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PipelineSshKey {
		return vs[0].(map[string]*PipelineSshKey)[vs[1].(string)]
	}).(PipelineSshKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSshKeyInput)(nil)).Elem(), &PipelineSshKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSshKeyArrayInput)(nil)).Elem(), PipelineSshKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineSshKeyMapInput)(nil)).Elem(), PipelineSshKeyMap{})
	pulumi.RegisterOutputType(PipelineSshKeyOutput{})
	pulumi.RegisterOutputType(PipelineSshKeyArrayOutput{})
	pulumi.RegisterOutputType(PipelineSshKeyMapOutput{})
}
