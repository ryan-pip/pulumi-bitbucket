// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "bitbucket:index/branchRestriction:BranchRestriction":
		r = &BranchRestriction{}
	case "bitbucket:index/branchingModel:BranchingModel":
		r = &BranchingModel{}
	case "bitbucket:index/commitFile:CommitFile":
		r = &CommitFile{}
	case "bitbucket:index/defaultReviewers:DefaultReviewers":
		r = &DefaultReviewers{}
	case "bitbucket:index/deployKey:DeployKey":
		r = &DeployKey{}
	case "bitbucket:index/deployment:Deployment":
		r = &Deployment{}
	case "bitbucket:index/deploymentVariable:DeploymentVariable":
		r = &DeploymentVariable{}
	case "bitbucket:index/forkedRepository:ForkedRepository":
		r = &ForkedRepository{}
	case "bitbucket:index/group:Group":
		r = &Group{}
	case "bitbucket:index/groupMembership:GroupMembership":
		r = &GroupMembership{}
	case "bitbucket:index/hook:Hook":
		r = &Hook{}
	case "bitbucket:index/pipelineSchedule:PipelineSchedule":
		r = &PipelineSchedule{}
	case "bitbucket:index/pipelineSshKey:PipelineSshKey":
		r = &PipelineSshKey{}
	case "bitbucket:index/pipelineSshKnownHost:PipelineSshKnownHost":
		r = &PipelineSshKnownHost{}
	case "bitbucket:index/project:Project":
		r = &Project{}
	case "bitbucket:index/projectBranchingModel:ProjectBranchingModel":
		r = &ProjectBranchingModel{}
	case "bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers":
		r = &ProjectDefaultReviewers{}
	case "bitbucket:index/repository:Repository":
		r = &Repository{}
	case "bitbucket:index/repositoryGroupPermission:RepositoryGroupPermission":
		r = &RepositoryGroupPermission{}
	case "bitbucket:index/repositoryUserPermission:RepositoryUserPermission":
		r = &RepositoryUserPermission{}
	case "bitbucket:index/repositoryVariable:RepositoryVariable":
		r = &RepositoryVariable{}
	case "bitbucket:index/sshKey:SshKey":
		r = &SshKey{}
	case "bitbucket:index/workspaceHook:WorkspaceHook":
		r = &WorkspaceHook{}
	case "bitbucket:index/workspaceVariable:WorkspaceVariable":
		r = &WorkspaceVariable{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:bitbucket" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/branchRestriction",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/branchingModel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/commitFile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/defaultReviewers",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/deployKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/deployment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/deploymentVariable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/forkedRepository",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/group",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/groupMembership",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/hook",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/pipelineSchedule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/pipelineSshKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/pipelineSshKnownHost",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/project",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/projectBranchingModel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/projectDefaultReviewers",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/repository",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/repositoryGroupPermission",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/repositoryUserPermission",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/repositoryVariable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/sshKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/workspaceHook",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"bitbucket",
		"index/workspaceVariable",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"bitbucket",
		&pkg{version},
	)
}
