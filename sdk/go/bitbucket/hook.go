// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

type Hook struct {
	pulumi.CustomResourceState

	Active               pulumi.BoolPtrOutput     `pulumi:"active"`
	Description          pulumi.StringOutput      `pulumi:"description"`
	Events               pulumi.StringArrayOutput `pulumi:"events"`
	Owner                pulumi.StringOutput      `pulumi:"owner"`
	Repository           pulumi.StringOutput      `pulumi:"repository"`
	SkipCertVerification pulumi.BoolPtrOutput     `pulumi:"skipCertVerification"`
	Url                  pulumi.StringOutput      `pulumi:"url"`
	Uuid                 pulumi.StringOutput      `pulumi:"uuid"`
}

// NewHook registers a new resource with the given unique name, arguments, and options.
func NewHook(ctx *pulumi.Context,
	name string, args *HookArgs, opts ...pulumi.ResourceOption) (*Hook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Events == nil {
		return nil, errors.New("invalid value for required argument 'Events'")
	}
	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hook
	err := ctx.RegisterResource("bitbucket:index/hook:Hook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHook gets an existing Hook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HookState, opts ...pulumi.ResourceOption) (*Hook, error) {
	var resource Hook
	err := ctx.ReadResource("bitbucket:index/hook:Hook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hook resources.
type hookState struct {
	Active               *bool    `pulumi:"active"`
	Description          *string  `pulumi:"description"`
	Events               []string `pulumi:"events"`
	Owner                *string  `pulumi:"owner"`
	Repository           *string  `pulumi:"repository"`
	SkipCertVerification *bool    `pulumi:"skipCertVerification"`
	Url                  *string  `pulumi:"url"`
	Uuid                 *string  `pulumi:"uuid"`
}

type HookState struct {
	Active               pulumi.BoolPtrInput
	Description          pulumi.StringPtrInput
	Events               pulumi.StringArrayInput
	Owner                pulumi.StringPtrInput
	Repository           pulumi.StringPtrInput
	SkipCertVerification pulumi.BoolPtrInput
	Url                  pulumi.StringPtrInput
	Uuid                 pulumi.StringPtrInput
}

func (HookState) ElementType() reflect.Type {
	return reflect.TypeOf((*hookState)(nil)).Elem()
}

type hookArgs struct {
	Active               *bool    `pulumi:"active"`
	Description          string   `pulumi:"description"`
	Events               []string `pulumi:"events"`
	Owner                string   `pulumi:"owner"`
	Repository           string   `pulumi:"repository"`
	SkipCertVerification *bool    `pulumi:"skipCertVerification"`
	Url                  string   `pulumi:"url"`
}

// The set of arguments for constructing a Hook resource.
type HookArgs struct {
	Active               pulumi.BoolPtrInput
	Description          pulumi.StringInput
	Events               pulumi.StringArrayInput
	Owner                pulumi.StringInput
	Repository           pulumi.StringInput
	SkipCertVerification pulumi.BoolPtrInput
	Url                  pulumi.StringInput
}

func (HookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hookArgs)(nil)).Elem()
}

type HookInput interface {
	pulumi.Input

	ToHookOutput() HookOutput
	ToHookOutputWithContext(ctx context.Context) HookOutput
}

func (*Hook) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil)).Elem()
}

func (i *Hook) ToHookOutput() HookOutput {
	return i.ToHookOutputWithContext(context.Background())
}

func (i *Hook) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookOutput)
}

func (i *Hook) ToOutput(ctx context.Context) pulumix.Output[*Hook] {
	return pulumix.Output[*Hook]{
		OutputState: i.ToHookOutputWithContext(ctx).OutputState,
	}
}

// HookArrayInput is an input type that accepts HookArray and HookArrayOutput values.
// You can construct a concrete instance of `HookArrayInput` via:
//
//	HookArray{ HookArgs{...} }
type HookArrayInput interface {
	pulumi.Input

	ToHookArrayOutput() HookArrayOutput
	ToHookArrayOutputWithContext(context.Context) HookArrayOutput
}

type HookArray []HookInput

func (HookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hook)(nil)).Elem()
}

func (i HookArray) ToHookArrayOutput() HookArrayOutput {
	return i.ToHookArrayOutputWithContext(context.Background())
}

func (i HookArray) ToHookArrayOutputWithContext(ctx context.Context) HookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookArrayOutput)
}

func (i HookArray) ToOutput(ctx context.Context) pulumix.Output[[]*Hook] {
	return pulumix.Output[[]*Hook]{
		OutputState: i.ToHookArrayOutputWithContext(ctx).OutputState,
	}
}

// HookMapInput is an input type that accepts HookMap and HookMapOutput values.
// You can construct a concrete instance of `HookMapInput` via:
//
//	HookMap{ "key": HookArgs{...} }
type HookMapInput interface {
	pulumi.Input

	ToHookMapOutput() HookMapOutput
	ToHookMapOutputWithContext(context.Context) HookMapOutput
}

type HookMap map[string]HookInput

func (HookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hook)(nil)).Elem()
}

func (i HookMap) ToHookMapOutput() HookMapOutput {
	return i.ToHookMapOutputWithContext(context.Background())
}

func (i HookMap) ToHookMapOutputWithContext(ctx context.Context) HookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookMapOutput)
}

func (i HookMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Hook] {
	return pulumix.Output[map[string]*Hook]{
		OutputState: i.ToHookMapOutputWithContext(ctx).OutputState,
	}
}

type HookOutput struct{ *pulumi.OutputState }

func (HookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil)).Elem()
}

func (o HookOutput) ToHookOutput() HookOutput {
	return o
}

func (o HookOutput) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return o
}

func (o HookOutput) ToOutput(ctx context.Context) pulumix.Output[*Hook] {
	return pulumix.Output[*Hook]{
		OutputState: o.OutputState,
	}
}

func (o HookOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hook) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

func (o HookOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o HookOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringArrayOutput { return v.Events }).(pulumi.StringArrayOutput)
}

func (o HookOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o HookOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o HookOutput) SkipCertVerification() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hook) pulumi.BoolPtrOutput { return v.SkipCertVerification }).(pulumi.BoolPtrOutput)
}

func (o HookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

func (o HookOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type HookArrayOutput struct{ *pulumi.OutputState }

func (HookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hook)(nil)).Elem()
}

func (o HookArrayOutput) ToHookArrayOutput() HookArrayOutput {
	return o
}

func (o HookArrayOutput) ToHookArrayOutputWithContext(ctx context.Context) HookArrayOutput {
	return o
}

func (o HookArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Hook] {
	return pulumix.Output[[]*Hook]{
		OutputState: o.OutputState,
	}
}

func (o HookArrayOutput) Index(i pulumi.IntInput) HookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hook {
		return vs[0].([]*Hook)[vs[1].(int)]
	}).(HookOutput)
}

type HookMapOutput struct{ *pulumi.OutputState }

func (HookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hook)(nil)).Elem()
}

func (o HookMapOutput) ToHookMapOutput() HookMapOutput {
	return o
}

func (o HookMapOutput) ToHookMapOutputWithContext(ctx context.Context) HookMapOutput {
	return o
}

func (o HookMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Hook] {
	return pulumix.Output[map[string]*Hook]{
		OutputState: o.OutputState,
	}
}

func (o HookMapOutput) MapIndex(k pulumi.StringInput) HookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hook {
		return vs[0].(map[string]*Hook)[vs[1].(string)]
	}).(HookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HookInput)(nil)).Elem(), &Hook{})
	pulumi.RegisterInputType(reflect.TypeOf((*HookArrayInput)(nil)).Elem(), HookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HookMapInput)(nil)).Elem(), HookMap{})
	pulumi.RegisterOutputType(HookOutput{})
	pulumi.RegisterOutputType(HookArrayOutput{})
	pulumi.RegisterOutputType(HookMapOutput{})
}
