// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

// Provides a Bitbucket hook resource.
//
// This allows you to manage your webhooks on a repository.
//
// OAuth2 Scopes: `webhook`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bitbucket.NewHook(ctx, "deployOnPush", &bitbucket.HookArgs{
//				Description: pulumi.String("Deploy the code via my webhook"),
//				Events: pulumi.StringArray{
//					pulumi.String("repo:push"),
//				},
//				Owner:      pulumi.String("myteam"),
//				Repository: pulumi.String("terraform-code"),
//				Url:        pulumi.String("https://mywebhookservice.mycompany.com/deploy-on-push"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Hooks can be imported using their `owner/repo-name/hook-id` ID, e.g.
//
// ```sh
//
//	$ pulumi import bitbucket:index/hook:Hook hook my-account/my-repo/hook-id
//
// ```
type Hook struct {
	pulumi.CustomResourceState

	// Whether the webhook configuration is active or not (Default: `true`).
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The name / description to show in the UI.
	Description pulumi.StringOutput `pulumi:"description"`
	// The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).
	Events pulumi.StringArrayOutput `pulumi:"events"`
	// Whether a webhook history is enabled.
	HistoryEnabled pulumi.BoolPtrOutput `pulumi:"historyEnabled"`
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The name of the repository.
	Repository pulumi.StringOutput `pulumi:"repository"`
	// A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
	Secret pulumi.StringPtrOutput `pulumi:"secret"`
	// Whether a webhook secret is set.
	SecretSet pulumi.BoolOutput `pulumi:"secretSet"`
	// Whether to skip certificate verification or not (Default: `true`).
	SkipCertVerification pulumi.BoolPtrOutput `pulumi:"skipCertVerification"`
	// Where to POST to.
	Url pulumi.StringOutput `pulumi:"url"`
	// The UUID of the workspace webhook.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewHook registers a new resource with the given unique name, arguments, and options.
func NewHook(ctx *pulumi.Context,
	name string, args *HookArgs, opts ...pulumi.ResourceOption) (*Hook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Events == nil {
		return nil, errors.New("invalid value for required argument 'Events'")
	}
	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Secret != nil {
		args.Secret = pulumi.ToSecret(args.Secret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hook
	err := ctx.RegisterResource("bitbucket:index/hook:Hook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHook gets an existing Hook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HookState, opts ...pulumi.ResourceOption) (*Hook, error) {
	var resource Hook
	err := ctx.ReadResource("bitbucket:index/hook:Hook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hook resources.
type hookState struct {
	// Whether the webhook configuration is active or not (Default: `true`).
	Active *bool `pulumi:"active"`
	// The name / description to show in the UI.
	Description *string `pulumi:"description"`
	// The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).
	Events []string `pulumi:"events"`
	// Whether a webhook history is enabled.
	HistoryEnabled *bool `pulumi:"historyEnabled"`
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner *string `pulumi:"owner"`
	// The name of the repository.
	Repository *string `pulumi:"repository"`
	// A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
	Secret *string `pulumi:"secret"`
	// Whether a webhook secret is set.
	SecretSet *bool `pulumi:"secretSet"`
	// Whether to skip certificate verification or not (Default: `true`).
	SkipCertVerification *bool `pulumi:"skipCertVerification"`
	// Where to POST to.
	Url *string `pulumi:"url"`
	// The UUID of the workspace webhook.
	Uuid *string `pulumi:"uuid"`
}

type HookState struct {
	// Whether the webhook configuration is active or not (Default: `true`).
	Active pulumi.BoolPtrInput
	// The name / description to show in the UI.
	Description pulumi.StringPtrInput
	// The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).
	Events pulumi.StringArrayInput
	// Whether a webhook history is enabled.
	HistoryEnabled pulumi.BoolPtrInput
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner pulumi.StringPtrInput
	// The name of the repository.
	Repository pulumi.StringPtrInput
	// A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
	Secret pulumi.StringPtrInput
	// Whether a webhook secret is set.
	SecretSet pulumi.BoolPtrInput
	// Whether to skip certificate verification or not (Default: `true`).
	SkipCertVerification pulumi.BoolPtrInput
	// Where to POST to.
	Url pulumi.StringPtrInput
	// The UUID of the workspace webhook.
	Uuid pulumi.StringPtrInput
}

func (HookState) ElementType() reflect.Type {
	return reflect.TypeOf((*hookState)(nil)).Elem()
}

type hookArgs struct {
	// Whether the webhook configuration is active or not (Default: `true`).
	Active *bool `pulumi:"active"`
	// The name / description to show in the UI.
	Description string `pulumi:"description"`
	// The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).
	Events []string `pulumi:"events"`
	// Whether a webhook history is enabled.
	HistoryEnabled *bool `pulumi:"historyEnabled"`
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner string `pulumi:"owner"`
	// The name of the repository.
	Repository string `pulumi:"repository"`
	// A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
	Secret *string `pulumi:"secret"`
	// Whether to skip certificate verification or not (Default: `true`).
	SkipCertVerification *bool `pulumi:"skipCertVerification"`
	// Where to POST to.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Hook resource.
type HookArgs struct {
	// Whether the webhook configuration is active or not (Default: `true`).
	Active pulumi.BoolPtrInput
	// The name / description to show in the UI.
	Description pulumi.StringInput
	// The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).
	Events pulumi.StringArrayInput
	// Whether a webhook history is enabled.
	HistoryEnabled pulumi.BoolPtrInput
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner pulumi.StringInput
	// The name of the repository.
	Repository pulumi.StringInput
	// A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
	Secret pulumi.StringPtrInput
	// Whether to skip certificate verification or not (Default: `true`).
	SkipCertVerification pulumi.BoolPtrInput
	// Where to POST to.
	Url pulumi.StringInput
}

func (HookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hookArgs)(nil)).Elem()
}

type HookInput interface {
	pulumi.Input

	ToHookOutput() HookOutput
	ToHookOutputWithContext(ctx context.Context) HookOutput
}

func (*Hook) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil)).Elem()
}

func (i *Hook) ToHookOutput() HookOutput {
	return i.ToHookOutputWithContext(context.Background())
}

func (i *Hook) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookOutput)
}

// HookArrayInput is an input type that accepts HookArray and HookArrayOutput values.
// You can construct a concrete instance of `HookArrayInput` via:
//
//	HookArray{ HookArgs{...} }
type HookArrayInput interface {
	pulumi.Input

	ToHookArrayOutput() HookArrayOutput
	ToHookArrayOutputWithContext(context.Context) HookArrayOutput
}

type HookArray []HookInput

func (HookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hook)(nil)).Elem()
}

func (i HookArray) ToHookArrayOutput() HookArrayOutput {
	return i.ToHookArrayOutputWithContext(context.Background())
}

func (i HookArray) ToHookArrayOutputWithContext(ctx context.Context) HookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookArrayOutput)
}

// HookMapInput is an input type that accepts HookMap and HookMapOutput values.
// You can construct a concrete instance of `HookMapInput` via:
//
//	HookMap{ "key": HookArgs{...} }
type HookMapInput interface {
	pulumi.Input

	ToHookMapOutput() HookMapOutput
	ToHookMapOutputWithContext(context.Context) HookMapOutput
}

type HookMap map[string]HookInput

func (HookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hook)(nil)).Elem()
}

func (i HookMap) ToHookMapOutput() HookMapOutput {
	return i.ToHookMapOutputWithContext(context.Background())
}

func (i HookMap) ToHookMapOutputWithContext(ctx context.Context) HookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HookMapOutput)
}

type HookOutput struct{ *pulumi.OutputState }

func (HookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hook)(nil)).Elem()
}

func (o HookOutput) ToHookOutput() HookOutput {
	return o
}

func (o HookOutput) ToHookOutputWithContext(ctx context.Context) HookOutput {
	return o
}

// Whether the webhook configuration is active or not (Default: `true`).
func (o HookOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hook) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// The name / description to show in the UI.
func (o HookOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).
func (o HookOutput) Events() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringArrayOutput { return v.Events }).(pulumi.StringArrayOutput)
}

// Whether a webhook history is enabled.
func (o HookOutput) HistoryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hook) pulumi.BoolPtrOutput { return v.HistoryEnabled }).(pulumi.BoolPtrOutput)
}

// The owner of this repository. Can be you or any team you
// have write access to.
func (o HookOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The name of the repository.
func (o HookOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
func (o HookOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringPtrOutput { return v.Secret }).(pulumi.StringPtrOutput)
}

// Whether a webhook secret is set.
func (o HookOutput) SecretSet() pulumi.BoolOutput {
	return o.ApplyT(func(v *Hook) pulumi.BoolOutput { return v.SecretSet }).(pulumi.BoolOutput)
}

// Whether to skip certificate verification or not (Default: `true`).
func (o HookOutput) SkipCertVerification() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Hook) pulumi.BoolPtrOutput { return v.SkipCertVerification }).(pulumi.BoolPtrOutput)
}

// Where to POST to.
func (o HookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// The UUID of the workspace webhook.
func (o HookOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Hook) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type HookArrayOutput struct{ *pulumi.OutputState }

func (HookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hook)(nil)).Elem()
}

func (o HookArrayOutput) ToHookArrayOutput() HookArrayOutput {
	return o
}

func (o HookArrayOutput) ToHookArrayOutputWithContext(ctx context.Context) HookArrayOutput {
	return o
}

func (o HookArrayOutput) Index(i pulumi.IntInput) HookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hook {
		return vs[0].([]*Hook)[vs[1].(int)]
	}).(HookOutput)
}

type HookMapOutput struct{ *pulumi.OutputState }

func (HookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hook)(nil)).Elem()
}

func (o HookMapOutput) ToHookMapOutput() HookMapOutput {
	return o
}

func (o HookMapOutput) ToHookMapOutputWithContext(ctx context.Context) HookMapOutput {
	return o
}

func (o HookMapOutput) MapIndex(k pulumi.StringInput) HookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hook {
		return vs[0].(map[string]*Hook)[vs[1].(string)]
	}).(HookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HookInput)(nil)).Elem(), &Hook{})
	pulumi.RegisterInputType(reflect.TypeOf((*HookArrayInput)(nil)).Elem(), HookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HookMapInput)(nil)).Elem(), HookMap{})
	pulumi.RegisterOutputType(HookOutput{})
	pulumi.RegisterOutputType(HookArrayOutput{})
	pulumi.RegisterOutputType(HookMapOutput{})
}
