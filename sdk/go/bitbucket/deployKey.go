// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

type DeployKey struct {
	pulumi.CustomResourceState

	Comment    pulumi.StringOutput    `pulumi:"comment"`
	Key        pulumi.StringPtrOutput `pulumi:"key"`
	KeyId      pulumi.StringOutput    `pulumi:"keyId"`
	Label      pulumi.StringPtrOutput `pulumi:"label"`
	Repository pulumi.StringOutput    `pulumi:"repository"`
	Workspace  pulumi.StringOutput    `pulumi:"workspace"`
}

// NewDeployKey registers a new resource with the given unique name, arguments, and options.
func NewDeployKey(ctx *pulumi.Context,
	name string, args *DeployKeyArgs, opts ...pulumi.ResourceOption) (*DeployKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeployKey
	err := ctx.RegisterResource("bitbucket:index/deployKey:DeployKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployKey gets an existing DeployKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeployKeyState, opts ...pulumi.ResourceOption) (*DeployKey, error) {
	var resource DeployKey
	err := ctx.ReadResource("bitbucket:index/deployKey:DeployKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeployKey resources.
type deployKeyState struct {
	Comment    *string `pulumi:"comment"`
	Key        *string `pulumi:"key"`
	KeyId      *string `pulumi:"keyId"`
	Label      *string `pulumi:"label"`
	Repository *string `pulumi:"repository"`
	Workspace  *string `pulumi:"workspace"`
}

type DeployKeyState struct {
	Comment    pulumi.StringPtrInput
	Key        pulumi.StringPtrInput
	KeyId      pulumi.StringPtrInput
	Label      pulumi.StringPtrInput
	Repository pulumi.StringPtrInput
	Workspace  pulumi.StringPtrInput
}

func (DeployKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*deployKeyState)(nil)).Elem()
}

type deployKeyArgs struct {
	Key        *string `pulumi:"key"`
	Label      *string `pulumi:"label"`
	Repository string  `pulumi:"repository"`
	Workspace  string  `pulumi:"workspace"`
}

// The set of arguments for constructing a DeployKey resource.
type DeployKeyArgs struct {
	Key        pulumi.StringPtrInput
	Label      pulumi.StringPtrInput
	Repository pulumi.StringInput
	Workspace  pulumi.StringInput
}

func (DeployKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deployKeyArgs)(nil)).Elem()
}

type DeployKeyInput interface {
	pulumi.Input

	ToDeployKeyOutput() DeployKeyOutput
	ToDeployKeyOutputWithContext(ctx context.Context) DeployKeyOutput
}

func (*DeployKey) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployKey)(nil)).Elem()
}

func (i *DeployKey) ToDeployKeyOutput() DeployKeyOutput {
	return i.ToDeployKeyOutputWithContext(context.Background())
}

func (i *DeployKey) ToDeployKeyOutputWithContext(ctx context.Context) DeployKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployKeyOutput)
}

func (i *DeployKey) ToOutput(ctx context.Context) pulumix.Output[*DeployKey] {
	return pulumix.Output[*DeployKey]{
		OutputState: i.ToDeployKeyOutputWithContext(ctx).OutputState,
	}
}

// DeployKeyArrayInput is an input type that accepts DeployKeyArray and DeployKeyArrayOutput values.
// You can construct a concrete instance of `DeployKeyArrayInput` via:
//
//	DeployKeyArray{ DeployKeyArgs{...} }
type DeployKeyArrayInput interface {
	pulumi.Input

	ToDeployKeyArrayOutput() DeployKeyArrayOutput
	ToDeployKeyArrayOutputWithContext(context.Context) DeployKeyArrayOutput
}

type DeployKeyArray []DeployKeyInput

func (DeployKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeployKey)(nil)).Elem()
}

func (i DeployKeyArray) ToDeployKeyArrayOutput() DeployKeyArrayOutput {
	return i.ToDeployKeyArrayOutputWithContext(context.Background())
}

func (i DeployKeyArray) ToDeployKeyArrayOutputWithContext(ctx context.Context) DeployKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployKeyArrayOutput)
}

func (i DeployKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]*DeployKey] {
	return pulumix.Output[[]*DeployKey]{
		OutputState: i.ToDeployKeyArrayOutputWithContext(ctx).OutputState,
	}
}

// DeployKeyMapInput is an input type that accepts DeployKeyMap and DeployKeyMapOutput values.
// You can construct a concrete instance of `DeployKeyMapInput` via:
//
//	DeployKeyMap{ "key": DeployKeyArgs{...} }
type DeployKeyMapInput interface {
	pulumi.Input

	ToDeployKeyMapOutput() DeployKeyMapOutput
	ToDeployKeyMapOutputWithContext(context.Context) DeployKeyMapOutput
}

type DeployKeyMap map[string]DeployKeyInput

func (DeployKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeployKey)(nil)).Elem()
}

func (i DeployKeyMap) ToDeployKeyMapOutput() DeployKeyMapOutput {
	return i.ToDeployKeyMapOutputWithContext(context.Background())
}

func (i DeployKeyMap) ToDeployKeyMapOutputWithContext(ctx context.Context) DeployKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployKeyMapOutput)
}

func (i DeployKeyMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DeployKey] {
	return pulumix.Output[map[string]*DeployKey]{
		OutputState: i.ToDeployKeyMapOutputWithContext(ctx).OutputState,
	}
}

type DeployKeyOutput struct{ *pulumi.OutputState }

func (DeployKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployKey)(nil)).Elem()
}

func (o DeployKeyOutput) ToDeployKeyOutput() DeployKeyOutput {
	return o
}

func (o DeployKeyOutput) ToDeployKeyOutputWithContext(ctx context.Context) DeployKeyOutput {
	return o
}

func (o DeployKeyOutput) ToOutput(ctx context.Context) pulumix.Output[*DeployKey] {
	return pulumix.Output[*DeployKey]{
		OutputState: o.OutputState,
	}
}

func (o DeployKeyOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployKey) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

func (o DeployKeyOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeployKey) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

func (o DeployKeyOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployKey) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

func (o DeployKeyOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeployKey) pulumi.StringPtrOutput { return v.Label }).(pulumi.StringPtrOutput)
}

func (o DeployKeyOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployKey) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o DeployKeyOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployKey) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type DeployKeyArrayOutput struct{ *pulumi.OutputState }

func (DeployKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeployKey)(nil)).Elem()
}

func (o DeployKeyArrayOutput) ToDeployKeyArrayOutput() DeployKeyArrayOutput {
	return o
}

func (o DeployKeyArrayOutput) ToDeployKeyArrayOutputWithContext(ctx context.Context) DeployKeyArrayOutput {
	return o
}

func (o DeployKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DeployKey] {
	return pulumix.Output[[]*DeployKey]{
		OutputState: o.OutputState,
	}
}

func (o DeployKeyArrayOutput) Index(i pulumi.IntInput) DeployKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeployKey {
		return vs[0].([]*DeployKey)[vs[1].(int)]
	}).(DeployKeyOutput)
}

type DeployKeyMapOutput struct{ *pulumi.OutputState }

func (DeployKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeployKey)(nil)).Elem()
}

func (o DeployKeyMapOutput) ToDeployKeyMapOutput() DeployKeyMapOutput {
	return o
}

func (o DeployKeyMapOutput) ToDeployKeyMapOutputWithContext(ctx context.Context) DeployKeyMapOutput {
	return o
}

func (o DeployKeyMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DeployKey] {
	return pulumix.Output[map[string]*DeployKey]{
		OutputState: o.OutputState,
	}
}

func (o DeployKeyMapOutput) MapIndex(k pulumi.StringInput) DeployKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeployKey {
		return vs[0].(map[string]*DeployKey)[vs[1].(string)]
	}).(DeployKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeployKeyInput)(nil)).Elem(), &DeployKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployKeyArrayInput)(nil)).Elem(), DeployKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployKeyMapInput)(nil)).Elem(), DeployKeyMap{})
	pulumi.RegisterOutputType(DeployKeyOutput{})
	pulumi.RegisterOutputType(DeployKeyArrayOutput{})
	pulumi.RegisterOutputType(DeployKeyMapOutput{})
}
