// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

type Repository struct {
	pulumi.CustomResourceState

	CloneHttps                  pulumi.StringOutput    `pulumi:"cloneHttps"`
	CloneSsh                    pulumi.StringOutput    `pulumi:"cloneSsh"`
	Description                 pulumi.StringPtrOutput `pulumi:"description"`
	ForkPolicy                  pulumi.StringPtrOutput `pulumi:"forkPolicy"`
	HasIssues                   pulumi.BoolPtrOutput   `pulumi:"hasIssues"`
	HasWiki                     pulumi.BoolPtrOutput   `pulumi:"hasWiki"`
	InheritBranchingModel       pulumi.BoolOutput      `pulumi:"inheritBranchingModel"`
	InheritDefaultMergeStrategy pulumi.BoolOutput      `pulumi:"inheritDefaultMergeStrategy"`
	IsPrivate                   pulumi.BoolPtrOutput   `pulumi:"isPrivate"`
	Language                    pulumi.StringPtrOutput `pulumi:"language"`
	Link                        RepositoryLinkOutput   `pulumi:"link"`
	Name                        pulumi.StringOutput    `pulumi:"name"`
	Owner                       pulumi.StringOutput    `pulumi:"owner"`
	PipelinesEnabled            pulumi.BoolPtrOutput   `pulumi:"pipelinesEnabled"`
	ProjectKey                  pulumi.StringOutput    `pulumi:"projectKey"`
	Scm                         pulumi.StringPtrOutput `pulumi:"scm"`
	Slug                        pulumi.StringOutput    `pulumi:"slug"`
	Uuid                        pulumi.StringOutput    `pulumi:"uuid"`
	Website                     pulumi.StringPtrOutput `pulumi:"website"`
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOption) (*Repository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Repository
	err := ctx.RegisterResource("bitbucket:index/repository:Repository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryState, opts ...pulumi.ResourceOption) (*Repository, error) {
	var resource Repository
	err := ctx.ReadResource("bitbucket:index/repository:Repository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repository resources.
type repositoryState struct {
	CloneHttps                  *string         `pulumi:"cloneHttps"`
	CloneSsh                    *string         `pulumi:"cloneSsh"`
	Description                 *string         `pulumi:"description"`
	ForkPolicy                  *string         `pulumi:"forkPolicy"`
	HasIssues                   *bool           `pulumi:"hasIssues"`
	HasWiki                     *bool           `pulumi:"hasWiki"`
	InheritBranchingModel       *bool           `pulumi:"inheritBranchingModel"`
	InheritDefaultMergeStrategy *bool           `pulumi:"inheritDefaultMergeStrategy"`
	IsPrivate                   *bool           `pulumi:"isPrivate"`
	Language                    *string         `pulumi:"language"`
	Link                        *RepositoryLink `pulumi:"link"`
	Name                        *string         `pulumi:"name"`
	Owner                       *string         `pulumi:"owner"`
	PipelinesEnabled            *bool           `pulumi:"pipelinesEnabled"`
	ProjectKey                  *string         `pulumi:"projectKey"`
	Scm                         *string         `pulumi:"scm"`
	Slug                        *string         `pulumi:"slug"`
	Uuid                        *string         `pulumi:"uuid"`
	Website                     *string         `pulumi:"website"`
}

type RepositoryState struct {
	CloneHttps                  pulumi.StringPtrInput
	CloneSsh                    pulumi.StringPtrInput
	Description                 pulumi.StringPtrInput
	ForkPolicy                  pulumi.StringPtrInput
	HasIssues                   pulumi.BoolPtrInput
	HasWiki                     pulumi.BoolPtrInput
	InheritBranchingModel       pulumi.BoolPtrInput
	InheritDefaultMergeStrategy pulumi.BoolPtrInput
	IsPrivate                   pulumi.BoolPtrInput
	Language                    pulumi.StringPtrInput
	Link                        RepositoryLinkPtrInput
	Name                        pulumi.StringPtrInput
	Owner                       pulumi.StringPtrInput
	PipelinesEnabled            pulumi.BoolPtrInput
	ProjectKey                  pulumi.StringPtrInput
	Scm                         pulumi.StringPtrInput
	Slug                        pulumi.StringPtrInput
	Uuid                        pulumi.StringPtrInput
	Website                     pulumi.StringPtrInput
}

func (RepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryState)(nil)).Elem()
}

type repositoryArgs struct {
	Description                 *string         `pulumi:"description"`
	ForkPolicy                  *string         `pulumi:"forkPolicy"`
	HasIssues                   *bool           `pulumi:"hasIssues"`
	HasWiki                     *bool           `pulumi:"hasWiki"`
	InheritBranchingModel       *bool           `pulumi:"inheritBranchingModel"`
	InheritDefaultMergeStrategy *bool           `pulumi:"inheritDefaultMergeStrategy"`
	IsPrivate                   *bool           `pulumi:"isPrivate"`
	Language                    *string         `pulumi:"language"`
	Link                        *RepositoryLink `pulumi:"link"`
	Name                        *string         `pulumi:"name"`
	Owner                       string          `pulumi:"owner"`
	PipelinesEnabled            *bool           `pulumi:"pipelinesEnabled"`
	ProjectKey                  *string         `pulumi:"projectKey"`
	Scm                         *string         `pulumi:"scm"`
	Slug                        *string         `pulumi:"slug"`
	Website                     *string         `pulumi:"website"`
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	Description                 pulumi.StringPtrInput
	ForkPolicy                  pulumi.StringPtrInput
	HasIssues                   pulumi.BoolPtrInput
	HasWiki                     pulumi.BoolPtrInput
	InheritBranchingModel       pulumi.BoolPtrInput
	InheritDefaultMergeStrategy pulumi.BoolPtrInput
	IsPrivate                   pulumi.BoolPtrInput
	Language                    pulumi.StringPtrInput
	Link                        RepositoryLinkPtrInput
	Name                        pulumi.StringPtrInput
	Owner                       pulumi.StringInput
	PipelinesEnabled            pulumi.BoolPtrInput
	ProjectKey                  pulumi.StringPtrInput
	Scm                         pulumi.StringPtrInput
	Slug                        pulumi.StringPtrInput
	Website                     pulumi.StringPtrInput
}

func (RepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryArgs)(nil)).Elem()
}

type RepositoryInput interface {
	pulumi.Input

	ToRepositoryOutput() RepositoryOutput
	ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput
}

func (*Repository) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (i *Repository) ToRepositoryOutput() RepositoryOutput {
	return i.ToRepositoryOutputWithContext(context.Background())
}

func (i *Repository) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOutput)
}

func (i *Repository) ToOutput(ctx context.Context) pulumix.Output[*Repository] {
	return pulumix.Output[*Repository]{
		OutputState: i.ToRepositoryOutputWithContext(ctx).OutputState,
	}
}

// RepositoryArrayInput is an input type that accepts RepositoryArray and RepositoryArrayOutput values.
// You can construct a concrete instance of `RepositoryArrayInput` via:
//
//	RepositoryArray{ RepositoryArgs{...} }
type RepositoryArrayInput interface {
	pulumi.Input

	ToRepositoryArrayOutput() RepositoryArrayOutput
	ToRepositoryArrayOutputWithContext(context.Context) RepositoryArrayOutput
}

type RepositoryArray []RepositoryInput

func (RepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (i RepositoryArray) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return i.ToRepositoryArrayOutputWithContext(context.Background())
}

func (i RepositoryArray) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryArrayOutput)
}

func (i RepositoryArray) ToOutput(ctx context.Context) pulumix.Output[[]*Repository] {
	return pulumix.Output[[]*Repository]{
		OutputState: i.ToRepositoryArrayOutputWithContext(ctx).OutputState,
	}
}

// RepositoryMapInput is an input type that accepts RepositoryMap and RepositoryMapOutput values.
// You can construct a concrete instance of `RepositoryMapInput` via:
//
//	RepositoryMap{ "key": RepositoryArgs{...} }
type RepositoryMapInput interface {
	pulumi.Input

	ToRepositoryMapOutput() RepositoryMapOutput
	ToRepositoryMapOutputWithContext(context.Context) RepositoryMapOutput
}

type RepositoryMap map[string]RepositoryInput

func (RepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (i RepositoryMap) ToRepositoryMapOutput() RepositoryMapOutput {
	return i.ToRepositoryMapOutputWithContext(context.Background())
}

func (i RepositoryMap) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMapOutput)
}

func (i RepositoryMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Repository] {
	return pulumix.Output[map[string]*Repository]{
		OutputState: i.ToRepositoryMapOutputWithContext(ctx).OutputState,
	}
}

type RepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (o RepositoryOutput) ToRepositoryOutput() RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToOutput(ctx context.Context) pulumix.Output[*Repository] {
	return pulumix.Output[*Repository]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryOutput) CloneHttps() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.CloneHttps }).(pulumi.StringOutput)
}

func (o RepositoryOutput) CloneSsh() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.CloneSsh }).(pulumi.StringOutput)
}

func (o RepositoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RepositoryOutput) ForkPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.ForkPolicy }).(pulumi.StringPtrOutput)
}

func (o RepositoryOutput) HasIssues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.HasIssues }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) HasWiki() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.HasWiki }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) InheritBranchingModel() pulumi.BoolOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolOutput { return v.InheritBranchingModel }).(pulumi.BoolOutput)
}

func (o RepositoryOutput) InheritDefaultMergeStrategy() pulumi.BoolOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolOutput { return v.InheritDefaultMergeStrategy }).(pulumi.BoolOutput)
}

func (o RepositoryOutput) IsPrivate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.IsPrivate }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.Language }).(pulumi.StringPtrOutput)
}

func (o RepositoryOutput) Link() RepositoryLinkOutput {
	return o.ApplyT(func(v *Repository) RepositoryLinkOutput { return v.Link }).(RepositoryLinkOutput)
}

func (o RepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RepositoryOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o RepositoryOutput) PipelinesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolPtrOutput { return v.PipelinesEnabled }).(pulumi.BoolPtrOutput)
}

func (o RepositoryOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.ProjectKey }).(pulumi.StringOutput)
}

func (o RepositoryOutput) Scm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.Scm }).(pulumi.StringPtrOutput)
}

func (o RepositoryOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o RepositoryOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

func (o RepositoryOutput) Website() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringPtrOutput { return v.Website }).(pulumi.StringPtrOutput)
}

type RepositoryArrayOutput struct{ *pulumi.OutputState }

func (RepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Repository] {
	return pulumix.Output[[]*Repository]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryArrayOutput) Index(i pulumi.IntInput) RepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].([]*Repository)[vs[1].(int)]
	}).(RepositoryOutput)
}

type RepositoryMapOutput struct{ *pulumi.OutputState }

func (RepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (o RepositoryMapOutput) ToRepositoryMapOutput() RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Repository] {
	return pulumix.Output[map[string]*Repository]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryMapOutput) MapIndex(k pulumi.StringInput) RepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].(map[string]*Repository)[vs[1].(string)]
	}).(RepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryInput)(nil)).Elem(), &Repository{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryArrayInput)(nil)).Elem(), RepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMapInput)(nil)).Elem(), RepositoryMap{})
	pulumi.RegisterOutputType(RepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryArrayOutput{})
	pulumi.RegisterOutputType(RepositoryMapOutput{})
}
