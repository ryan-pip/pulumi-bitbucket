// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

type CommitFile struct {
	pulumi.CustomResourceState

	Branch pulumi.StringOutput `pulumi:"branch"`
	// The SHA of the commit that modified the file
	CommitAuthor pulumi.StringOutput `pulumi:"commitAuthor"`
	// The SHA of the commit that modified the file
	CommitMessage pulumi.StringOutput `pulumi:"commitMessage"`
	// The SHA of the commit that modified the file
	CommitSha pulumi.StringOutput `pulumi:"commitSha"`
	Content   pulumi.StringOutput `pulumi:"content"`
	Filename  pulumi.StringOutput `pulumi:"filename"`
	RepoSlug  pulumi.StringOutput `pulumi:"repoSlug"`
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewCommitFile registers a new resource with the given unique name, arguments, and options.
func NewCommitFile(ctx *pulumi.Context,
	name string, args *CommitFileArgs, opts ...pulumi.ResourceOption) (*CommitFile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Branch == nil {
		return nil, errors.New("invalid value for required argument 'Branch'")
	}
	if args.CommitAuthor == nil {
		return nil, errors.New("invalid value for required argument 'CommitAuthor'")
	}
	if args.CommitMessage == nil {
		return nil, errors.New("invalid value for required argument 'CommitMessage'")
	}
	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.Filename == nil {
		return nil, errors.New("invalid value for required argument 'Filename'")
	}
	if args.RepoSlug == nil {
		return nil, errors.New("invalid value for required argument 'RepoSlug'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CommitFile
	err := ctx.RegisterResource("bitbucket:index/commitFile:CommitFile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCommitFile gets an existing CommitFile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCommitFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CommitFileState, opts ...pulumi.ResourceOption) (*CommitFile, error) {
	var resource CommitFile
	err := ctx.ReadResource("bitbucket:index/commitFile:CommitFile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CommitFile resources.
type commitFileState struct {
	Branch *string `pulumi:"branch"`
	// The SHA of the commit that modified the file
	CommitAuthor *string `pulumi:"commitAuthor"`
	// The SHA of the commit that modified the file
	CommitMessage *string `pulumi:"commitMessage"`
	// The SHA of the commit that modified the file
	CommitSha *string `pulumi:"commitSha"`
	Content   *string `pulumi:"content"`
	Filename  *string `pulumi:"filename"`
	RepoSlug  *string `pulumi:"repoSlug"`
	Workspace *string `pulumi:"workspace"`
}

type CommitFileState struct {
	Branch pulumi.StringPtrInput
	// The SHA of the commit that modified the file
	CommitAuthor pulumi.StringPtrInput
	// The SHA of the commit that modified the file
	CommitMessage pulumi.StringPtrInput
	// The SHA of the commit that modified the file
	CommitSha pulumi.StringPtrInput
	Content   pulumi.StringPtrInput
	Filename  pulumi.StringPtrInput
	RepoSlug  pulumi.StringPtrInput
	Workspace pulumi.StringPtrInput
}

func (CommitFileState) ElementType() reflect.Type {
	return reflect.TypeOf((*commitFileState)(nil)).Elem()
}

type commitFileArgs struct {
	Branch string `pulumi:"branch"`
	// The SHA of the commit that modified the file
	CommitAuthor string `pulumi:"commitAuthor"`
	// The SHA of the commit that modified the file
	CommitMessage string `pulumi:"commitMessage"`
	Content       string `pulumi:"content"`
	Filename      string `pulumi:"filename"`
	RepoSlug      string `pulumi:"repoSlug"`
	Workspace     string `pulumi:"workspace"`
}

// The set of arguments for constructing a CommitFile resource.
type CommitFileArgs struct {
	Branch pulumi.StringInput
	// The SHA of the commit that modified the file
	CommitAuthor pulumi.StringInput
	// The SHA of the commit that modified the file
	CommitMessage pulumi.StringInput
	Content       pulumi.StringInput
	Filename      pulumi.StringInput
	RepoSlug      pulumi.StringInput
	Workspace     pulumi.StringInput
}

func (CommitFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*commitFileArgs)(nil)).Elem()
}

type CommitFileInput interface {
	pulumi.Input

	ToCommitFileOutput() CommitFileOutput
	ToCommitFileOutputWithContext(ctx context.Context) CommitFileOutput
}

func (*CommitFile) ElementType() reflect.Type {
	return reflect.TypeOf((**CommitFile)(nil)).Elem()
}

func (i *CommitFile) ToCommitFileOutput() CommitFileOutput {
	return i.ToCommitFileOutputWithContext(context.Background())
}

func (i *CommitFile) ToCommitFileOutputWithContext(ctx context.Context) CommitFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitFileOutput)
}

func (i *CommitFile) ToOutput(ctx context.Context) pulumix.Output[*CommitFile] {
	return pulumix.Output[*CommitFile]{
		OutputState: i.ToCommitFileOutputWithContext(ctx).OutputState,
	}
}

// CommitFileArrayInput is an input type that accepts CommitFileArray and CommitFileArrayOutput values.
// You can construct a concrete instance of `CommitFileArrayInput` via:
//
//	CommitFileArray{ CommitFileArgs{...} }
type CommitFileArrayInput interface {
	pulumi.Input

	ToCommitFileArrayOutput() CommitFileArrayOutput
	ToCommitFileArrayOutputWithContext(context.Context) CommitFileArrayOutput
}

type CommitFileArray []CommitFileInput

func (CommitFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CommitFile)(nil)).Elem()
}

func (i CommitFileArray) ToCommitFileArrayOutput() CommitFileArrayOutput {
	return i.ToCommitFileArrayOutputWithContext(context.Background())
}

func (i CommitFileArray) ToCommitFileArrayOutputWithContext(ctx context.Context) CommitFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitFileArrayOutput)
}

func (i CommitFileArray) ToOutput(ctx context.Context) pulumix.Output[[]*CommitFile] {
	return pulumix.Output[[]*CommitFile]{
		OutputState: i.ToCommitFileArrayOutputWithContext(ctx).OutputState,
	}
}

// CommitFileMapInput is an input type that accepts CommitFileMap and CommitFileMapOutput values.
// You can construct a concrete instance of `CommitFileMapInput` via:
//
//	CommitFileMap{ "key": CommitFileArgs{...} }
type CommitFileMapInput interface {
	pulumi.Input

	ToCommitFileMapOutput() CommitFileMapOutput
	ToCommitFileMapOutputWithContext(context.Context) CommitFileMapOutput
}

type CommitFileMap map[string]CommitFileInput

func (CommitFileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CommitFile)(nil)).Elem()
}

func (i CommitFileMap) ToCommitFileMapOutput() CommitFileMapOutput {
	return i.ToCommitFileMapOutputWithContext(context.Background())
}

func (i CommitFileMap) ToCommitFileMapOutputWithContext(ctx context.Context) CommitFileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommitFileMapOutput)
}

func (i CommitFileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CommitFile] {
	return pulumix.Output[map[string]*CommitFile]{
		OutputState: i.ToCommitFileMapOutputWithContext(ctx).OutputState,
	}
}

type CommitFileOutput struct{ *pulumi.OutputState }

func (CommitFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommitFile)(nil)).Elem()
}

func (o CommitFileOutput) ToCommitFileOutput() CommitFileOutput {
	return o
}

func (o CommitFileOutput) ToCommitFileOutputWithContext(ctx context.Context) CommitFileOutput {
	return o
}

func (o CommitFileOutput) ToOutput(ctx context.Context) pulumix.Output[*CommitFile] {
	return pulumix.Output[*CommitFile]{
		OutputState: o.OutputState,
	}
}

func (o CommitFileOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v *CommitFile) pulumi.StringOutput { return v.Branch }).(pulumi.StringOutput)
}

// The SHA of the commit that modified the file
func (o CommitFileOutput) CommitAuthor() pulumi.StringOutput {
	return o.ApplyT(func(v *CommitFile) pulumi.StringOutput { return v.CommitAuthor }).(pulumi.StringOutput)
}

// The SHA of the commit that modified the file
func (o CommitFileOutput) CommitMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *CommitFile) pulumi.StringOutput { return v.CommitMessage }).(pulumi.StringOutput)
}

// The SHA of the commit that modified the file
func (o CommitFileOutput) CommitSha() pulumi.StringOutput {
	return o.ApplyT(func(v *CommitFile) pulumi.StringOutput { return v.CommitSha }).(pulumi.StringOutput)
}

func (o CommitFileOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *CommitFile) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

func (o CommitFileOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v *CommitFile) pulumi.StringOutput { return v.Filename }).(pulumi.StringOutput)
}

func (o CommitFileOutput) RepoSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *CommitFile) pulumi.StringOutput { return v.RepoSlug }).(pulumi.StringOutput)
}

func (o CommitFileOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *CommitFile) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type CommitFileArrayOutput struct{ *pulumi.OutputState }

func (CommitFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CommitFile)(nil)).Elem()
}

func (o CommitFileArrayOutput) ToCommitFileArrayOutput() CommitFileArrayOutput {
	return o
}

func (o CommitFileArrayOutput) ToCommitFileArrayOutputWithContext(ctx context.Context) CommitFileArrayOutput {
	return o
}

func (o CommitFileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CommitFile] {
	return pulumix.Output[[]*CommitFile]{
		OutputState: o.OutputState,
	}
}

func (o CommitFileArrayOutput) Index(i pulumi.IntInput) CommitFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CommitFile {
		return vs[0].([]*CommitFile)[vs[1].(int)]
	}).(CommitFileOutput)
}

type CommitFileMapOutput struct{ *pulumi.OutputState }

func (CommitFileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CommitFile)(nil)).Elem()
}

func (o CommitFileMapOutput) ToCommitFileMapOutput() CommitFileMapOutput {
	return o
}

func (o CommitFileMapOutput) ToCommitFileMapOutputWithContext(ctx context.Context) CommitFileMapOutput {
	return o
}

func (o CommitFileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CommitFile] {
	return pulumix.Output[map[string]*CommitFile]{
		OutputState: o.OutputState,
	}
}

func (o CommitFileMapOutput) MapIndex(k pulumi.StringInput) CommitFileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CommitFile {
		return vs[0].(map[string]*CommitFile)[vs[1].(string)]
	}).(CommitFileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CommitFileInput)(nil)).Elem(), &CommitFile{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitFileArrayInput)(nil)).Elem(), CommitFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommitFileMapInput)(nil)).Elem(), CommitFileMap{})
	pulumi.RegisterOutputType(CommitFileOutput{})
	pulumi.RegisterOutputType(CommitFileArrayOutput{})
	pulumi.RegisterOutputType(CommitFileMapOutput{})
}
