// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

// Provides a Bitbucket group resource.
//
// This allows you to manage your groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testWorkspace, err := bitbucket.GetWorkspace(ctx, &bitbucket.GetWorkspaceArgs{
//				Workspace: "example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = bitbucket.NewGroup(ctx, "testGroup", &bitbucket.GroupArgs{
//				Workspace:  *pulumi.String(testWorkspace.Id),
//				AutoAdd:    pulumi.Bool(true),
//				Permission: pulumi.String("read"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Groups can be imported using their `workspace/group-slug` ID, e.g.
//
// ```sh
//
//	$ pulumi import bitbucket:index/group:Group group my-workspace/group-slug
//
// ```
type Group struct {
	pulumi.CustomResourceState

	// Whether to automatically add users the group
	AutoAdd pulumi.BoolPtrOutput `pulumi:"autoAdd"`
	// Whether to disable email forwarding for group.
	EmailForwardingDisabled pulumi.BoolPtrOutput `pulumi:"emailForwardingDisabled"`
	// The name of the group.
	Name pulumi.StringOutput `pulumi:"name"`
	// One of `read`, `write`, and `admin`.
	Permission pulumi.StringPtrOutput `pulumi:"permission"`
	// The groups slug.
	Slug pulumi.StringOutput `pulumi:"slug"`
	// The workspace of this repository.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("bitbucket:index/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("bitbucket:index/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	// Whether to automatically add users the group
	AutoAdd *bool `pulumi:"autoAdd"`
	// Whether to disable email forwarding for group.
	EmailForwardingDisabled *bool `pulumi:"emailForwardingDisabled"`
	// The name of the group.
	Name *string `pulumi:"name"`
	// One of `read`, `write`, and `admin`.
	Permission *string `pulumi:"permission"`
	// The groups slug.
	Slug *string `pulumi:"slug"`
	// The workspace of this repository.
	Workspace *string `pulumi:"workspace"`
}

type GroupState struct {
	// Whether to automatically add users the group
	AutoAdd pulumi.BoolPtrInput
	// Whether to disable email forwarding for group.
	EmailForwardingDisabled pulumi.BoolPtrInput
	// The name of the group.
	Name pulumi.StringPtrInput
	// One of `read`, `write`, and `admin`.
	Permission pulumi.StringPtrInput
	// The groups slug.
	Slug pulumi.StringPtrInput
	// The workspace of this repository.
	Workspace pulumi.StringPtrInput
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	// Whether to automatically add users the group
	AutoAdd *bool `pulumi:"autoAdd"`
	// Whether to disable email forwarding for group.
	EmailForwardingDisabled *bool `pulumi:"emailForwardingDisabled"`
	// The name of the group.
	Name *string `pulumi:"name"`
	// One of `read`, `write`, and `admin`.
	Permission *string `pulumi:"permission"`
	// The workspace of this repository.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// Whether to automatically add users the group
	AutoAdd pulumi.BoolPtrInput
	// Whether to disable email forwarding for group.
	EmailForwardingDisabled pulumi.BoolPtrInput
	// The name of the group.
	Name pulumi.StringPtrInput
	// One of `read`, `write`, and `admin`.
	Permission pulumi.StringPtrInput
	// The workspace of this repository.
	Workspace pulumi.StringInput
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(ctx context.Context) GroupOutput
}

func (*Group) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (i *Group) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i *Group) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

// GroupArrayInput is an input type that accepts GroupArray and GroupArrayOutput values.
// You can construct a concrete instance of `GroupArrayInput` via:
//
//	GroupArray{ GroupArgs{...} }
type GroupArrayInput interface {
	pulumi.Input

	ToGroupArrayOutput() GroupArrayOutput
	ToGroupArrayOutputWithContext(context.Context) GroupArrayOutput
}

type GroupArray []GroupInput

func (GroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (i GroupArray) ToGroupArrayOutput() GroupArrayOutput {
	return i.ToGroupArrayOutputWithContext(context.Background())
}

func (i GroupArray) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupArrayOutput)
}

// GroupMapInput is an input type that accepts GroupMap and GroupMapOutput values.
// You can construct a concrete instance of `GroupMapInput` via:
//
//	GroupMap{ "key": GroupArgs{...} }
type GroupMapInput interface {
	pulumi.Input

	ToGroupMapOutput() GroupMapOutput
	ToGroupMapOutputWithContext(context.Context) GroupMapOutput
}

type GroupMap map[string]GroupInput

func (GroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (i GroupMap) ToGroupMapOutput() GroupMapOutput {
	return i.ToGroupMapOutputWithContext(context.Background())
}

func (i GroupMap) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapOutput)
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

// Whether to automatically add users the group
func (o GroupOutput) AutoAdd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.AutoAdd }).(pulumi.BoolPtrOutput)
}

// Whether to disable email forwarding for group.
func (o GroupOutput) EmailForwardingDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.EmailForwardingDisabled }).(pulumi.BoolPtrOutput)
}

// The name of the group.
func (o GroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One of `read`, `write`, and `admin`.
func (o GroupOutput) Permission() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.Permission }).(pulumi.StringPtrOutput)
}

// The groups slug.
func (o GroupOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// The workspace of this repository.
func (o GroupOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type GroupArrayOutput struct{ *pulumi.OutputState }

func (GroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (o GroupArrayOutput) ToGroupArrayOutput() GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) Index(i pulumi.IntInput) GroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Group {
		return vs[0].([]*Group)[vs[1].(int)]
	}).(GroupOutput)
}

type GroupMapOutput struct{ *pulumi.OutputState }

func (GroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (o GroupMapOutput) ToGroupMapOutput() GroupMapOutput {
	return o
}

func (o GroupMapOutput) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return o
}

func (o GroupMapOutput) MapIndex(k pulumi.StringInput) GroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Group {
		return vs[0].(map[string]*Group)[vs[1].(string)]
	}).(GroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInput)(nil)).Elem(), &Group{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupArrayInput)(nil)).Elem(), GroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapInput)(nil)).Elem(), GroupMap{})
	pulumi.RegisterOutputType(GroupOutput{})
	pulumi.RegisterOutputType(GroupArrayOutput{})
	pulumi.RegisterOutputType(GroupMapOutput{})
}
