// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

// Provides a Bitbucket project branching model resource.
//
// This allows you for setting up branching models for your project.
//
// OAuth2 Scopes: `project:admin`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := bitbucket.NewProject(ctx, "exampleProject", &bitbucket.ProjectArgs{
//				Owner: pulumi.String("example"),
//				Key:   pulumi.String("FFFFF"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = bitbucket.NewProjectBranchingModel(ctx, "exampleProjectBranchingModel", &bitbucket.ProjectBranchingModelArgs{
//				Workspace: pulumi.String("example"),
//				Project:   exampleProject.Key,
//				Development: &bitbucket.ProjectBranchingModelDevelopmentArgs{
//					UseMainbranch: pulumi.Bool(true),
//				},
//				BranchTypes: bitbucket.ProjectBranchingModelBranchTypeArray{
//					&bitbucket.ProjectBranchingModelBranchTypeArgs{
//						Enabled: pulumi.Bool(true),
//						Kind:    pulumi.String("feature"),
//						Prefix:  pulumi.String("example/"),
//					},
//					&bitbucket.ProjectBranchingModelBranchTypeArgs{
//						Enabled: pulumi.Bool(true),
//						Kind:    pulumi.String("hotfix"),
//						Prefix:  pulumi.String("hotfix/"),
//					},
//					&bitbucket.ProjectBranchingModelBranchTypeArgs{
//						Enabled: pulumi.Bool(true),
//						Kind:    pulumi.String("release"),
//						Prefix:  pulumi.String("release/"),
//					},
//					&bitbucket.ProjectBranchingModelBranchTypeArgs{
//						Enabled: pulumi.Bool(true),
//						Kind:    pulumi.String("bugfix"),
//						Prefix:  pulumi.String("bugfix/"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Branching Models can be imported using the workspace and project separated by a (`/`), e.g.,
//
// ```sh
//
//	$ pulumi import bitbucket:index/projectBranchingModel:ProjectBranchingModel example workspace/project
//
// ```
type ProjectBranchingModel struct {
	pulumi.CustomResourceState

	// A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
	BranchTypes ProjectBranchingModelBranchTypeArrayOutput `pulumi:"branchTypes"`
	// The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
	Development ProjectBranchingModelDevelopmentOutput `pulumi:"development"`
	// The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
	Production ProjectBranchingModelProductionPtrOutput `pulumi:"production"`
	// The key of the project.
	Project pulumi.StringOutput `pulumi:"project"`
	// The workspace of this project. Can be you or any team you
	// have write access to.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewProjectBranchingModel registers a new resource with the given unique name, arguments, and options.
func NewProjectBranchingModel(ctx *pulumi.Context,
	name string, args *ProjectBranchingModelArgs, opts ...pulumi.ResourceOption) (*ProjectBranchingModel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Development == nil {
		return nil, errors.New("invalid value for required argument 'Development'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectBranchingModel
	err := ctx.RegisterResource("bitbucket:index/projectBranchingModel:ProjectBranchingModel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectBranchingModel gets an existing ProjectBranchingModel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectBranchingModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectBranchingModelState, opts ...pulumi.ResourceOption) (*ProjectBranchingModel, error) {
	var resource ProjectBranchingModel
	err := ctx.ReadResource("bitbucket:index/projectBranchingModel:ProjectBranchingModel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectBranchingModel resources.
type projectBranchingModelState struct {
	// A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
	BranchTypes []ProjectBranchingModelBranchType `pulumi:"branchTypes"`
	// The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
	Development *ProjectBranchingModelDevelopment `pulumi:"development"`
	// The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
	Production *ProjectBranchingModelProduction `pulumi:"production"`
	// The key of the project.
	Project *string `pulumi:"project"`
	// The workspace of this project. Can be you or any team you
	// have write access to.
	Workspace *string `pulumi:"workspace"`
}

type ProjectBranchingModelState struct {
	// A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
	BranchTypes ProjectBranchingModelBranchTypeArrayInput
	// The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
	Development ProjectBranchingModelDevelopmentPtrInput
	// The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
	Production ProjectBranchingModelProductionPtrInput
	// The key of the project.
	Project pulumi.StringPtrInput
	// The workspace of this project. Can be you or any team you
	// have write access to.
	Workspace pulumi.StringPtrInput
}

func (ProjectBranchingModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectBranchingModelState)(nil)).Elem()
}

type projectBranchingModelArgs struct {
	// A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
	BranchTypes []ProjectBranchingModelBranchType `pulumi:"branchTypes"`
	// The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
	Development ProjectBranchingModelDevelopment `pulumi:"development"`
	// The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
	Production *ProjectBranchingModelProduction `pulumi:"production"`
	// The key of the project.
	Project string `pulumi:"project"`
	// The workspace of this project. Can be you or any team you
	// have write access to.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a ProjectBranchingModel resource.
type ProjectBranchingModelArgs struct {
	// A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
	BranchTypes ProjectBranchingModelBranchTypeArrayInput
	// The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
	Development ProjectBranchingModelDevelopmentInput
	// The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
	Production ProjectBranchingModelProductionPtrInput
	// The key of the project.
	Project pulumi.StringInput
	// The workspace of this project. Can be you or any team you
	// have write access to.
	Workspace pulumi.StringInput
}

func (ProjectBranchingModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectBranchingModelArgs)(nil)).Elem()
}

type ProjectBranchingModelInput interface {
	pulumi.Input

	ToProjectBranchingModelOutput() ProjectBranchingModelOutput
	ToProjectBranchingModelOutputWithContext(ctx context.Context) ProjectBranchingModelOutput
}

func (*ProjectBranchingModel) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectBranchingModel)(nil)).Elem()
}

func (i *ProjectBranchingModel) ToProjectBranchingModelOutput() ProjectBranchingModelOutput {
	return i.ToProjectBranchingModelOutputWithContext(context.Background())
}

func (i *ProjectBranchingModel) ToProjectBranchingModelOutputWithContext(ctx context.Context) ProjectBranchingModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBranchingModelOutput)
}

// ProjectBranchingModelArrayInput is an input type that accepts ProjectBranchingModelArray and ProjectBranchingModelArrayOutput values.
// You can construct a concrete instance of `ProjectBranchingModelArrayInput` via:
//
//	ProjectBranchingModelArray{ ProjectBranchingModelArgs{...} }
type ProjectBranchingModelArrayInput interface {
	pulumi.Input

	ToProjectBranchingModelArrayOutput() ProjectBranchingModelArrayOutput
	ToProjectBranchingModelArrayOutputWithContext(context.Context) ProjectBranchingModelArrayOutput
}

type ProjectBranchingModelArray []ProjectBranchingModelInput

func (ProjectBranchingModelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectBranchingModel)(nil)).Elem()
}

func (i ProjectBranchingModelArray) ToProjectBranchingModelArrayOutput() ProjectBranchingModelArrayOutput {
	return i.ToProjectBranchingModelArrayOutputWithContext(context.Background())
}

func (i ProjectBranchingModelArray) ToProjectBranchingModelArrayOutputWithContext(ctx context.Context) ProjectBranchingModelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBranchingModelArrayOutput)
}

// ProjectBranchingModelMapInput is an input type that accepts ProjectBranchingModelMap and ProjectBranchingModelMapOutput values.
// You can construct a concrete instance of `ProjectBranchingModelMapInput` via:
//
//	ProjectBranchingModelMap{ "key": ProjectBranchingModelArgs{...} }
type ProjectBranchingModelMapInput interface {
	pulumi.Input

	ToProjectBranchingModelMapOutput() ProjectBranchingModelMapOutput
	ToProjectBranchingModelMapOutputWithContext(context.Context) ProjectBranchingModelMapOutput
}

type ProjectBranchingModelMap map[string]ProjectBranchingModelInput

func (ProjectBranchingModelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectBranchingModel)(nil)).Elem()
}

func (i ProjectBranchingModelMap) ToProjectBranchingModelMapOutput() ProjectBranchingModelMapOutput {
	return i.ToProjectBranchingModelMapOutputWithContext(context.Background())
}

func (i ProjectBranchingModelMap) ToProjectBranchingModelMapOutputWithContext(ctx context.Context) ProjectBranchingModelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectBranchingModelMapOutput)
}

type ProjectBranchingModelOutput struct{ *pulumi.OutputState }

func (ProjectBranchingModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectBranchingModel)(nil)).Elem()
}

func (o ProjectBranchingModelOutput) ToProjectBranchingModelOutput() ProjectBranchingModelOutput {
	return o
}

func (o ProjectBranchingModelOutput) ToProjectBranchingModelOutputWithContext(ctx context.Context) ProjectBranchingModelOutput {
	return o
}

// A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
func (o ProjectBranchingModelOutput) BranchTypes() ProjectBranchingModelBranchTypeArrayOutput {
	return o.ApplyT(func(v *ProjectBranchingModel) ProjectBranchingModelBranchTypeArrayOutput { return v.BranchTypes }).(ProjectBranchingModelBranchTypeArrayOutput)
}

// The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
func (o ProjectBranchingModelOutput) Development() ProjectBranchingModelDevelopmentOutput {
	return o.ApplyT(func(v *ProjectBranchingModel) ProjectBranchingModelDevelopmentOutput { return v.Development }).(ProjectBranchingModelDevelopmentOutput)
}

// The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
func (o ProjectBranchingModelOutput) Production() ProjectBranchingModelProductionPtrOutput {
	return o.ApplyT(func(v *ProjectBranchingModel) ProjectBranchingModelProductionPtrOutput { return v.Production }).(ProjectBranchingModelProductionPtrOutput)
}

// The key of the project.
func (o ProjectBranchingModelOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectBranchingModel) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The workspace of this project. Can be you or any team you
// have write access to.
func (o ProjectBranchingModelOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectBranchingModel) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type ProjectBranchingModelArrayOutput struct{ *pulumi.OutputState }

func (ProjectBranchingModelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectBranchingModel)(nil)).Elem()
}

func (o ProjectBranchingModelArrayOutput) ToProjectBranchingModelArrayOutput() ProjectBranchingModelArrayOutput {
	return o
}

func (o ProjectBranchingModelArrayOutput) ToProjectBranchingModelArrayOutputWithContext(ctx context.Context) ProjectBranchingModelArrayOutput {
	return o
}

func (o ProjectBranchingModelArrayOutput) Index(i pulumi.IntInput) ProjectBranchingModelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectBranchingModel {
		return vs[0].([]*ProjectBranchingModel)[vs[1].(int)]
	}).(ProjectBranchingModelOutput)
}

type ProjectBranchingModelMapOutput struct{ *pulumi.OutputState }

func (ProjectBranchingModelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectBranchingModel)(nil)).Elem()
}

func (o ProjectBranchingModelMapOutput) ToProjectBranchingModelMapOutput() ProjectBranchingModelMapOutput {
	return o
}

func (o ProjectBranchingModelMapOutput) ToProjectBranchingModelMapOutputWithContext(ctx context.Context) ProjectBranchingModelMapOutput {
	return o
}

func (o ProjectBranchingModelMapOutput) MapIndex(k pulumi.StringInput) ProjectBranchingModelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectBranchingModel {
		return vs[0].(map[string]*ProjectBranchingModel)[vs[1].(string)]
	}).(ProjectBranchingModelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectBranchingModelInput)(nil)).Elem(), &ProjectBranchingModel{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectBranchingModelArrayInput)(nil)).Elem(), ProjectBranchingModelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectBranchingModelMapInput)(nil)).Elem(), ProjectBranchingModelMap{})
	pulumi.RegisterOutputType(ProjectBranchingModelOutput{})
	pulumi.RegisterOutputType(ProjectBranchingModelArrayOutput{})
	pulumi.RegisterOutputType(ProjectBranchingModelMapOutput{})
}
