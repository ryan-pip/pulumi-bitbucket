// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

type RepositoryVariable struct {
	pulumi.CustomResourceState

	Key        pulumi.StringOutput  `pulumi:"key"`
	Repository pulumi.StringOutput  `pulumi:"repository"`
	Secured    pulumi.BoolPtrOutput `pulumi:"secured"`
	Uuid       pulumi.StringOutput  `pulumi:"uuid"`
	Value      pulumi.StringOutput  `pulumi:"value"`
}

// NewRepositoryVariable registers a new resource with the given unique name, arguments, and options.
func NewRepositoryVariable(ctx *pulumi.Context,
	name string, args *RepositoryVariableArgs, opts ...pulumi.ResourceOption) (*RepositoryVariable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	if args.Value != nil {
		args.Value = pulumi.ToSecret(args.Value).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"value",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RepositoryVariable
	err := ctx.RegisterResource("bitbucket:index/repositoryVariable:RepositoryVariable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepositoryVariable gets an existing RepositoryVariable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepositoryVariable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryVariableState, opts ...pulumi.ResourceOption) (*RepositoryVariable, error) {
	var resource RepositoryVariable
	err := ctx.ReadResource("bitbucket:index/repositoryVariable:RepositoryVariable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RepositoryVariable resources.
type repositoryVariableState struct {
	Key        *string `pulumi:"key"`
	Repository *string `pulumi:"repository"`
	Secured    *bool   `pulumi:"secured"`
	Uuid       *string `pulumi:"uuid"`
	Value      *string `pulumi:"value"`
}

type RepositoryVariableState struct {
	Key        pulumi.StringPtrInput
	Repository pulumi.StringPtrInput
	Secured    pulumi.BoolPtrInput
	Uuid       pulumi.StringPtrInput
	Value      pulumi.StringPtrInput
}

func (RepositoryVariableState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryVariableState)(nil)).Elem()
}

type repositoryVariableArgs struct {
	Key        string `pulumi:"key"`
	Repository string `pulumi:"repository"`
	Secured    *bool  `pulumi:"secured"`
	Value      string `pulumi:"value"`
}

// The set of arguments for constructing a RepositoryVariable resource.
type RepositoryVariableArgs struct {
	Key        pulumi.StringInput
	Repository pulumi.StringInput
	Secured    pulumi.BoolPtrInput
	Value      pulumi.StringInput
}

func (RepositoryVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryVariableArgs)(nil)).Elem()
}

type RepositoryVariableInput interface {
	pulumi.Input

	ToRepositoryVariableOutput() RepositoryVariableOutput
	ToRepositoryVariableOutputWithContext(ctx context.Context) RepositoryVariableOutput
}

func (*RepositoryVariable) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryVariable)(nil)).Elem()
}

func (i *RepositoryVariable) ToRepositoryVariableOutput() RepositoryVariableOutput {
	return i.ToRepositoryVariableOutputWithContext(context.Background())
}

func (i *RepositoryVariable) ToRepositoryVariableOutputWithContext(ctx context.Context) RepositoryVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVariableOutput)
}

func (i *RepositoryVariable) ToOutput(ctx context.Context) pulumix.Output[*RepositoryVariable] {
	return pulumix.Output[*RepositoryVariable]{
		OutputState: i.ToRepositoryVariableOutputWithContext(ctx).OutputState,
	}
}

// RepositoryVariableArrayInput is an input type that accepts RepositoryVariableArray and RepositoryVariableArrayOutput values.
// You can construct a concrete instance of `RepositoryVariableArrayInput` via:
//
//	RepositoryVariableArray{ RepositoryVariableArgs{...} }
type RepositoryVariableArrayInput interface {
	pulumi.Input

	ToRepositoryVariableArrayOutput() RepositoryVariableArrayOutput
	ToRepositoryVariableArrayOutputWithContext(context.Context) RepositoryVariableArrayOutput
}

type RepositoryVariableArray []RepositoryVariableInput

func (RepositoryVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryVariable)(nil)).Elem()
}

func (i RepositoryVariableArray) ToRepositoryVariableArrayOutput() RepositoryVariableArrayOutput {
	return i.ToRepositoryVariableArrayOutputWithContext(context.Background())
}

func (i RepositoryVariableArray) ToRepositoryVariableArrayOutputWithContext(ctx context.Context) RepositoryVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVariableArrayOutput)
}

func (i RepositoryVariableArray) ToOutput(ctx context.Context) pulumix.Output[[]*RepositoryVariable] {
	return pulumix.Output[[]*RepositoryVariable]{
		OutputState: i.ToRepositoryVariableArrayOutputWithContext(ctx).OutputState,
	}
}

// RepositoryVariableMapInput is an input type that accepts RepositoryVariableMap and RepositoryVariableMapOutput values.
// You can construct a concrete instance of `RepositoryVariableMapInput` via:
//
//	RepositoryVariableMap{ "key": RepositoryVariableArgs{...} }
type RepositoryVariableMapInput interface {
	pulumi.Input

	ToRepositoryVariableMapOutput() RepositoryVariableMapOutput
	ToRepositoryVariableMapOutputWithContext(context.Context) RepositoryVariableMapOutput
}

type RepositoryVariableMap map[string]RepositoryVariableInput

func (RepositoryVariableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryVariable)(nil)).Elem()
}

func (i RepositoryVariableMap) ToRepositoryVariableMapOutput() RepositoryVariableMapOutput {
	return i.ToRepositoryVariableMapOutputWithContext(context.Background())
}

func (i RepositoryVariableMap) ToRepositoryVariableMapOutputWithContext(ctx context.Context) RepositoryVariableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryVariableMapOutput)
}

func (i RepositoryVariableMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RepositoryVariable] {
	return pulumix.Output[map[string]*RepositoryVariable]{
		OutputState: i.ToRepositoryVariableMapOutputWithContext(ctx).OutputState,
	}
}

type RepositoryVariableOutput struct{ *pulumi.OutputState }

func (RepositoryVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryVariable)(nil)).Elem()
}

func (o RepositoryVariableOutput) ToRepositoryVariableOutput() RepositoryVariableOutput {
	return o
}

func (o RepositoryVariableOutput) ToRepositoryVariableOutputWithContext(ctx context.Context) RepositoryVariableOutput {
	return o
}

func (o RepositoryVariableOutput) ToOutput(ctx context.Context) pulumix.Output[*RepositoryVariable] {
	return pulumix.Output[*RepositoryVariable]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryVariableOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryVariable) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

func (o RepositoryVariableOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryVariable) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o RepositoryVariableOutput) Secured() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepositoryVariable) pulumi.BoolPtrOutput { return v.Secured }).(pulumi.BoolPtrOutput)
}

func (o RepositoryVariableOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryVariable) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

func (o RepositoryVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *RepositoryVariable) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type RepositoryVariableArrayOutput struct{ *pulumi.OutputState }

func (RepositoryVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RepositoryVariable)(nil)).Elem()
}

func (o RepositoryVariableArrayOutput) ToRepositoryVariableArrayOutput() RepositoryVariableArrayOutput {
	return o
}

func (o RepositoryVariableArrayOutput) ToRepositoryVariableArrayOutputWithContext(ctx context.Context) RepositoryVariableArrayOutput {
	return o
}

func (o RepositoryVariableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RepositoryVariable] {
	return pulumix.Output[[]*RepositoryVariable]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryVariableArrayOutput) Index(i pulumi.IntInput) RepositoryVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RepositoryVariable {
		return vs[0].([]*RepositoryVariable)[vs[1].(int)]
	}).(RepositoryVariableOutput)
}

type RepositoryVariableMapOutput struct{ *pulumi.OutputState }

func (RepositoryVariableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RepositoryVariable)(nil)).Elem()
}

func (o RepositoryVariableMapOutput) ToRepositoryVariableMapOutput() RepositoryVariableMapOutput {
	return o
}

func (o RepositoryVariableMapOutput) ToRepositoryVariableMapOutputWithContext(ctx context.Context) RepositoryVariableMapOutput {
	return o
}

func (o RepositoryVariableMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RepositoryVariable] {
	return pulumix.Output[map[string]*RepositoryVariable]{
		OutputState: o.OutputState,
	}
}

func (o RepositoryVariableMapOutput) MapIndex(k pulumi.StringInput) RepositoryVariableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RepositoryVariable {
		return vs[0].(map[string]*RepositoryVariable)[vs[1].(string)]
	}).(RepositoryVariableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryVariableInput)(nil)).Elem(), &RepositoryVariable{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryVariableArrayInput)(nil)).Elem(), RepositoryVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryVariableMapInput)(nil)).Elem(), RepositoryVariableMap{})
	pulumi.RegisterOutputType(RepositoryVariableOutput{})
	pulumi.RegisterOutputType(RepositoryVariableArrayOutput{})
	pulumi.RegisterOutputType(RepositoryVariableMapOutput{})
}
