// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

// Provides a Bitbucket branch restriction resource.
//
// This allows you for setting up branch restrictions for your repository.
//
// OAuth2 Scopes: `repository:admin`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bitbucket.NewBranchRestriction(ctx, "master", &bitbucket.BranchRestrictionArgs{
//				Groups: bitbucket.BranchRestrictionGroupArray{
//					&bitbucket.BranchRestrictionGroupArgs{
//						Owner: pulumi.String("my-owner"),
//						Slug:  pulumi.String("my-group"),
//					},
//				},
//				Kind:       pulumi.String("push"),
//				Owner:      pulumi.String("myteam"),
//				Pattern:    pulumi.String("master"),
//				Repository: pulumi.String("terraform-code"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Branch Restrictions can be imported using their `owner/repo-name/branch-restriction-id` ID, e.g.
//
// ```sh
//
//	$ pulumi import bitbucket:index/branchRestriction:BranchRestriction example my-account/my-repo/branch-rest-id
//
// ```
type BranchRestriction struct {
	pulumi.CustomResourceState

	// Indicates how the restriction is matched against a branch. The default is `glob`. Valid values: `branchingModel`, `glob`.
	BranchMatchKind pulumi.StringPtrOutput `pulumi:"branchMatchKind"`
	// Apply the restriction to branches of this type. Active when `branchMatchKind` is `branchingModel`. The branch type will be calculated using the branching model configured for the repository. Valid values: `feature`, `bugfix`, `release`, `hotfix`, `development`, `production`.
	BranchType pulumi.StringPtrOutput `pulumi:"branchType"`
	// A list of groups to use.
	Groups BranchRestrictionGroupArrayOutput `pulumi:"groups"`
	// The type of restriction that is being applied. Valid values can be found in [docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-branch-restrictions/#api-group-branch-restrictions).
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Apply the restriction to branches that match this pattern. Active when `branchMatchKind` is `glob`. Will be empty when `branchMatchKind` is `branchingModel`.
	Pattern pulumi.StringPtrOutput `pulumi:"pattern"`
	// The name of the repository.
	Repository pulumi.StringOutput `pulumi:"repository"`
	// A list of users to use.
	Users pulumi.StringArrayOutput `pulumi:"users"`
	// A value applied to the restriction kind. Currently only applicable to `requirePassingBuildsToMerge`, `requireDefaultReviewerApprovalsToMerge` and `requireApprovalsToMerge`.
	Value pulumi.IntPtrOutput `pulumi:"value"`
}

// NewBranchRestriction registers a new resource with the given unique name, arguments, and options.
func NewBranchRestriction(ctx *pulumi.Context,
	name string, args *BranchRestrictionArgs, opts ...pulumi.ResourceOption) (*BranchRestriction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BranchRestriction
	err := ctx.RegisterResource("bitbucket:index/branchRestriction:BranchRestriction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBranchRestriction gets an existing BranchRestriction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBranchRestriction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BranchRestrictionState, opts ...pulumi.ResourceOption) (*BranchRestriction, error) {
	var resource BranchRestriction
	err := ctx.ReadResource("bitbucket:index/branchRestriction:BranchRestriction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BranchRestriction resources.
type branchRestrictionState struct {
	// Indicates how the restriction is matched against a branch. The default is `glob`. Valid values: `branchingModel`, `glob`.
	BranchMatchKind *string `pulumi:"branchMatchKind"`
	// Apply the restriction to branches of this type. Active when `branchMatchKind` is `branchingModel`. The branch type will be calculated using the branching model configured for the repository. Valid values: `feature`, `bugfix`, `release`, `hotfix`, `development`, `production`.
	BranchType *string `pulumi:"branchType"`
	// A list of groups to use.
	Groups []BranchRestrictionGroup `pulumi:"groups"`
	// The type of restriction that is being applied. Valid values can be found in [docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-branch-restrictions/#api-group-branch-restrictions).
	Kind *string `pulumi:"kind"`
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner *string `pulumi:"owner"`
	// Apply the restriction to branches that match this pattern. Active when `branchMatchKind` is `glob`. Will be empty when `branchMatchKind` is `branchingModel`.
	Pattern *string `pulumi:"pattern"`
	// The name of the repository.
	Repository *string `pulumi:"repository"`
	// A list of users to use.
	Users []string `pulumi:"users"`
	// A value applied to the restriction kind. Currently only applicable to `requirePassingBuildsToMerge`, `requireDefaultReviewerApprovalsToMerge` and `requireApprovalsToMerge`.
	Value *int `pulumi:"value"`
}

type BranchRestrictionState struct {
	// Indicates how the restriction is matched against a branch. The default is `glob`. Valid values: `branchingModel`, `glob`.
	BranchMatchKind pulumi.StringPtrInput
	// Apply the restriction to branches of this type. Active when `branchMatchKind` is `branchingModel`. The branch type will be calculated using the branching model configured for the repository. Valid values: `feature`, `bugfix`, `release`, `hotfix`, `development`, `production`.
	BranchType pulumi.StringPtrInput
	// A list of groups to use.
	Groups BranchRestrictionGroupArrayInput
	// The type of restriction that is being applied. Valid values can be found in [docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-branch-restrictions/#api-group-branch-restrictions).
	Kind pulumi.StringPtrInput
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner pulumi.StringPtrInput
	// Apply the restriction to branches that match this pattern. Active when `branchMatchKind` is `glob`. Will be empty when `branchMatchKind` is `branchingModel`.
	Pattern pulumi.StringPtrInput
	// The name of the repository.
	Repository pulumi.StringPtrInput
	// A list of users to use.
	Users pulumi.StringArrayInput
	// A value applied to the restriction kind. Currently only applicable to `requirePassingBuildsToMerge`, `requireDefaultReviewerApprovalsToMerge` and `requireApprovalsToMerge`.
	Value pulumi.IntPtrInput
}

func (BranchRestrictionState) ElementType() reflect.Type {
	return reflect.TypeOf((*branchRestrictionState)(nil)).Elem()
}

type branchRestrictionArgs struct {
	// Indicates how the restriction is matched against a branch. The default is `glob`. Valid values: `branchingModel`, `glob`.
	BranchMatchKind *string `pulumi:"branchMatchKind"`
	// Apply the restriction to branches of this type. Active when `branchMatchKind` is `branchingModel`. The branch type will be calculated using the branching model configured for the repository. Valid values: `feature`, `bugfix`, `release`, `hotfix`, `development`, `production`.
	BranchType *string `pulumi:"branchType"`
	// A list of groups to use.
	Groups []BranchRestrictionGroup `pulumi:"groups"`
	// The type of restriction that is being applied. Valid values can be found in [docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-branch-restrictions/#api-group-branch-restrictions).
	Kind string `pulumi:"kind"`
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner string `pulumi:"owner"`
	// Apply the restriction to branches that match this pattern. Active when `branchMatchKind` is `glob`. Will be empty when `branchMatchKind` is `branchingModel`.
	Pattern *string `pulumi:"pattern"`
	// The name of the repository.
	Repository string `pulumi:"repository"`
	// A list of users to use.
	Users []string `pulumi:"users"`
	// A value applied to the restriction kind. Currently only applicable to `requirePassingBuildsToMerge`, `requireDefaultReviewerApprovalsToMerge` and `requireApprovalsToMerge`.
	Value *int `pulumi:"value"`
}

// The set of arguments for constructing a BranchRestriction resource.
type BranchRestrictionArgs struct {
	// Indicates how the restriction is matched against a branch. The default is `glob`. Valid values: `branchingModel`, `glob`.
	BranchMatchKind pulumi.StringPtrInput
	// Apply the restriction to branches of this type. Active when `branchMatchKind` is `branchingModel`. The branch type will be calculated using the branching model configured for the repository. Valid values: `feature`, `bugfix`, `release`, `hotfix`, `development`, `production`.
	BranchType pulumi.StringPtrInput
	// A list of groups to use.
	Groups BranchRestrictionGroupArrayInput
	// The type of restriction that is being applied. Valid values can be found in [docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-branch-restrictions/#api-group-branch-restrictions).
	Kind pulumi.StringInput
	// The owner of this repository. Can be you or any team you
	// have write access to.
	Owner pulumi.StringInput
	// Apply the restriction to branches that match this pattern. Active when `branchMatchKind` is `glob`. Will be empty when `branchMatchKind` is `branchingModel`.
	Pattern pulumi.StringPtrInput
	// The name of the repository.
	Repository pulumi.StringInput
	// A list of users to use.
	Users pulumi.StringArrayInput
	// A value applied to the restriction kind. Currently only applicable to `requirePassingBuildsToMerge`, `requireDefaultReviewerApprovalsToMerge` and `requireApprovalsToMerge`.
	Value pulumi.IntPtrInput
}

func (BranchRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*branchRestrictionArgs)(nil)).Elem()
}

type BranchRestrictionInput interface {
	pulumi.Input

	ToBranchRestrictionOutput() BranchRestrictionOutput
	ToBranchRestrictionOutputWithContext(ctx context.Context) BranchRestrictionOutput
}

func (*BranchRestriction) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchRestriction)(nil)).Elem()
}

func (i *BranchRestriction) ToBranchRestrictionOutput() BranchRestrictionOutput {
	return i.ToBranchRestrictionOutputWithContext(context.Background())
}

func (i *BranchRestriction) ToBranchRestrictionOutputWithContext(ctx context.Context) BranchRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRestrictionOutput)
}

// BranchRestrictionArrayInput is an input type that accepts BranchRestrictionArray and BranchRestrictionArrayOutput values.
// You can construct a concrete instance of `BranchRestrictionArrayInput` via:
//
//	BranchRestrictionArray{ BranchRestrictionArgs{...} }
type BranchRestrictionArrayInput interface {
	pulumi.Input

	ToBranchRestrictionArrayOutput() BranchRestrictionArrayOutput
	ToBranchRestrictionArrayOutputWithContext(context.Context) BranchRestrictionArrayOutput
}

type BranchRestrictionArray []BranchRestrictionInput

func (BranchRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BranchRestriction)(nil)).Elem()
}

func (i BranchRestrictionArray) ToBranchRestrictionArrayOutput() BranchRestrictionArrayOutput {
	return i.ToBranchRestrictionArrayOutputWithContext(context.Background())
}

func (i BranchRestrictionArray) ToBranchRestrictionArrayOutputWithContext(ctx context.Context) BranchRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRestrictionArrayOutput)
}

// BranchRestrictionMapInput is an input type that accepts BranchRestrictionMap and BranchRestrictionMapOutput values.
// You can construct a concrete instance of `BranchRestrictionMapInput` via:
//
//	BranchRestrictionMap{ "key": BranchRestrictionArgs{...} }
type BranchRestrictionMapInput interface {
	pulumi.Input

	ToBranchRestrictionMapOutput() BranchRestrictionMapOutput
	ToBranchRestrictionMapOutputWithContext(context.Context) BranchRestrictionMapOutput
}

type BranchRestrictionMap map[string]BranchRestrictionInput

func (BranchRestrictionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BranchRestriction)(nil)).Elem()
}

func (i BranchRestrictionMap) ToBranchRestrictionMapOutput() BranchRestrictionMapOutput {
	return i.ToBranchRestrictionMapOutputWithContext(context.Background())
}

func (i BranchRestrictionMap) ToBranchRestrictionMapOutputWithContext(ctx context.Context) BranchRestrictionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRestrictionMapOutput)
}

type BranchRestrictionOutput struct{ *pulumi.OutputState }

func (BranchRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchRestriction)(nil)).Elem()
}

func (o BranchRestrictionOutput) ToBranchRestrictionOutput() BranchRestrictionOutput {
	return o
}

func (o BranchRestrictionOutput) ToBranchRestrictionOutputWithContext(ctx context.Context) BranchRestrictionOutput {
	return o
}

// Indicates how the restriction is matched against a branch. The default is `glob`. Valid values: `branchingModel`, `glob`.
func (o BranchRestrictionOutput) BranchMatchKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringPtrOutput { return v.BranchMatchKind }).(pulumi.StringPtrOutput)
}

// Apply the restriction to branches of this type. Active when `branchMatchKind` is `branchingModel`. The branch type will be calculated using the branching model configured for the repository. Valid values: `feature`, `bugfix`, `release`, `hotfix`, `development`, `production`.
func (o BranchRestrictionOutput) BranchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringPtrOutput { return v.BranchType }).(pulumi.StringPtrOutput)
}

// A list of groups to use.
func (o BranchRestrictionOutput) Groups() BranchRestrictionGroupArrayOutput {
	return o.ApplyT(func(v *BranchRestriction) BranchRestrictionGroupArrayOutput { return v.Groups }).(BranchRestrictionGroupArrayOutput)
}

// The type of restriction that is being applied. Valid values can be found in [docs](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-branch-restrictions/#api-group-branch-restrictions).
func (o BranchRestrictionOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The owner of this repository. Can be you or any team you
// have write access to.
func (o BranchRestrictionOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Apply the restriction to branches that match this pattern. Active when `branchMatchKind` is `glob`. Will be empty when `branchMatchKind` is `branchingModel`.
func (o BranchRestrictionOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringPtrOutput { return v.Pattern }).(pulumi.StringPtrOutput)
}

// The name of the repository.
func (o BranchRestrictionOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

// A list of users to use.
func (o BranchRestrictionOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringArrayOutput { return v.Users }).(pulumi.StringArrayOutput)
}

// A value applied to the restriction kind. Currently only applicable to `requirePassingBuildsToMerge`, `requireDefaultReviewerApprovalsToMerge` and `requireApprovalsToMerge`.
func (o BranchRestrictionOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.IntPtrOutput { return v.Value }).(pulumi.IntPtrOutput)
}

type BranchRestrictionArrayOutput struct{ *pulumi.OutputState }

func (BranchRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BranchRestriction)(nil)).Elem()
}

func (o BranchRestrictionArrayOutput) ToBranchRestrictionArrayOutput() BranchRestrictionArrayOutput {
	return o
}

func (o BranchRestrictionArrayOutput) ToBranchRestrictionArrayOutputWithContext(ctx context.Context) BranchRestrictionArrayOutput {
	return o
}

func (o BranchRestrictionArrayOutput) Index(i pulumi.IntInput) BranchRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BranchRestriction {
		return vs[0].([]*BranchRestriction)[vs[1].(int)]
	}).(BranchRestrictionOutput)
}

type BranchRestrictionMapOutput struct{ *pulumi.OutputState }

func (BranchRestrictionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BranchRestriction)(nil)).Elem()
}

func (o BranchRestrictionMapOutput) ToBranchRestrictionMapOutput() BranchRestrictionMapOutput {
	return o
}

func (o BranchRestrictionMapOutput) ToBranchRestrictionMapOutputWithContext(ctx context.Context) BranchRestrictionMapOutput {
	return o
}

func (o BranchRestrictionMapOutput) MapIndex(k pulumi.StringInput) BranchRestrictionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BranchRestriction {
		return vs[0].(map[string]*BranchRestriction)[vs[1].(string)]
	}).(BranchRestrictionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRestrictionInput)(nil)).Elem(), &BranchRestriction{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRestrictionArrayInput)(nil)).Elem(), BranchRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRestrictionMapInput)(nil)).Elem(), BranchRestrictionMap{})
	pulumi.RegisterOutputType(BranchRestrictionOutput{})
	pulumi.RegisterOutputType(BranchRestrictionArrayOutput{})
	pulumi.RegisterOutputType(BranchRestrictionMapOutput{})
}
