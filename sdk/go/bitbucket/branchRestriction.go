// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

type BranchRestriction struct {
	pulumi.CustomResourceState

	BranchMatchKind pulumi.StringPtrOutput            `pulumi:"branchMatchKind"`
	BranchType      pulumi.StringPtrOutput            `pulumi:"branchType"`
	Groups          BranchRestrictionGroupArrayOutput `pulumi:"groups"`
	Kind            pulumi.StringOutput               `pulumi:"kind"`
	Owner           pulumi.StringOutput               `pulumi:"owner"`
	Pattern         pulumi.StringPtrOutput            `pulumi:"pattern"`
	Repository      pulumi.StringOutput               `pulumi:"repository"`
	Users           pulumi.StringArrayOutput          `pulumi:"users"`
	Value           pulumi.IntPtrOutput               `pulumi:"value"`
}

// NewBranchRestriction registers a new resource with the given unique name, arguments, and options.
func NewBranchRestriction(ctx *pulumi.Context,
	name string, args *BranchRestrictionArgs, opts ...pulumi.ResourceOption) (*BranchRestriction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BranchRestriction
	err := ctx.RegisterResource("bitbucket:index/branchRestriction:BranchRestriction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBranchRestriction gets an existing BranchRestriction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBranchRestriction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BranchRestrictionState, opts ...pulumi.ResourceOption) (*BranchRestriction, error) {
	var resource BranchRestriction
	err := ctx.ReadResource("bitbucket:index/branchRestriction:BranchRestriction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BranchRestriction resources.
type branchRestrictionState struct {
	BranchMatchKind *string                  `pulumi:"branchMatchKind"`
	BranchType      *string                  `pulumi:"branchType"`
	Groups          []BranchRestrictionGroup `pulumi:"groups"`
	Kind            *string                  `pulumi:"kind"`
	Owner           *string                  `pulumi:"owner"`
	Pattern         *string                  `pulumi:"pattern"`
	Repository      *string                  `pulumi:"repository"`
	Users           []string                 `pulumi:"users"`
	Value           *int                     `pulumi:"value"`
}

type BranchRestrictionState struct {
	BranchMatchKind pulumi.StringPtrInput
	BranchType      pulumi.StringPtrInput
	Groups          BranchRestrictionGroupArrayInput
	Kind            pulumi.StringPtrInput
	Owner           pulumi.StringPtrInput
	Pattern         pulumi.StringPtrInput
	Repository      pulumi.StringPtrInput
	Users           pulumi.StringArrayInput
	Value           pulumi.IntPtrInput
}

func (BranchRestrictionState) ElementType() reflect.Type {
	return reflect.TypeOf((*branchRestrictionState)(nil)).Elem()
}

type branchRestrictionArgs struct {
	BranchMatchKind *string                  `pulumi:"branchMatchKind"`
	BranchType      *string                  `pulumi:"branchType"`
	Groups          []BranchRestrictionGroup `pulumi:"groups"`
	Kind            string                   `pulumi:"kind"`
	Owner           string                   `pulumi:"owner"`
	Pattern         *string                  `pulumi:"pattern"`
	Repository      string                   `pulumi:"repository"`
	Users           []string                 `pulumi:"users"`
	Value           *int                     `pulumi:"value"`
}

// The set of arguments for constructing a BranchRestriction resource.
type BranchRestrictionArgs struct {
	BranchMatchKind pulumi.StringPtrInput
	BranchType      pulumi.StringPtrInput
	Groups          BranchRestrictionGroupArrayInput
	Kind            pulumi.StringInput
	Owner           pulumi.StringInput
	Pattern         pulumi.StringPtrInput
	Repository      pulumi.StringInput
	Users           pulumi.StringArrayInput
	Value           pulumi.IntPtrInput
}

func (BranchRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*branchRestrictionArgs)(nil)).Elem()
}

type BranchRestrictionInput interface {
	pulumi.Input

	ToBranchRestrictionOutput() BranchRestrictionOutput
	ToBranchRestrictionOutputWithContext(ctx context.Context) BranchRestrictionOutput
}

func (*BranchRestriction) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchRestriction)(nil)).Elem()
}

func (i *BranchRestriction) ToBranchRestrictionOutput() BranchRestrictionOutput {
	return i.ToBranchRestrictionOutputWithContext(context.Background())
}

func (i *BranchRestriction) ToBranchRestrictionOutputWithContext(ctx context.Context) BranchRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRestrictionOutput)
}

func (i *BranchRestriction) ToOutput(ctx context.Context) pulumix.Output[*BranchRestriction] {
	return pulumix.Output[*BranchRestriction]{
		OutputState: i.ToBranchRestrictionOutputWithContext(ctx).OutputState,
	}
}

// BranchRestrictionArrayInput is an input type that accepts BranchRestrictionArray and BranchRestrictionArrayOutput values.
// You can construct a concrete instance of `BranchRestrictionArrayInput` via:
//
//	BranchRestrictionArray{ BranchRestrictionArgs{...} }
type BranchRestrictionArrayInput interface {
	pulumi.Input

	ToBranchRestrictionArrayOutput() BranchRestrictionArrayOutput
	ToBranchRestrictionArrayOutputWithContext(context.Context) BranchRestrictionArrayOutput
}

type BranchRestrictionArray []BranchRestrictionInput

func (BranchRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BranchRestriction)(nil)).Elem()
}

func (i BranchRestrictionArray) ToBranchRestrictionArrayOutput() BranchRestrictionArrayOutput {
	return i.ToBranchRestrictionArrayOutputWithContext(context.Background())
}

func (i BranchRestrictionArray) ToBranchRestrictionArrayOutputWithContext(ctx context.Context) BranchRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRestrictionArrayOutput)
}

func (i BranchRestrictionArray) ToOutput(ctx context.Context) pulumix.Output[[]*BranchRestriction] {
	return pulumix.Output[[]*BranchRestriction]{
		OutputState: i.ToBranchRestrictionArrayOutputWithContext(ctx).OutputState,
	}
}

// BranchRestrictionMapInput is an input type that accepts BranchRestrictionMap and BranchRestrictionMapOutput values.
// You can construct a concrete instance of `BranchRestrictionMapInput` via:
//
//	BranchRestrictionMap{ "key": BranchRestrictionArgs{...} }
type BranchRestrictionMapInput interface {
	pulumi.Input

	ToBranchRestrictionMapOutput() BranchRestrictionMapOutput
	ToBranchRestrictionMapOutputWithContext(context.Context) BranchRestrictionMapOutput
}

type BranchRestrictionMap map[string]BranchRestrictionInput

func (BranchRestrictionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BranchRestriction)(nil)).Elem()
}

func (i BranchRestrictionMap) ToBranchRestrictionMapOutput() BranchRestrictionMapOutput {
	return i.ToBranchRestrictionMapOutputWithContext(context.Background())
}

func (i BranchRestrictionMap) ToBranchRestrictionMapOutputWithContext(ctx context.Context) BranchRestrictionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BranchRestrictionMapOutput)
}

func (i BranchRestrictionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*BranchRestriction] {
	return pulumix.Output[map[string]*BranchRestriction]{
		OutputState: i.ToBranchRestrictionMapOutputWithContext(ctx).OutputState,
	}
}

type BranchRestrictionOutput struct{ *pulumi.OutputState }

func (BranchRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BranchRestriction)(nil)).Elem()
}

func (o BranchRestrictionOutput) ToBranchRestrictionOutput() BranchRestrictionOutput {
	return o
}

func (o BranchRestrictionOutput) ToBranchRestrictionOutputWithContext(ctx context.Context) BranchRestrictionOutput {
	return o
}

func (o BranchRestrictionOutput) ToOutput(ctx context.Context) pulumix.Output[*BranchRestriction] {
	return pulumix.Output[*BranchRestriction]{
		OutputState: o.OutputState,
	}
}

func (o BranchRestrictionOutput) BranchMatchKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringPtrOutput { return v.BranchMatchKind }).(pulumi.StringPtrOutput)
}

func (o BranchRestrictionOutput) BranchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringPtrOutput { return v.BranchType }).(pulumi.StringPtrOutput)
}

func (o BranchRestrictionOutput) Groups() BranchRestrictionGroupArrayOutput {
	return o.ApplyT(func(v *BranchRestriction) BranchRestrictionGroupArrayOutput { return v.Groups }).(BranchRestrictionGroupArrayOutput)
}

func (o BranchRestrictionOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

func (o BranchRestrictionOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o BranchRestrictionOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringPtrOutput { return v.Pattern }).(pulumi.StringPtrOutput)
}

func (o BranchRestrictionOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringOutput { return v.Repository }).(pulumi.StringOutput)
}

func (o BranchRestrictionOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.StringArrayOutput { return v.Users }).(pulumi.StringArrayOutput)
}

func (o BranchRestrictionOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BranchRestriction) pulumi.IntPtrOutput { return v.Value }).(pulumi.IntPtrOutput)
}

type BranchRestrictionArrayOutput struct{ *pulumi.OutputState }

func (BranchRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BranchRestriction)(nil)).Elem()
}

func (o BranchRestrictionArrayOutput) ToBranchRestrictionArrayOutput() BranchRestrictionArrayOutput {
	return o
}

func (o BranchRestrictionArrayOutput) ToBranchRestrictionArrayOutputWithContext(ctx context.Context) BranchRestrictionArrayOutput {
	return o
}

func (o BranchRestrictionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*BranchRestriction] {
	return pulumix.Output[[]*BranchRestriction]{
		OutputState: o.OutputState,
	}
}

func (o BranchRestrictionArrayOutput) Index(i pulumi.IntInput) BranchRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BranchRestriction {
		return vs[0].([]*BranchRestriction)[vs[1].(int)]
	}).(BranchRestrictionOutput)
}

type BranchRestrictionMapOutput struct{ *pulumi.OutputState }

func (BranchRestrictionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BranchRestriction)(nil)).Elem()
}

func (o BranchRestrictionMapOutput) ToBranchRestrictionMapOutput() BranchRestrictionMapOutput {
	return o
}

func (o BranchRestrictionMapOutput) ToBranchRestrictionMapOutputWithContext(ctx context.Context) BranchRestrictionMapOutput {
	return o
}

func (o BranchRestrictionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*BranchRestriction] {
	return pulumix.Output[map[string]*BranchRestriction]{
		OutputState: o.OutputState,
	}
}

func (o BranchRestrictionMapOutput) MapIndex(k pulumi.StringInput) BranchRestrictionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BranchRestriction {
		return vs[0].(map[string]*BranchRestriction)[vs[1].(string)]
	}).(BranchRestrictionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRestrictionInput)(nil)).Elem(), &BranchRestriction{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRestrictionArrayInput)(nil)).Elem(), BranchRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BranchRestrictionMapInput)(nil)).Elem(), BranchRestrictionMap{})
	pulumi.RegisterOutputType(BranchRestrictionOutput{})
	pulumi.RegisterOutputType(BranchRestrictionArrayOutput{})
	pulumi.RegisterOutputType(BranchRestrictionMapOutput{})
}
