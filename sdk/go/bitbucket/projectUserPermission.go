// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bitbucket

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket/internal"
)

// Provides a Bitbucket Repository User Permission Resource.
//
// This allows you set explicit user permission for a project.
//
// OAuth2 Scopes: `project:admin`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/ryan-pip/pulumi-bitbucket/sdk/go/bitbucket"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := bitbucket.NewProjectUserPermission(ctx, "example", &bitbucket.ProjectUserPermissionArgs{
//				Workspace:  pulumi.String("example"),
//				ProjectKey: pulumi.Any(bitbucket_project.Example.Key),
//				UserId:     pulumi.String("user-id"),
//				Permission: pulumi.String("read"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Repository User Permissions can be imported using their `workspace:project-key:user-id` ID, e.g.
//
// ```sh
//
//	$ pulumi import bitbucket:index/projectUserPermission:ProjectUserPermission example workspace:project-key:user-id
//
// ```
type ProjectUserPermission struct {
	pulumi.CustomResourceState

	// Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
	Permission pulumi.StringOutput `pulumi:"permission"`
	// The project key.
	ProjectKey pulumi.StringOutput `pulumi:"projectKey"`
	// The UUID of the user.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// The workspace id.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewProjectUserPermission registers a new resource with the given unique name, arguments, and options.
func NewProjectUserPermission(ctx *pulumi.Context,
	name string, args *ProjectUserPermissionArgs, opts ...pulumi.ResourceOption) (*ProjectUserPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	if args.ProjectKey == nil {
		return nil, errors.New("invalid value for required argument 'ProjectKey'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectUserPermission
	err := ctx.RegisterResource("bitbucket:index/projectUserPermission:ProjectUserPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectUserPermission gets an existing ProjectUserPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectUserPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectUserPermissionState, opts ...pulumi.ResourceOption) (*ProjectUserPermission, error) {
	var resource ProjectUserPermission
	err := ctx.ReadResource("bitbucket:index/projectUserPermission:ProjectUserPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectUserPermission resources.
type projectUserPermissionState struct {
	// Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
	Permission *string `pulumi:"permission"`
	// The project key.
	ProjectKey *string `pulumi:"projectKey"`
	// The UUID of the user.
	UserId *string `pulumi:"userId"`
	// The workspace id.
	Workspace *string `pulumi:"workspace"`
}

type ProjectUserPermissionState struct {
	// Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
	Permission pulumi.StringPtrInput
	// The project key.
	ProjectKey pulumi.StringPtrInput
	// The UUID of the user.
	UserId pulumi.StringPtrInput
	// The workspace id.
	Workspace pulumi.StringPtrInput
}

func (ProjectUserPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectUserPermissionState)(nil)).Elem()
}

type projectUserPermissionArgs struct {
	// Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
	Permission string `pulumi:"permission"`
	// The project key.
	ProjectKey string `pulumi:"projectKey"`
	// The UUID of the user.
	UserId string `pulumi:"userId"`
	// The workspace id.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a ProjectUserPermission resource.
type ProjectUserPermissionArgs struct {
	// Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
	Permission pulumi.StringInput
	// The project key.
	ProjectKey pulumi.StringInput
	// The UUID of the user.
	UserId pulumi.StringInput
	// The workspace id.
	Workspace pulumi.StringInput
}

func (ProjectUserPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectUserPermissionArgs)(nil)).Elem()
}

type ProjectUserPermissionInput interface {
	pulumi.Input

	ToProjectUserPermissionOutput() ProjectUserPermissionOutput
	ToProjectUserPermissionOutputWithContext(ctx context.Context) ProjectUserPermissionOutput
}

func (*ProjectUserPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectUserPermission)(nil)).Elem()
}

func (i *ProjectUserPermission) ToProjectUserPermissionOutput() ProjectUserPermissionOutput {
	return i.ToProjectUserPermissionOutputWithContext(context.Background())
}

func (i *ProjectUserPermission) ToProjectUserPermissionOutputWithContext(ctx context.Context) ProjectUserPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectUserPermissionOutput)
}

// ProjectUserPermissionArrayInput is an input type that accepts ProjectUserPermissionArray and ProjectUserPermissionArrayOutput values.
// You can construct a concrete instance of `ProjectUserPermissionArrayInput` via:
//
//	ProjectUserPermissionArray{ ProjectUserPermissionArgs{...} }
type ProjectUserPermissionArrayInput interface {
	pulumi.Input

	ToProjectUserPermissionArrayOutput() ProjectUserPermissionArrayOutput
	ToProjectUserPermissionArrayOutputWithContext(context.Context) ProjectUserPermissionArrayOutput
}

type ProjectUserPermissionArray []ProjectUserPermissionInput

func (ProjectUserPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectUserPermission)(nil)).Elem()
}

func (i ProjectUserPermissionArray) ToProjectUserPermissionArrayOutput() ProjectUserPermissionArrayOutput {
	return i.ToProjectUserPermissionArrayOutputWithContext(context.Background())
}

func (i ProjectUserPermissionArray) ToProjectUserPermissionArrayOutputWithContext(ctx context.Context) ProjectUserPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectUserPermissionArrayOutput)
}

// ProjectUserPermissionMapInput is an input type that accepts ProjectUserPermissionMap and ProjectUserPermissionMapOutput values.
// You can construct a concrete instance of `ProjectUserPermissionMapInput` via:
//
//	ProjectUserPermissionMap{ "key": ProjectUserPermissionArgs{...} }
type ProjectUserPermissionMapInput interface {
	pulumi.Input

	ToProjectUserPermissionMapOutput() ProjectUserPermissionMapOutput
	ToProjectUserPermissionMapOutputWithContext(context.Context) ProjectUserPermissionMapOutput
}

type ProjectUserPermissionMap map[string]ProjectUserPermissionInput

func (ProjectUserPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectUserPermission)(nil)).Elem()
}

func (i ProjectUserPermissionMap) ToProjectUserPermissionMapOutput() ProjectUserPermissionMapOutput {
	return i.ToProjectUserPermissionMapOutputWithContext(context.Background())
}

func (i ProjectUserPermissionMap) ToProjectUserPermissionMapOutputWithContext(ctx context.Context) ProjectUserPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectUserPermissionMapOutput)
}

type ProjectUserPermissionOutput struct{ *pulumi.OutputState }

func (ProjectUserPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectUserPermission)(nil)).Elem()
}

func (o ProjectUserPermissionOutput) ToProjectUserPermissionOutput() ProjectUserPermissionOutput {
	return o
}

func (o ProjectUserPermissionOutput) ToProjectUserPermissionOutputWithContext(ctx context.Context) ProjectUserPermissionOutput {
	return o
}

// Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
func (o ProjectUserPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectUserPermission) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

// The project key.
func (o ProjectUserPermissionOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectUserPermission) pulumi.StringOutput { return v.ProjectKey }).(pulumi.StringOutput)
}

// The UUID of the user.
func (o ProjectUserPermissionOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectUserPermission) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// The workspace id.
func (o ProjectUserPermissionOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectUserPermission) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type ProjectUserPermissionArrayOutput struct{ *pulumi.OutputState }

func (ProjectUserPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectUserPermission)(nil)).Elem()
}

func (o ProjectUserPermissionArrayOutput) ToProjectUserPermissionArrayOutput() ProjectUserPermissionArrayOutput {
	return o
}

func (o ProjectUserPermissionArrayOutput) ToProjectUserPermissionArrayOutputWithContext(ctx context.Context) ProjectUserPermissionArrayOutput {
	return o
}

func (o ProjectUserPermissionArrayOutput) Index(i pulumi.IntInput) ProjectUserPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectUserPermission {
		return vs[0].([]*ProjectUserPermission)[vs[1].(int)]
	}).(ProjectUserPermissionOutput)
}

type ProjectUserPermissionMapOutput struct{ *pulumi.OutputState }

func (ProjectUserPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectUserPermission)(nil)).Elem()
}

func (o ProjectUserPermissionMapOutput) ToProjectUserPermissionMapOutput() ProjectUserPermissionMapOutput {
	return o
}

func (o ProjectUserPermissionMapOutput) ToProjectUserPermissionMapOutputWithContext(ctx context.Context) ProjectUserPermissionMapOutput {
	return o
}

func (o ProjectUserPermissionMapOutput) MapIndex(k pulumi.StringInput) ProjectUserPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectUserPermission {
		return vs[0].(map[string]*ProjectUserPermission)[vs[1].(string)]
	}).(ProjectUserPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectUserPermissionInput)(nil)).Elem(), &ProjectUserPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectUserPermissionArrayInput)(nil)).Elem(), ProjectUserPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectUserPermissionMapInput)(nil)).Elem(), ProjectUserPermissionMap{})
	pulumi.RegisterOutputType(ProjectUserPermissionOutput{})
	pulumi.RegisterOutputType(ProjectUserPermissionArrayOutput{})
	pulumi.RegisterOutputType(ProjectUserPermissionMapOutput{})
}
