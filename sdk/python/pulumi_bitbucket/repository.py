# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RepositoryArgs', 'Repository']

@pulumi.input_type
class RepositoryArgs:
    def __init__(__self__, *,
                 owner: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 fork_policy: Optional[pulumi.Input[str]] = None,
                 has_issues: Optional[pulumi.Input[bool]] = None,
                 has_wiki: Optional[pulumi.Input[bool]] = None,
                 inherit_branching_model: Optional[pulumi.Input[bool]] = None,
                 inherit_default_merge_strategy: Optional[pulumi.Input[bool]] = None,
                 is_private: Optional[pulumi.Input[bool]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input['RepositoryLinkArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pipelines_enabled: Optional[pulumi.Input[bool]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 scm: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Repository resource.
        """
        pulumi.set(__self__, "owner", owner)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fork_policy is not None:
            pulumi.set(__self__, "fork_policy", fork_policy)
        if has_issues is not None:
            pulumi.set(__self__, "has_issues", has_issues)
        if has_wiki is not None:
            pulumi.set(__self__, "has_wiki", has_wiki)
        if inherit_branching_model is not None:
            pulumi.set(__self__, "inherit_branching_model", inherit_branching_model)
        if inherit_default_merge_strategy is not None:
            pulumi.set(__self__, "inherit_default_merge_strategy", inherit_default_merge_strategy)
        if is_private is not None:
            pulumi.set(__self__, "is_private", is_private)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pipelines_enabled is not None:
            pulumi.set(__self__, "pipelines_enabled", pipelines_enabled)
        if project_key is not None:
            pulumi.set(__self__, "project_key", project_key)
        if scm is not None:
            pulumi.set(__self__, "scm", scm)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Input[str]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="forkPolicy")
    def fork_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fork_policy")

    @fork_policy.setter
    def fork_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fork_policy", value)

    @property
    @pulumi.getter(name="hasIssues")
    def has_issues(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_issues")

    @has_issues.setter
    def has_issues(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_issues", value)

    @property
    @pulumi.getter(name="hasWiki")
    def has_wiki(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_wiki")

    @has_wiki.setter
    def has_wiki(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_wiki", value)

    @property
    @pulumi.getter(name="inheritBranchingModel")
    def inherit_branching_model(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "inherit_branching_model")

    @inherit_branching_model.setter
    def inherit_branching_model(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherit_branching_model", value)

    @property
    @pulumi.getter(name="inheritDefaultMergeStrategy")
    def inherit_default_merge_strategy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "inherit_default_merge_strategy")

    @inherit_default_merge_strategy.setter
    def inherit_default_merge_strategy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherit_default_merge_strategy", value)

    @property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_private")

    @is_private.setter
    def is_private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_private", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input['RepositoryLinkArgs']]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input['RepositoryLinkArgs']]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pipelinesEnabled")
    def pipelines_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pipelines_enabled")

    @pipelines_enabled.setter
    def pipelines_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pipelines_enabled", value)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_key", value)

    @property
    @pulumi.getter
    def scm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scm")

    @scm.setter
    def scm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scm", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website", value)


@pulumi.input_type
class _RepositoryState:
    def __init__(__self__, *,
                 clone_https: Optional[pulumi.Input[str]] = None,
                 clone_ssh: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fork_policy: Optional[pulumi.Input[str]] = None,
                 has_issues: Optional[pulumi.Input[bool]] = None,
                 has_wiki: Optional[pulumi.Input[bool]] = None,
                 inherit_branching_model: Optional[pulumi.Input[bool]] = None,
                 inherit_default_merge_strategy: Optional[pulumi.Input[bool]] = None,
                 is_private: Optional[pulumi.Input[bool]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input['RepositoryLinkArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 pipelines_enabled: Optional[pulumi.Input[bool]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 scm: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Repository resources.
        """
        if clone_https is not None:
            pulumi.set(__self__, "clone_https", clone_https)
        if clone_ssh is not None:
            pulumi.set(__self__, "clone_ssh", clone_ssh)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fork_policy is not None:
            pulumi.set(__self__, "fork_policy", fork_policy)
        if has_issues is not None:
            pulumi.set(__self__, "has_issues", has_issues)
        if has_wiki is not None:
            pulumi.set(__self__, "has_wiki", has_wiki)
        if inherit_branching_model is not None:
            pulumi.set(__self__, "inherit_branching_model", inherit_branching_model)
        if inherit_default_merge_strategy is not None:
            pulumi.set(__self__, "inherit_default_merge_strategy", inherit_default_merge_strategy)
        if is_private is not None:
            pulumi.set(__self__, "is_private", is_private)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if pipelines_enabled is not None:
            pulumi.set(__self__, "pipelines_enabled", pipelines_enabled)
        if project_key is not None:
            pulumi.set(__self__, "project_key", project_key)
        if scm is not None:
            pulumi.set(__self__, "scm", scm)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if website is not None:
            pulumi.set(__self__, "website", website)

    @property
    @pulumi.getter(name="cloneHttps")
    def clone_https(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clone_https")

    @clone_https.setter
    def clone_https(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clone_https", value)

    @property
    @pulumi.getter(name="cloneSsh")
    def clone_ssh(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "clone_ssh")

    @clone_ssh.setter
    def clone_ssh(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clone_ssh", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="forkPolicy")
    def fork_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fork_policy")

    @fork_policy.setter
    def fork_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fork_policy", value)

    @property
    @pulumi.getter(name="hasIssues")
    def has_issues(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_issues")

    @has_issues.setter
    def has_issues(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_issues", value)

    @property
    @pulumi.getter(name="hasWiki")
    def has_wiki(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_wiki")

    @has_wiki.setter
    def has_wiki(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_wiki", value)

    @property
    @pulumi.getter(name="inheritBranchingModel")
    def inherit_branching_model(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "inherit_branching_model")

    @inherit_branching_model.setter
    def inherit_branching_model(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherit_branching_model", value)

    @property
    @pulumi.getter(name="inheritDefaultMergeStrategy")
    def inherit_default_merge_strategy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "inherit_default_merge_strategy")

    @inherit_default_merge_strategy.setter
    def inherit_default_merge_strategy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inherit_default_merge_strategy", value)

    @property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_private")

    @is_private.setter
    def is_private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_private", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input['RepositoryLinkArgs']]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input['RepositoryLinkArgs']]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="pipelinesEnabled")
    def pipelines_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pipelines_enabled")

    @pipelines_enabled.setter
    def pipelines_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pipelines_enabled", value)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_key", value)

    @property
    @pulumi.getter
    def scm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scm")

    @scm.setter
    def scm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scm", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website", value)


class Repository(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fork_policy: Optional[pulumi.Input[str]] = None,
                 has_issues: Optional[pulumi.Input[bool]] = None,
                 has_wiki: Optional[pulumi.Input[bool]] = None,
                 inherit_branching_model: Optional[pulumi.Input[bool]] = None,
                 inherit_default_merge_strategy: Optional[pulumi.Input[bool]] = None,
                 is_private: Optional[pulumi.Input[bool]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[pulumi.InputType['RepositoryLinkArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 pipelines_enabled: Optional[pulumi.Input[bool]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 scm: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Repository resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RepositoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Repository resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RepositoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RepositoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fork_policy: Optional[pulumi.Input[str]] = None,
                 has_issues: Optional[pulumi.Input[bool]] = None,
                 has_wiki: Optional[pulumi.Input[bool]] = None,
                 inherit_branching_model: Optional[pulumi.Input[bool]] = None,
                 inherit_default_merge_strategy: Optional[pulumi.Input[bool]] = None,
                 is_private: Optional[pulumi.Input[bool]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[pulumi.InputType['RepositoryLinkArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 pipelines_enabled: Optional[pulumi.Input[bool]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 scm: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 website: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RepositoryArgs.__new__(RepositoryArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["fork_policy"] = fork_policy
            __props__.__dict__["has_issues"] = has_issues
            __props__.__dict__["has_wiki"] = has_wiki
            __props__.__dict__["inherit_branching_model"] = inherit_branching_model
            __props__.__dict__["inherit_default_merge_strategy"] = inherit_default_merge_strategy
            __props__.__dict__["is_private"] = is_private
            __props__.__dict__["language"] = language
            __props__.__dict__["link"] = link
            __props__.__dict__["name"] = name
            if owner is None and not opts.urn:
                raise TypeError("Missing required property 'owner'")
            __props__.__dict__["owner"] = owner
            __props__.__dict__["pipelines_enabled"] = pipelines_enabled
            __props__.__dict__["project_key"] = project_key
            __props__.__dict__["scm"] = scm
            __props__.__dict__["slug"] = slug
            __props__.__dict__["website"] = website
            __props__.__dict__["clone_https"] = None
            __props__.__dict__["clone_ssh"] = None
            __props__.__dict__["uuid"] = None
        super(Repository, __self__).__init__(
            'bitbucket:index/repository:Repository',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            clone_https: Optional[pulumi.Input[str]] = None,
            clone_ssh: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            fork_policy: Optional[pulumi.Input[str]] = None,
            has_issues: Optional[pulumi.Input[bool]] = None,
            has_wiki: Optional[pulumi.Input[bool]] = None,
            inherit_branching_model: Optional[pulumi.Input[bool]] = None,
            inherit_default_merge_strategy: Optional[pulumi.Input[bool]] = None,
            is_private: Optional[pulumi.Input[bool]] = None,
            language: Optional[pulumi.Input[str]] = None,
            link: Optional[pulumi.Input[pulumi.InputType['RepositoryLinkArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            pipelines_enabled: Optional[pulumi.Input[bool]] = None,
            project_key: Optional[pulumi.Input[str]] = None,
            scm: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            website: Optional[pulumi.Input[str]] = None) -> 'Repository':
        """
        Get an existing Repository resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RepositoryState.__new__(_RepositoryState)

        __props__.__dict__["clone_https"] = clone_https
        __props__.__dict__["clone_ssh"] = clone_ssh
        __props__.__dict__["description"] = description
        __props__.__dict__["fork_policy"] = fork_policy
        __props__.__dict__["has_issues"] = has_issues
        __props__.__dict__["has_wiki"] = has_wiki
        __props__.__dict__["inherit_branching_model"] = inherit_branching_model
        __props__.__dict__["inherit_default_merge_strategy"] = inherit_default_merge_strategy
        __props__.__dict__["is_private"] = is_private
        __props__.__dict__["language"] = language
        __props__.__dict__["link"] = link
        __props__.__dict__["name"] = name
        __props__.__dict__["owner"] = owner
        __props__.__dict__["pipelines_enabled"] = pipelines_enabled
        __props__.__dict__["project_key"] = project_key
        __props__.__dict__["scm"] = scm
        __props__.__dict__["slug"] = slug
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["website"] = website
        return Repository(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloneHttps")
    def clone_https(self) -> pulumi.Output[str]:
        return pulumi.get(self, "clone_https")

    @property
    @pulumi.getter(name="cloneSsh")
    def clone_ssh(self) -> pulumi.Output[str]:
        return pulumi.get(self, "clone_ssh")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="forkPolicy")
    def fork_policy(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "fork_policy")

    @property
    @pulumi.getter(name="hasIssues")
    def has_issues(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "has_issues")

    @property
    @pulumi.getter(name="hasWiki")
    def has_wiki(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "has_wiki")

    @property
    @pulumi.getter(name="inheritBranchingModel")
    def inherit_branching_model(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "inherit_branching_model")

    @property
    @pulumi.getter(name="inheritDefaultMergeStrategy")
    def inherit_default_merge_strategy(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "inherit_default_merge_strategy")

    @property
    @pulumi.getter(name="isPrivate")
    def is_private(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_private")

    @property
    @pulumi.getter
    def language(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def link(self) -> pulumi.Output['outputs.RepositoryLink']:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="pipelinesEnabled")
    def pipelines_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "pipelines_enabled")

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project_key")

    @property
    @pulumi.getter
    def scm(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "scm")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def website(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "website")

