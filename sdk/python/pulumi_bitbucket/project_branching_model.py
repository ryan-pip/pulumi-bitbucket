# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProjectBranchingModelArgs', 'ProjectBranchingModel']

@pulumi.input_type
class ProjectBranchingModelArgs:
    def __init__(__self__, *,
                 development: pulumi.Input['ProjectBranchingModelDevelopmentArgs'],
                 project: pulumi.Input[str],
                 workspace: pulumi.Input[str],
                 branch_types: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectBranchingModelBranchTypeArgs']]]] = None,
                 production: Optional[pulumi.Input['ProjectBranchingModelProductionArgs']] = None):
        """
        The set of arguments for constructing a ProjectBranchingModel resource.
        :param pulumi.Input['ProjectBranchingModelDevelopmentArgs'] development: The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        :param pulumi.Input[str] project: The key of the project.
        :param pulumi.Input[str] workspace: The workspace of this project. Can be you or any team you
               have write access to.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectBranchingModelBranchTypeArgs']]] branch_types: A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        :param pulumi.Input['ProjectBranchingModelProductionArgs'] production: The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        """
        pulumi.set(__self__, "development", development)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "workspace", workspace)
        if branch_types is not None:
            pulumi.set(__self__, "branch_types", branch_types)
        if production is not None:
            pulumi.set(__self__, "production", production)

    @property
    @pulumi.getter
    def development(self) -> pulumi.Input['ProjectBranchingModelDevelopmentArgs']:
        """
        The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        """
        return pulumi.get(self, "development")

    @development.setter
    def development(self, value: pulumi.Input['ProjectBranchingModelDevelopmentArgs']):
        pulumi.set(self, "development", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The key of the project.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Input[str]:
        """
        The workspace of this project. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace", value)

    @property
    @pulumi.getter(name="branchTypes")
    def branch_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectBranchingModelBranchTypeArgs']]]]:
        """
        A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        """
        return pulumi.get(self, "branch_types")

    @branch_types.setter
    def branch_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectBranchingModelBranchTypeArgs']]]]):
        pulumi.set(self, "branch_types", value)

    @property
    @pulumi.getter
    def production(self) -> Optional[pulumi.Input['ProjectBranchingModelProductionArgs']]:
        """
        The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        """
        return pulumi.get(self, "production")

    @production.setter
    def production(self, value: Optional[pulumi.Input['ProjectBranchingModelProductionArgs']]):
        pulumi.set(self, "production", value)


@pulumi.input_type
class _ProjectBranchingModelState:
    def __init__(__self__, *,
                 branch_types: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectBranchingModelBranchTypeArgs']]]] = None,
                 development: Optional[pulumi.Input['ProjectBranchingModelDevelopmentArgs']] = None,
                 production: Optional[pulumi.Input['ProjectBranchingModelProductionArgs']] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProjectBranchingModel resources.
        :param pulumi.Input[Sequence[pulumi.Input['ProjectBranchingModelBranchTypeArgs']]] branch_types: A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        :param pulumi.Input['ProjectBranchingModelDevelopmentArgs'] development: The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        :param pulumi.Input['ProjectBranchingModelProductionArgs'] production: The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        :param pulumi.Input[str] project: The key of the project.
        :param pulumi.Input[str] workspace: The workspace of this project. Can be you or any team you
               have write access to.
        """
        if branch_types is not None:
            pulumi.set(__self__, "branch_types", branch_types)
        if development is not None:
            pulumi.set(__self__, "development", development)
        if production is not None:
            pulumi.set(__self__, "production", production)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter(name="branchTypes")
    def branch_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectBranchingModelBranchTypeArgs']]]]:
        """
        A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        """
        return pulumi.get(self, "branch_types")

    @branch_types.setter
    def branch_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectBranchingModelBranchTypeArgs']]]]):
        pulumi.set(self, "branch_types", value)

    @property
    @pulumi.getter
    def development(self) -> Optional[pulumi.Input['ProjectBranchingModelDevelopmentArgs']]:
        """
        The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        """
        return pulumi.get(self, "development")

    @development.setter
    def development(self, value: Optional[pulumi.Input['ProjectBranchingModelDevelopmentArgs']]):
        pulumi.set(self, "development", value)

    @property
    @pulumi.getter
    def production(self) -> Optional[pulumi.Input['ProjectBranchingModelProductionArgs']]:
        """
        The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        """
        return pulumi.get(self, "production")

    @production.setter
    def production(self, value: Optional[pulumi.Input['ProjectBranchingModelProductionArgs']]):
        pulumi.set(self, "production", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the project.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def workspace(self) -> Optional[pulumi.Input[str]]:
        """
        The workspace of this project. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace", value)


class ProjectBranchingModel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch_types: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectBranchingModelBranchTypeArgs']]]]] = None,
                 development: Optional[pulumi.Input[pulumi.InputType['ProjectBranchingModelDevelopmentArgs']]] = None,
                 production: Optional[pulumi.Input[pulumi.InputType['ProjectBranchingModelProductionArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Bitbucket project branching model resource.

        This allows you for setting up branching models for your project.

        OAuth2 Scopes: `project:admin`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        example_project = bitbucket.Project("exampleProject",
            owner="example",
            key="FFFFF")
        example_project_branching_model = bitbucket.ProjectBranchingModel("exampleProjectBranchingModel",
            workspace="example",
            project=example_project.key,
            development=bitbucket.ProjectBranchingModelDevelopmentArgs(
                use_mainbranch=True,
            ),
            branch_types=[
                bitbucket.ProjectBranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="feature",
                    prefix="example/",
                ),
                bitbucket.ProjectBranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="hotfix",
                    prefix="hotfix/",
                ),
                bitbucket.ProjectBranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="release",
                    prefix="release/",
                ),
                bitbucket.ProjectBranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="bugfix",
                    prefix="bugfix/",
                ),
            ])
        ```

        ## Import

        Branching Models can be imported using the workspace and project separated by a (`/`), e.g.,

        ```sh
         $ pulumi import bitbucket:index/projectBranchingModel:ProjectBranchingModel example workspace/project
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectBranchingModelBranchTypeArgs']]]] branch_types: A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        :param pulumi.Input[pulumi.InputType['ProjectBranchingModelDevelopmentArgs']] development: The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        :param pulumi.Input[pulumi.InputType['ProjectBranchingModelProductionArgs']] production: The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        :param pulumi.Input[str] project: The key of the project.
        :param pulumi.Input[str] workspace: The workspace of this project. Can be you or any team you
               have write access to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectBranchingModelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Bitbucket project branching model resource.

        This allows you for setting up branching models for your project.

        OAuth2 Scopes: `project:admin`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        example_project = bitbucket.Project("exampleProject",
            owner="example",
            key="FFFFF")
        example_project_branching_model = bitbucket.ProjectBranchingModel("exampleProjectBranchingModel",
            workspace="example",
            project=example_project.key,
            development=bitbucket.ProjectBranchingModelDevelopmentArgs(
                use_mainbranch=True,
            ),
            branch_types=[
                bitbucket.ProjectBranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="feature",
                    prefix="example/",
                ),
                bitbucket.ProjectBranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="hotfix",
                    prefix="hotfix/",
                ),
                bitbucket.ProjectBranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="release",
                    prefix="release/",
                ),
                bitbucket.ProjectBranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="bugfix",
                    prefix="bugfix/",
                ),
            ])
        ```

        ## Import

        Branching Models can be imported using the workspace and project separated by a (`/`), e.g.,

        ```sh
         $ pulumi import bitbucket:index/projectBranchingModel:ProjectBranchingModel example workspace/project
        ```

        :param str resource_name: The name of the resource.
        :param ProjectBranchingModelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectBranchingModelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch_types: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectBranchingModelBranchTypeArgs']]]]] = None,
                 development: Optional[pulumi.Input[pulumi.InputType['ProjectBranchingModelDevelopmentArgs']]] = None,
                 production: Optional[pulumi.Input[pulumi.InputType['ProjectBranchingModelProductionArgs']]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectBranchingModelArgs.__new__(ProjectBranchingModelArgs)

            __props__.__dict__["branch_types"] = branch_types
            if development is None and not opts.urn:
                raise TypeError("Missing required property 'development'")
            __props__.__dict__["development"] = development
            __props__.__dict__["production"] = production
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            if workspace is None and not opts.urn:
                raise TypeError("Missing required property 'workspace'")
            __props__.__dict__["workspace"] = workspace
        super(ProjectBranchingModel, __self__).__init__(
            'bitbucket:index/projectBranchingModel:ProjectBranchingModel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            branch_types: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectBranchingModelBranchTypeArgs']]]]] = None,
            development: Optional[pulumi.Input[pulumi.InputType['ProjectBranchingModelDevelopmentArgs']]] = None,
            production: Optional[pulumi.Input[pulumi.InputType['ProjectBranchingModelProductionArgs']]] = None,
            project: Optional[pulumi.Input[str]] = None,
            workspace: Optional[pulumi.Input[str]] = None) -> 'ProjectBranchingModel':
        """
        Get an existing ProjectBranchingModel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProjectBranchingModelBranchTypeArgs']]]] branch_types: A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        :param pulumi.Input[pulumi.InputType['ProjectBranchingModelDevelopmentArgs']] development: The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        :param pulumi.Input[pulumi.InputType['ProjectBranchingModelProductionArgs']] production: The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        :param pulumi.Input[str] project: The key of the project.
        :param pulumi.Input[str] workspace: The workspace of this project. Can be you or any team you
               have write access to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectBranchingModelState.__new__(_ProjectBranchingModelState)

        __props__.__dict__["branch_types"] = branch_types
        __props__.__dict__["development"] = development
        __props__.__dict__["production"] = production
        __props__.__dict__["project"] = project
        __props__.__dict__["workspace"] = workspace
        return ProjectBranchingModel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="branchTypes")
    def branch_types(self) -> pulumi.Output[Sequence['outputs.ProjectBranchingModelBranchType']]:
        """
        A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        """
        return pulumi.get(self, "branch_types")

    @property
    @pulumi.getter
    def development(self) -> pulumi.Output['outputs.ProjectBranchingModelDevelopment']:
        """
        The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        """
        return pulumi.get(self, "development")

    @property
    @pulumi.getter
    def production(self) -> pulumi.Output[Optional['outputs.ProjectBranchingModelProduction']]:
        """
        The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        """
        return pulumi.get(self, "production")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The key of the project.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Output[str]:
        """
        The workspace of this project. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "workspace")

