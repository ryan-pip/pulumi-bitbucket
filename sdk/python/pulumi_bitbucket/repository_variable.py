# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RepositoryVariableArgs', 'RepositoryVariable']

@pulumi.input_type
class RepositoryVariableArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 repository: pulumi.Input[str],
                 value: pulumi.Input[str],
                 secured: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a RepositoryVariable resource.
        :param pulumi.Input[str] key: The key of the key value pair
        :param pulumi.Input[str] repository: The repository ID you want to put this variable onto. (of form workspace-id/repository-id)
        :param pulumi.Input[str] value: The value of the key. This will not be returned if `secured` is set to true from API and wont be drift detected by provider.
        :param pulumi.Input[bool] secured: If you want to make this viewable in the UI.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "value", value)
        if secured is not None:
            pulumi.set(__self__, "secured", secured)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the key value pair
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[str]:
        """
        The repository ID you want to put this variable onto. (of form workspace-id/repository-id)
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the key. This will not be returned if `secured` is set to true from API and wont be drift detected by provider.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def secured(self) -> Optional[pulumi.Input[bool]]:
        """
        If you want to make this viewable in the UI.
        """
        return pulumi.get(self, "secured")

    @secured.setter
    def secured(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secured", value)


@pulumi.input_type
class _RepositoryVariableState:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 secured: Optional[pulumi.Input[bool]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RepositoryVariable resources.
        :param pulumi.Input[str] key: The key of the key value pair
        :param pulumi.Input[str] repository: The repository ID you want to put this variable onto. (of form workspace-id/repository-id)
        :param pulumi.Input[bool] secured: If you want to make this viewable in the UI.
        :param pulumi.Input[str] uuid: (Computed) The UUID identifying the variable.
        :param pulumi.Input[str] value: The value of the key. This will not be returned if `secured` is set to true from API and wont be drift detected by provider.
        :param pulumi.Input[str] workspace: (Computed) The workspace the variable is created in.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if secured is not None:
            pulumi.set(__self__, "secured", secured)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the key value pair
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        The repository ID you want to put this variable onto. (of form workspace-id/repository-id)
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def secured(self) -> Optional[pulumi.Input[bool]]:
        """
        If you want to make this viewable in the UI.
        """
        return pulumi.get(self, "secured")

    @secured.setter
    def secured(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secured", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) The UUID identifying the variable.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the key. This will not be returned if `secured` is set to true from API and wont be drift detected by provider.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def workspace(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) The workspace the variable is created in.
        """
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace", value)


class RepositoryVariable(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 secured: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource allows you to setup pipelines variables to manage your builds with. Once you have enabled pipelines on your repository you can then further setup variables here to use.

        OAuth2 Scopes: `none`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        monorepo = bitbucket.Repository("monorepo",
            owner="gob",
            pipelines_enabled=True)
        debug = bitbucket.RepositoryVariable("debug",
            key="DEBUG",
            value="true",
            repository=monorepo.id,
            secured=False)
        ```

        ## Import

        Repository Variables can be imported using their `workspace/repository/key/uuid` ID, e.g.

        ```sh
         $ pulumi import bitbucket:index/repositoryVariable:RepositoryVariable example workspace/repository/key/uuid
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key: The key of the key value pair
        :param pulumi.Input[str] repository: The repository ID you want to put this variable onto. (of form workspace-id/repository-id)
        :param pulumi.Input[bool] secured: If you want to make this viewable in the UI.
        :param pulumi.Input[str] value: The value of the key. This will not be returned if `secured` is set to true from API and wont be drift detected by provider.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RepositoryVariableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource allows you to setup pipelines variables to manage your builds with. Once you have enabled pipelines on your repository you can then further setup variables here to use.

        OAuth2 Scopes: `none`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        monorepo = bitbucket.Repository("monorepo",
            owner="gob",
            pipelines_enabled=True)
        debug = bitbucket.RepositoryVariable("debug",
            key="DEBUG",
            value="true",
            repository=monorepo.id,
            secured=False)
        ```

        ## Import

        Repository Variables can be imported using their `workspace/repository/key/uuid` ID, e.g.

        ```sh
         $ pulumi import bitbucket:index/repositoryVariable:RepositoryVariable example workspace/repository/key/uuid
        ```

        :param str resource_name: The name of the resource.
        :param RepositoryVariableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RepositoryVariableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 secured: Optional[pulumi.Input[bool]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RepositoryVariableArgs.__new__(RepositoryVariableArgs)

            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            if repository is None and not opts.urn:
                raise TypeError("Missing required property 'repository'")
            __props__.__dict__["repository"] = repository
            __props__.__dict__["secured"] = secured
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = None if value is None else pulumi.Output.secret(value)
            __props__.__dict__["uuid"] = None
            __props__.__dict__["workspace"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["value"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(RepositoryVariable, __self__).__init__(
            'bitbucket:index/repositoryVariable:RepositoryVariable',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            key: Optional[pulumi.Input[str]] = None,
            repository: Optional[pulumi.Input[str]] = None,
            secured: Optional[pulumi.Input[bool]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            value: Optional[pulumi.Input[str]] = None,
            workspace: Optional[pulumi.Input[str]] = None) -> 'RepositoryVariable':
        """
        Get an existing RepositoryVariable resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key: The key of the key value pair
        :param pulumi.Input[str] repository: The repository ID you want to put this variable onto. (of form workspace-id/repository-id)
        :param pulumi.Input[bool] secured: If you want to make this viewable in the UI.
        :param pulumi.Input[str] uuid: (Computed) The UUID identifying the variable.
        :param pulumi.Input[str] value: The value of the key. This will not be returned if `secured` is set to true from API and wont be drift detected by provider.
        :param pulumi.Input[str] workspace: (Computed) The workspace the variable is created in.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RepositoryVariableState.__new__(_RepositoryVariableState)

        __props__.__dict__["key"] = key
        __props__.__dict__["repository"] = repository
        __props__.__dict__["secured"] = secured
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["value"] = value
        __props__.__dict__["workspace"] = workspace
        return RepositoryVariable(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        The key of the key value pair
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Output[str]:
        """
        The repository ID you want to put this variable onto. (of form workspace-id/repository-id)
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def secured(self) -> pulumi.Output[Optional[bool]]:
        """
        If you want to make this viewable in the UI.
        """
        return pulumi.get(self, "secured")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        (Computed) The UUID identifying the variable.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[str]:
        """
        The value of the key. This will not be returned if `secured` is set to true from API and wont be drift detected by provider.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Output[str]:
        """
        (Computed) The workspace the variable is created in.
        """
        return pulumi.get(self, "workspace")

