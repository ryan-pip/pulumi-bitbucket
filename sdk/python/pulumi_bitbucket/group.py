# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['GroupArgs', 'Group']

@pulumi.input_type
class GroupArgs:
    def __init__(__self__, *,
                 workspace: pulumi.Input[str],
                 auto_add: Optional[pulumi.Input[bool]] = None,
                 email_forwarding_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Group resource.
        """
        pulumi.set(__self__, "workspace", workspace)
        if auto_add is not None:
            pulumi.set(__self__, "auto_add", auto_add)
        if email_forwarding_disabled is not None:
            pulumi.set(__self__, "email_forwarding_disabled", email_forwarding_disabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace", value)

    @property
    @pulumi.getter(name="autoAdd")
    def auto_add(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_add")

    @auto_add.setter
    def auto_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_add", value)

    @property
    @pulumi.getter(name="emailForwardingDisabled")
    def email_forwarding_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email_forwarding_disabled")

    @email_forwarding_disabled.setter
    def email_forwarding_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_forwarding_disabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission", value)


@pulumi.input_type
class _GroupState:
    def __init__(__self__, *,
                 auto_add: Optional[pulumi.Input[bool]] = None,
                 email_forwarding_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Group resources.
        """
        if auto_add is not None:
            pulumi.set(__self__, "auto_add", auto_add)
        if email_forwarding_disabled is not None:
            pulumi.set(__self__, "email_forwarding_disabled", email_forwarding_disabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter(name="autoAdd")
    def auto_add(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_add")

    @auto_add.setter
    def auto_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_add", value)

    @property
    @pulumi.getter(name="emailForwardingDisabled")
    def email_forwarding_disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "email_forwarding_disabled")

    @email_forwarding_disabled.setter
    def email_forwarding_disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_forwarding_disabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def workspace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace", value)


class Group(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_add: Optional[pulumi.Input[bool]] = None,
                 email_forwarding_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Group resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Group resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param GroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_add: Optional[pulumi.Input[bool]] = None,
                 email_forwarding_disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupArgs.__new__(GroupArgs)

            __props__.__dict__["auto_add"] = auto_add
            __props__.__dict__["email_forwarding_disabled"] = email_forwarding_disabled
            __props__.__dict__["name"] = name
            __props__.__dict__["permission"] = permission
            if workspace is None and not opts.urn:
                raise TypeError("Missing required property 'workspace'")
            __props__.__dict__["workspace"] = workspace
            __props__.__dict__["slug"] = None
        super(Group, __self__).__init__(
            'bitbucket:index/group:Group',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_add: Optional[pulumi.Input[bool]] = None,
            email_forwarding_disabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            permission: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            workspace: Optional[pulumi.Input[str]] = None) -> 'Group':
        """
        Get an existing Group resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupState.__new__(_GroupState)

        __props__.__dict__["auto_add"] = auto_add
        __props__.__dict__["email_forwarding_disabled"] = email_forwarding_disabled
        __props__.__dict__["name"] = name
        __props__.__dict__["permission"] = permission
        __props__.__dict__["slug"] = slug
        __props__.__dict__["workspace"] = workspace
        return Group(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoAdd")
    def auto_add(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "auto_add")

    @property
    @pulumi.getter(name="emailForwardingDisabled")
    def email_forwarding_disabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "email_forwarding_disabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Output[str]:
        return pulumi.get(self, "workspace")

