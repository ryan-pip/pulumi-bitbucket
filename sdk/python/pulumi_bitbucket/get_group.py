# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetGroupResult',
    'AwaitableGetGroupResult',
    'get_group',
    'get_group_output',
]

@pulumi.output_type
class GetGroupResult:
    """
    A collection of values returned by getGroup.
    """
    def __init__(__self__, auto_add=None, email_forwarding_disabled=None, id=None, name=None, permission=None, slug=None, workspace=None):
        if auto_add and not isinstance(auto_add, bool):
            raise TypeError("Expected argument 'auto_add' to be a bool")
        pulumi.set(__self__, "auto_add", auto_add)
        if email_forwarding_disabled and not isinstance(email_forwarding_disabled, bool):
            raise TypeError("Expected argument 'email_forwarding_disabled' to be a bool")
        pulumi.set(__self__, "email_forwarding_disabled", email_forwarding_disabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if permission and not isinstance(permission, str):
            raise TypeError("Expected argument 'permission' to be a str")
        pulumi.set(__self__, "permission", permission)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)
        if workspace and not isinstance(workspace, str):
            raise TypeError("Expected argument 'workspace' to be a str")
        pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter(name="autoAdd")
    def auto_add(self) -> bool:
        return pulumi.get(self, "auto_add")

    @property
    @pulumi.getter(name="emailForwardingDisabled")
    def email_forwarding_disabled(self) -> bool:
        return pulumi.get(self, "email_forwarding_disabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permission(self) -> str:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def workspace(self) -> str:
        return pulumi.get(self, "workspace")


class AwaitableGetGroupResult(GetGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupResult(
            auto_add=self.auto_add,
            email_forwarding_disabled=self.email_forwarding_disabled,
            id=self.id,
            name=self.name,
            permission=self.permission,
            slug=self.slug,
            workspace=self.workspace)


def get_group(slug: Optional[str] = None,
              workspace: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['slug'] = slug
    __args__['workspace'] = workspace
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bitbucket:index/getGroup:getGroup', __args__, opts=opts, typ=GetGroupResult).value

    return AwaitableGetGroupResult(
        auto_add=pulumi.get(__ret__, 'auto_add'),
        email_forwarding_disabled=pulumi.get(__ret__, 'email_forwarding_disabled'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        permission=pulumi.get(__ret__, 'permission'),
        slug=pulumi.get(__ret__, 'slug'),
        workspace=pulumi.get(__ret__, 'workspace'))


@_utilities.lift_output_func(get_group)
def get_group_output(slug: Optional[pulumi.Input[str]] = None,
                     workspace: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
