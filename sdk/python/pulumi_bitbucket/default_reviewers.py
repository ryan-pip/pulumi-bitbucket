# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DefaultReviewersArgs', 'DefaultReviewers']

@pulumi.input_type
class DefaultReviewersArgs:
    def __init__(__self__, *,
                 owner: pulumi.Input[str],
                 repository: pulumi.Input[str],
                 reviewers: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        The set of arguments for constructing a DefaultReviewers resource.
        :param pulumi.Input[str] owner: The owner of this repository. Can be you or any team you
               have write access to.
        :param pulumi.Input[str] repository: The name of the repository.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] reviewers: A list of reviewers to use.
        """
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "reviewers", reviewers)

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Input[str]:
        """
        The owner of this repository. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[str]:
        """
        The name of the repository.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def reviewers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of reviewers to use.
        """
        return pulumi.get(self, "reviewers")

    @reviewers.setter
    def reviewers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "reviewers", value)


@pulumi.input_type
class _DefaultReviewersState:
    def __init__(__self__, *,
                 owner: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 reviewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering DefaultReviewers resources.
        :param pulumi.Input[str] owner: The owner of this repository. Can be you or any team you
               have write access to.
        :param pulumi.Input[str] repository: The name of the repository.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] reviewers: A list of reviewers to use.
        """
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if reviewers is not None:
            pulumi.set(__self__, "reviewers", reviewers)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        The owner of this repository. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the repository.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def reviewers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of reviewers to use.
        """
        return pulumi.get(self, "reviewers")

    @reviewers.setter
    def reviewers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reviewers", value)


class DefaultReviewers(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 reviewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides support for setting up default reviewers for your repository. You must however have the UUID of the user available. Since Bitbucket has removed usernames from its APIs the best case is to use the UUID via the data provider.

        OAuth2 Scopes: `pullrequest` and `repository:admin`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        reviewer = bitbucket.get_user(uuid="{account UUID}")
        infrastructure = bitbucket.DefaultReviewers("infrastructure",
            owner="myteam",
            repository="terraform-code",
            reviewers=[reviewer.uuid])
        ```

        ## Import

        Default Reviewers can be imported using the owner and repo separated by a (`/`) and the string `reviewers` and the end, e.g.,

        ```sh
         $ pulumi import bitbucket:index/defaultReviewers:DefaultReviewers example myteam/terraform-code/reviewers
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] owner: The owner of this repository. Can be you or any team you
               have write access to.
        :param pulumi.Input[str] repository: The name of the repository.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] reviewers: A list of reviewers to use.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DefaultReviewersArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides support for setting up default reviewers for your repository. You must however have the UUID of the user available. Since Bitbucket has removed usernames from its APIs the best case is to use the UUID via the data provider.

        OAuth2 Scopes: `pullrequest` and `repository:admin`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        reviewer = bitbucket.get_user(uuid="{account UUID}")
        infrastructure = bitbucket.DefaultReviewers("infrastructure",
            owner="myteam",
            repository="terraform-code",
            reviewers=[reviewer.uuid])
        ```

        ## Import

        Default Reviewers can be imported using the owner and repo separated by a (`/`) and the string `reviewers` and the end, e.g.,

        ```sh
         $ pulumi import bitbucket:index/defaultReviewers:DefaultReviewers example myteam/terraform-code/reviewers
        ```

        :param str resource_name: The name of the resource.
        :param DefaultReviewersArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DefaultReviewersArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 reviewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DefaultReviewersArgs.__new__(DefaultReviewersArgs)

            if owner is None and not opts.urn:
                raise TypeError("Missing required property 'owner'")
            __props__.__dict__["owner"] = owner
            if repository is None and not opts.urn:
                raise TypeError("Missing required property 'repository'")
            __props__.__dict__["repository"] = repository
            if reviewers is None and not opts.urn:
                raise TypeError("Missing required property 'reviewers'")
            __props__.__dict__["reviewers"] = reviewers
        super(DefaultReviewers, __self__).__init__(
            'bitbucket:index/defaultReviewers:DefaultReviewers',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            owner: Optional[pulumi.Input[str]] = None,
            repository: Optional[pulumi.Input[str]] = None,
            reviewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'DefaultReviewers':
        """
        Get an existing DefaultReviewers resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] owner: The owner of this repository. Can be you or any team you
               have write access to.
        :param pulumi.Input[str] repository: The name of the repository.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] reviewers: A list of reviewers to use.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DefaultReviewersState.__new__(_DefaultReviewersState)

        __props__.__dict__["owner"] = owner
        __props__.__dict__["repository"] = repository
        __props__.__dict__["reviewers"] = reviewers
        return DefaultReviewers(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        The owner of this repository. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Output[str]:
        """
        The name of the repository.
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def reviewers(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of reviewers to use.
        """
        return pulumi.get(self, "reviewers")

