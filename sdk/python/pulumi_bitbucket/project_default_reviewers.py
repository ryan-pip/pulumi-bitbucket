# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProjectDefaultReviewersArgs', 'ProjectDefaultReviewers']

@pulumi.input_type
class ProjectDefaultReviewersArgs:
    def __init__(__self__, *,
                 project: pulumi.Input[str],
                 reviewers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 workspace: pulumi.Input[str]):
        """
        The set of arguments for constructing a ProjectDefaultReviewers resource.
        :param pulumi.Input[str] project: The key of the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] reviewers: A list of reviewers to use.
        :param pulumi.Input[str] workspace: The workspace of this project. Can be you or any team you
               have write access to.
        """
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "reviewers", reviewers)
        pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The key of the project.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def reviewers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of reviewers to use.
        """
        return pulumi.get(self, "reviewers")

    @reviewers.setter
    def reviewers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "reviewers", value)

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Input[str]:
        """
        The workspace of this project. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace", value)


@pulumi.input_type
class _ProjectDefaultReviewersState:
    def __init__(__self__, *,
                 project: Optional[pulumi.Input[str]] = None,
                 reviewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workspace: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProjectDefaultReviewers resources.
        :param pulumi.Input[str] project: The key of the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] reviewers: A list of reviewers to use.
        :param pulumi.Input[str] workspace: The workspace of this project. Can be you or any team you
               have write access to.
        """
        if project is not None:
            pulumi.set(__self__, "project", project)
        if reviewers is not None:
            pulumi.set(__self__, "reviewers", reviewers)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the project.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def reviewers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of reviewers to use.
        """
        return pulumi.get(self, "reviewers")

    @reviewers.setter
    def reviewers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "reviewers", value)

    @property
    @pulumi.getter
    def workspace(self) -> Optional[pulumi.Input[str]]:
        """
        The workspace of this project. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace", value)


class ProjectDefaultReviewers(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 reviewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workspace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides support for setting up default reviewers for your project. You must however have the UUID of the user available. Since Bitbucket has removed usernames from its APIs the best case is to use the UUID via the data provider.

        OAuth2 Scopes: `project:admin`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        reviewer = bitbucket.get_user(uuid="{account UUID}")
        infrastructure = bitbucket.ProjectDefaultReviewers("infrastructure",
            workspace="myteam",
            project="TERRAFORM",
            reviewers=[reviewer.uuid])
        ```

        ## Import

        Project Default Reviewers can be imported using the workspace and project separated by a (`/`) and the end, e.g.,

        ```sh
         $ pulumi import bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers example myteam/terraform-code
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] project: The key of the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] reviewers: A list of reviewers to use.
        :param pulumi.Input[str] workspace: The workspace of this project. Can be you or any team you
               have write access to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectDefaultReviewersArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides support for setting up default reviewers for your project. You must however have the UUID of the user available. Since Bitbucket has removed usernames from its APIs the best case is to use the UUID via the data provider.

        OAuth2 Scopes: `project:admin`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        reviewer = bitbucket.get_user(uuid="{account UUID}")
        infrastructure = bitbucket.ProjectDefaultReviewers("infrastructure",
            workspace="myteam",
            project="TERRAFORM",
            reviewers=[reviewer.uuid])
        ```

        ## Import

        Project Default Reviewers can be imported using the workspace and project separated by a (`/`) and the end, e.g.,

        ```sh
         $ pulumi import bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers example myteam/terraform-code
        ```

        :param str resource_name: The name of the resource.
        :param ProjectDefaultReviewersArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectDefaultReviewersArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 reviewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workspace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectDefaultReviewersArgs.__new__(ProjectDefaultReviewersArgs)

            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            if reviewers is None and not opts.urn:
                raise TypeError("Missing required property 'reviewers'")
            __props__.__dict__["reviewers"] = reviewers
            if workspace is None and not opts.urn:
                raise TypeError("Missing required property 'workspace'")
            __props__.__dict__["workspace"] = workspace
        super(ProjectDefaultReviewers, __self__).__init__(
            'bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            project: Optional[pulumi.Input[str]] = None,
            reviewers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            workspace: Optional[pulumi.Input[str]] = None) -> 'ProjectDefaultReviewers':
        """
        Get an existing ProjectDefaultReviewers resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] project: The key of the project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] reviewers: A list of reviewers to use.
        :param pulumi.Input[str] workspace: The workspace of this project. Can be you or any team you
               have write access to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectDefaultReviewersState.__new__(_ProjectDefaultReviewersState)

        __props__.__dict__["project"] = project
        __props__.__dict__["reviewers"] = reviewers
        __props__.__dict__["workspace"] = workspace
        return ProjectDefaultReviewers(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The key of the project.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def reviewers(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of reviewers to use.
        """
        return pulumi.get(self, "reviewers")

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Output[str]:
        """
        The workspace of this project. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "workspace")

