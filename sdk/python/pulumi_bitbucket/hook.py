# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['HookArgs', 'Hook']

@pulumi.input_type
class HookArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 events: pulumi.Input[Sequence[pulumi.Input[str]]],
                 owner: pulumi.Input[str],
                 repository: pulumi.Input[str],
                 url: pulumi.Input[str],
                 active: Optional[pulumi.Input[bool]] = None,
                 history_enabled: Optional[pulumi.Input[bool]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 skip_cert_verification: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Hook resource.
        :param pulumi.Input[str] description: The name / description to show in the UI.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events: The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).
        :param pulumi.Input[str] owner: The owner of this repository. Can be you or any team you
               have write access to.
        :param pulumi.Input[str] repository: The name of the repository.
        :param pulumi.Input[str] url: Where to POST to.
        :param pulumi.Input[bool] active: Whether the webhook configuration is active or not (Default: `true`).
        :param pulumi.Input[bool] history_enabled: Whether a webhook history is enabled.
        :param pulumi.Input[str] secret: A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
        :param pulumi.Input[bool] skip_cert_verification: Whether to skip certificate verification or not (Default: `true`).
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "events", events)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "url", url)
        if active is not None:
            pulumi.set(__self__, "active", active)
        if history_enabled is not None:
            pulumi.set(__self__, "history_enabled", history_enabled)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if skip_cert_verification is not None:
            pulumi.set(__self__, "skip_cert_verification", skip_cert_verification)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The name / description to show in the UI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def events(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Input[str]:
        """
        The owner of this repository. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[str]:
        """
        The name of the repository.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Where to POST to.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the webhook configuration is active or not (Default: `true`).
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="historyEnabled")
    def history_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether a webhook history is enabled.
        """
        return pulumi.get(self, "history_enabled")

    @history_enabled.setter
    def history_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "history_enabled", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="skipCertVerification")
    def skip_cert_verification(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to skip certificate verification or not (Default: `true`).
        """
        return pulumi.get(self, "skip_cert_verification")

    @skip_cert_verification.setter
    def skip_cert_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_cert_verification", value)


@pulumi.input_type
class _HookState:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 history_enabled: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 secret_set: Optional[pulumi.Input[bool]] = None,
                 skip_cert_verification: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Hook resources.
        :param pulumi.Input[bool] active: Whether the webhook configuration is active or not (Default: `true`).
        :param pulumi.Input[str] description: The name / description to show in the UI.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events: The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).
        :param pulumi.Input[bool] history_enabled: Whether a webhook history is enabled.
        :param pulumi.Input[str] owner: The owner of this repository. Can be you or any team you
               have write access to.
        :param pulumi.Input[str] repository: The name of the repository.
        :param pulumi.Input[str] secret: A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
        :param pulumi.Input[bool] secret_set: Whether a webhook secret is set.
        :param pulumi.Input[bool] skip_cert_verification: Whether to skip certificate verification or not (Default: `true`).
        :param pulumi.Input[str] url: Where to POST to.
        :param pulumi.Input[str] uuid: The UUID of the workspace webhook.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if history_enabled is not None:
            pulumi.set(__self__, "history_enabled", history_enabled)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if secret_set is not None:
            pulumi.set(__self__, "secret_set", secret_set)
        if skip_cert_verification is not None:
            pulumi.set(__self__, "skip_cert_verification", skip_cert_verification)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the webhook configuration is active or not (Default: `true`).
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The name / description to show in the UI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="historyEnabled")
    def history_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether a webhook history is enabled.
        """
        return pulumi.get(self, "history_enabled")

    @history_enabled.setter
    def history_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "history_enabled", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        The owner of this repository. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the repository.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="secretSet")
    def secret_set(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether a webhook secret is set.
        """
        return pulumi.get(self, "secret_set")

    @secret_set.setter
    def secret_set(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secret_set", value)

    @property
    @pulumi.getter(name="skipCertVerification")
    def skip_cert_verification(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to skip certificate verification or not (Default: `true`).
        """
        return pulumi.get(self, "skip_cert_verification")

    @skip_cert_verification.setter
    def skip_cert_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_cert_verification", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Where to POST to.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of the workspace webhook.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)


class Hook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 history_enabled: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 skip_cert_verification: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Bitbucket hook resource.

        This allows you to manage your webhooks on a repository.

        OAuth2 Scopes: `webhook`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        deploy_on_push = bitbucket.Hook("deployOnPush",
            description="Deploy the code via my webhook",
            events=["repo:push"],
            owner="myteam",
            repository="terraform-code",
            url="https://mywebhookservice.mycompany.com/deploy-on-push")
        ```

        ## Import

        Hooks can be imported using their `owner/repo-name/hook-id` ID, e.g.

        ```sh
         $ pulumi import bitbucket:index/hook:Hook hook my-account/my-repo/hook-id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Whether the webhook configuration is active or not (Default: `true`).
        :param pulumi.Input[str] description: The name / description to show in the UI.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events: The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).
        :param pulumi.Input[bool] history_enabled: Whether a webhook history is enabled.
        :param pulumi.Input[str] owner: The owner of this repository. Can be you or any team you
               have write access to.
        :param pulumi.Input[str] repository: The name of the repository.
        :param pulumi.Input[str] secret: A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
        :param pulumi.Input[bool] skip_cert_verification: Whether to skip certificate verification or not (Default: `true`).
        :param pulumi.Input[str] url: Where to POST to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Bitbucket hook resource.

        This allows you to manage your webhooks on a repository.

        OAuth2 Scopes: `webhook`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        deploy_on_push = bitbucket.Hook("deployOnPush",
            description="Deploy the code via my webhook",
            events=["repo:push"],
            owner="myteam",
            repository="terraform-code",
            url="https://mywebhookservice.mycompany.com/deploy-on-push")
        ```

        ## Import

        Hooks can be imported using their `owner/repo-name/hook-id` ID, e.g.

        ```sh
         $ pulumi import bitbucket:index/hook:Hook hook my-account/my-repo/hook-id
        ```

        :param str resource_name: The name of the resource.
        :param HookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 history_enabled: Optional[pulumi.Input[bool]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 skip_cert_verification: Optional[pulumi.Input[bool]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HookArgs.__new__(HookArgs)

            __props__.__dict__["active"] = active
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if events is None and not opts.urn:
                raise TypeError("Missing required property 'events'")
            __props__.__dict__["events"] = events
            __props__.__dict__["history_enabled"] = history_enabled
            if owner is None and not opts.urn:
                raise TypeError("Missing required property 'owner'")
            __props__.__dict__["owner"] = owner
            if repository is None and not opts.urn:
                raise TypeError("Missing required property 'repository'")
            __props__.__dict__["repository"] = repository
            __props__.__dict__["secret"] = None if secret is None else pulumi.Output.secret(secret)
            __props__.__dict__["skip_cert_verification"] = skip_cert_verification
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["secret_set"] = None
            __props__.__dict__["uuid"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Hook, __self__).__init__(
            'bitbucket:index/hook:Hook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            history_enabled: Optional[pulumi.Input[bool]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            repository: Optional[pulumi.Input[str]] = None,
            secret: Optional[pulumi.Input[str]] = None,
            secret_set: Optional[pulumi.Input[bool]] = None,
            skip_cert_verification: Optional[pulumi.Input[bool]] = None,
            url: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None) -> 'Hook':
        """
        Get an existing Hook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] active: Whether the webhook configuration is active or not (Default: `true`).
        :param pulumi.Input[str] description: The name / description to show in the UI.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] events: The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).
        :param pulumi.Input[bool] history_enabled: Whether a webhook history is enabled.
        :param pulumi.Input[str] owner: The owner of this repository. Can be you or any team you
               have write access to.
        :param pulumi.Input[str] repository: The name of the repository.
        :param pulumi.Input[str] secret: A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
        :param pulumi.Input[bool] secret_set: Whether a webhook secret is set.
        :param pulumi.Input[bool] skip_cert_verification: Whether to skip certificate verification or not (Default: `true`).
        :param pulumi.Input[str] url: Where to POST to.
        :param pulumi.Input[str] uuid: The UUID of the workspace webhook.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HookState.__new__(_HookState)

        __props__.__dict__["active"] = active
        __props__.__dict__["description"] = description
        __props__.__dict__["events"] = events
        __props__.__dict__["history_enabled"] = history_enabled
        __props__.__dict__["owner"] = owner
        __props__.__dict__["repository"] = repository
        __props__.__dict__["secret"] = secret
        __props__.__dict__["secret_set"] = secret_set
        __props__.__dict__["skip_cert_verification"] = skip_cert_verification
        __props__.__dict__["url"] = url
        __props__.__dict__["uuid"] = uuid
        return Hook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the webhook configuration is active or not (Default: `true`).
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The name / description to show in the UI.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def events(self) -> pulumi.Output[Sequence[str]]:
        """
        The events this webhook is subscribed to. Valid values can be found at [Bitbucket Event Payloads Docs](https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/).
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="historyEnabled")
    def history_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether a webhook history is enabled.
        """
        return pulumi.get(self, "history_enabled")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        The owner of this repository. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Output[str]:
        """
        The name of the repository.
        """
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[Optional[str]]:
        """
        A Webhook secret value. Passing a null or empty secret or not passing a secret will leave the webhook's secret unset. This value is not returned on read and cannot resolve diffs or be imported as its not returned back from bitbucket API.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="secretSet")
    def secret_set(self) -> pulumi.Output[bool]:
        """
        Whether a webhook secret is set.
        """
        return pulumi.get(self, "secret_set")

    @property
    @pulumi.getter(name="skipCertVerification")
    def skip_cert_verification(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to skip certificate verification or not (Default: `true`).
        """
        return pulumi.get(self, "skip_cert_verification")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        Where to POST to.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        The UUID of the workspace webhook.
        """
        return pulumi.get(self, "uuid")

