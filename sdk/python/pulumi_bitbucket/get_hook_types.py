# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetHookTypesResult',
    'AwaitableGetHookTypesResult',
    'get_hook_types',
    'get_hook_types_output',
]

@pulumi.output_type
class GetHookTypesResult:
    """
    A collection of values returned by getHookTypes.
    """
    def __init__(__self__, hook_types=None, id=None, subject_type=None):
        if hook_types and not isinstance(hook_types, list):
            raise TypeError("Expected argument 'hook_types' to be a list")
        pulumi.set(__self__, "hook_types", hook_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if subject_type and not isinstance(subject_type, str):
            raise TypeError("Expected argument 'subject_type' to be a str")
        pulumi.set(__self__, "subject_type", subject_type)

    @property
    @pulumi.getter(name="hookTypes")
    def hook_types(self) -> Sequence['outputs.GetHookTypesHookTypeResult']:
        return pulumi.get(self, "hook_types")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        return pulumi.get(self, "subject_type")


class AwaitableGetHookTypesResult(GetHookTypesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHookTypesResult(
            hook_types=self.hook_types,
            id=self.id,
            subject_type=self.subject_type)


def get_hook_types(subject_type: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHookTypesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['subjectType'] = subject_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bitbucket:index/getHookTypes:getHookTypes', __args__, opts=opts, typ=GetHookTypesResult).value

    return AwaitableGetHookTypesResult(
        hook_types=pulumi.get(__ret__, 'hook_types'),
        id=pulumi.get(__ret__, 'id'),
        subject_type=pulumi.get(__ret__, 'subject_type'))


@_utilities.lift_output_func(get_hook_types)
def get_hook_types_output(subject_type: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHookTypesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
