# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'BranchRestrictionGroupArgs',
    'BranchingModelBranchTypeArgs',
    'BranchingModelDevelopmentArgs',
    'BranchingModelProductionArgs',
    'DeploymentRestrictionsArgs',
    'ForkedRepositoryLinkArgs',
    'ForkedRepositoryLinkAvatarArgs',
    'PipelineScheduleTargetArgs',
    'PipelineScheduleTargetSelectorArgs',
    'PipelineSshKnownHostPublicKeyArgs',
    'ProjectBranchingModelBranchTypeArgs',
    'ProjectBranchingModelDevelopmentArgs',
    'ProjectBranchingModelProductionArgs',
    'ProjectLinkArgs',
    'ProjectLinkAvatarArgs',
    'RepositoryLinkArgs',
    'RepositoryLinkAvatarArgs',
]

@pulumi.input_type
class BranchRestrictionGroupArgs:
    def __init__(__self__, *,
                 owner: pulumi.Input[str],
                 slug: pulumi.Input[str]):
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Input[str]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class BranchingModelBranchTypeArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "kind", kind)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class BranchingModelDevelopmentArgs:
    def __init__(__self__, *,
                 branch_does_not_exist: Optional[pulumi.Input[bool]] = None,
                 is_valid: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 use_mainbranch: Optional[pulumi.Input[bool]] = None):
        if branch_does_not_exist is not None:
            pulumi.set(__self__, "branch_does_not_exist", branch_does_not_exist)
        if is_valid is not None:
            pulumi.set(__self__, "is_valid", is_valid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if use_mainbranch is not None:
            pulumi.set(__self__, "use_mainbranch", use_mainbranch)

    @property
    @pulumi.getter(name="branchDoesNotExist")
    def branch_does_not_exist(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "branch_does_not_exist")

    @branch_does_not_exist.setter
    def branch_does_not_exist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "branch_does_not_exist", value)

    @property
    @pulumi.getter(name="isValid")
    def is_valid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_valid")

    @is_valid.setter
    def is_valid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_valid", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="useMainbranch")
    def use_mainbranch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_mainbranch")

    @use_mainbranch.setter
    def use_mainbranch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mainbranch", value)


@pulumi.input_type
class BranchingModelProductionArgs:
    def __init__(__self__, *,
                 branch_does_not_exist: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 is_valid: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 use_mainbranch: Optional[pulumi.Input[bool]] = None):
        if branch_does_not_exist is not None:
            pulumi.set(__self__, "branch_does_not_exist", branch_does_not_exist)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_valid is not None:
            pulumi.set(__self__, "is_valid", is_valid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if use_mainbranch is not None:
            pulumi.set(__self__, "use_mainbranch", use_mainbranch)

    @property
    @pulumi.getter(name="branchDoesNotExist")
    def branch_does_not_exist(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "branch_does_not_exist")

    @branch_does_not_exist.setter
    def branch_does_not_exist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "branch_does_not_exist", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="isValid")
    def is_valid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_valid")

    @is_valid.setter
    def is_valid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_valid", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="useMainbranch")
    def use_mainbranch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_mainbranch")

    @use_mainbranch.setter
    def use_mainbranch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mainbranch", value)


@pulumi.input_type
class DeploymentRestrictionsArgs:
    def __init__(__self__, *,
                 admin_only: Optional[pulumi.Input[bool]] = None):
        if admin_only is not None:
            pulumi.set(__self__, "admin_only", admin_only)

    @property
    @pulumi.getter(name="adminOnly")
    def admin_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "admin_only")

    @admin_only.setter
    def admin_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_only", value)


@pulumi.input_type
class ForkedRepositoryLinkArgs:
    def __init__(__self__, *,
                 avatar: Optional[pulumi.Input['ForkedRepositoryLinkAvatarArgs']] = None):
        if avatar is not None:
            pulumi.set(__self__, "avatar", avatar)

    @property
    @pulumi.getter
    def avatar(self) -> Optional[pulumi.Input['ForkedRepositoryLinkAvatarArgs']]:
        return pulumi.get(self, "avatar")

    @avatar.setter
    def avatar(self, value: Optional[pulumi.Input['ForkedRepositoryLinkAvatarArgs']]):
        pulumi.set(self, "avatar", value)


@pulumi.input_type
class ForkedRepositoryLinkAvatarArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None):
        if href is not None:
            pulumi.set(__self__, "href", href)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)


@pulumi.input_type
class PipelineScheduleTargetArgs:
    def __init__(__self__, *,
                 ref_name: pulumi.Input[str],
                 ref_type: pulumi.Input[str],
                 selector: pulumi.Input['PipelineScheduleTargetSelectorArgs']):
        pulumi.set(__self__, "ref_name", ref_name)
        pulumi.set(__self__, "ref_type", ref_type)
        pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter(name="refName")
    def ref_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_name")

    @ref_name.setter
    def ref_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_name", value)

    @property
    @pulumi.getter(name="refType")
    def ref_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ref_type")

    @ref_type.setter
    def ref_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_type", value)

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Input['PipelineScheduleTargetSelectorArgs']:
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input['PipelineScheduleTargetSelectorArgs']):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class PipelineScheduleTargetSelectorArgs:
    def __init__(__self__, *,
                 pattern: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "pattern", pattern)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def pattern(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class PipelineSshKnownHostPublicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 key_type: pulumi.Input[str],
                 md5_fingerprint: Optional[pulumi.Input[str]] = None,
                 sha256_fingerprint: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "key_type", key_type)
        if md5_fingerprint is not None:
            pulumi.set(__self__, "md5_fingerprint", md5_fingerprint)
        if sha256_fingerprint is not None:
            pulumi.set(__self__, "sha256_fingerprint", sha256_fingerprint)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter(name="md5Fingerprint")
    def md5_fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "md5_fingerprint")

    @md5_fingerprint.setter
    def md5_fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_fingerprint", value)

    @property
    @pulumi.getter(name="sha256Fingerprint")
    def sha256_fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sha256_fingerprint")

    @sha256_fingerprint.setter
    def sha256_fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sha256_fingerprint", value)


@pulumi.input_type
class ProjectBranchingModelBranchTypeArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "kind", kind)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class ProjectBranchingModelDevelopmentArgs:
    def __init__(__self__, *,
                 branch_does_not_exist: Optional[pulumi.Input[bool]] = None,
                 is_valid: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 use_mainbranch: Optional[pulumi.Input[bool]] = None):
        if branch_does_not_exist is not None:
            pulumi.set(__self__, "branch_does_not_exist", branch_does_not_exist)
        if is_valid is not None:
            pulumi.set(__self__, "is_valid", is_valid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if use_mainbranch is not None:
            pulumi.set(__self__, "use_mainbranch", use_mainbranch)

    @property
    @pulumi.getter(name="branchDoesNotExist")
    def branch_does_not_exist(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "branch_does_not_exist")

    @branch_does_not_exist.setter
    def branch_does_not_exist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "branch_does_not_exist", value)

    @property
    @pulumi.getter(name="isValid")
    def is_valid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_valid")

    @is_valid.setter
    def is_valid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_valid", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="useMainbranch")
    def use_mainbranch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_mainbranch")

    @use_mainbranch.setter
    def use_mainbranch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mainbranch", value)


@pulumi.input_type
class ProjectBranchingModelProductionArgs:
    def __init__(__self__, *,
                 branch_does_not_exist: Optional[pulumi.Input[bool]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 is_valid: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 use_mainbranch: Optional[pulumi.Input[bool]] = None):
        if branch_does_not_exist is not None:
            pulumi.set(__self__, "branch_does_not_exist", branch_does_not_exist)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if is_valid is not None:
            pulumi.set(__self__, "is_valid", is_valid)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if use_mainbranch is not None:
            pulumi.set(__self__, "use_mainbranch", use_mainbranch)

    @property
    @pulumi.getter(name="branchDoesNotExist")
    def branch_does_not_exist(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "branch_does_not_exist")

    @branch_does_not_exist.setter
    def branch_does_not_exist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "branch_does_not_exist", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="isValid")
    def is_valid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_valid")

    @is_valid.setter
    def is_valid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_valid", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="useMainbranch")
    def use_mainbranch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_mainbranch")

    @use_mainbranch.setter
    def use_mainbranch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_mainbranch", value)


@pulumi.input_type
class ProjectLinkArgs:
    def __init__(__self__, *,
                 avatar: Optional[pulumi.Input['ProjectLinkAvatarArgs']] = None):
        if avatar is not None:
            pulumi.set(__self__, "avatar", avatar)

    @property
    @pulumi.getter
    def avatar(self) -> Optional[pulumi.Input['ProjectLinkAvatarArgs']]:
        return pulumi.get(self, "avatar")

    @avatar.setter
    def avatar(self, value: Optional[pulumi.Input['ProjectLinkAvatarArgs']]):
        pulumi.set(self, "avatar", value)


@pulumi.input_type
class ProjectLinkAvatarArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None):
        if href is not None:
            pulumi.set(__self__, "href", href)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)


@pulumi.input_type
class RepositoryLinkArgs:
    def __init__(__self__, *,
                 avatar: Optional[pulumi.Input['RepositoryLinkAvatarArgs']] = None):
        if avatar is not None:
            pulumi.set(__self__, "avatar", avatar)

    @property
    @pulumi.getter
    def avatar(self) -> Optional[pulumi.Input['RepositoryLinkAvatarArgs']]:
        return pulumi.get(self, "avatar")

    @avatar.setter
    def avatar(self, value: Optional[pulumi.Input['RepositoryLinkAvatarArgs']]):
        pulumi.set(self, "avatar", value)


@pulumi.input_type
class RepositoryLinkAvatarArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[str]] = None):
        if href is not None:
            pulumi.set(__self__, "href", href)

    @property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "href", value)


