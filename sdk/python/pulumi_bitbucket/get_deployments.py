# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDeploymentsResult',
    'AwaitableGetDeploymentsResult',
    'get_deployments',
    'get_deployments_output',
]

@pulumi.output_type
class GetDeploymentsResult:
    """
    A collection of values returned by getDeployments.
    """
    def __init__(__self__, id=None, names=None, repository=None, uuids=None, workspace=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if repository and not isinstance(repository, str):
            raise TypeError("Expected argument 'repository' to be a str")
        pulumi.set(__self__, "repository", repository)
        if uuids and not isinstance(uuids, list):
            raise TypeError("Expected argument 'uuids' to be a list")
        pulumi.set(__self__, "uuids", uuids)
        if workspace and not isinstance(workspace, str):
            raise TypeError("Expected argument 'workspace' to be a str")
        pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def names(self) -> Sequence[str]:
        """
        Names of deployments for a repository.
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def uuids(self) -> Sequence[str]:
        """
        UUIDs of deployments for a repository.
        """
        return pulumi.get(self, "uuids")

    @property
    @pulumi.getter
    def workspace(self) -> str:
        return pulumi.get(self, "workspace")


class AwaitableGetDeploymentsResult(GetDeploymentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeploymentsResult(
            id=self.id,
            names=self.names,
            repository=self.repository,
            uuids=self.uuids,
            workspace=self.workspace)


def get_deployments(repository: Optional[str] = None,
                    workspace: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeploymentsResult:
    """
    Provides a way to fetch data on Deployments.

    OAuth2 Scopes: `none`

    ## Example Usage

    ```python
    import pulumi
    import pulumi_bitbucket as bitbucket

    example = bitbucket.get_deployments(repository="example",
        workspace="example")
    ```


    :param str repository: The repository name.
    :param str workspace: The workspace name.
    """
    __args__ = dict()
    __args__['repository'] = repository
    __args__['workspace'] = workspace
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('bitbucket:index/getDeployments:getDeployments', __args__, opts=opts, typ=GetDeploymentsResult).value

    return AwaitableGetDeploymentsResult(
        id=pulumi.get(__ret__, 'id'),
        names=pulumi.get(__ret__, 'names'),
        repository=pulumi.get(__ret__, 'repository'),
        uuids=pulumi.get(__ret__, 'uuids'),
        workspace=pulumi.get(__ret__, 'workspace'))


@_utilities.lift_output_func(get_deployments)
def get_deployments_output(repository: Optional[pulumi.Input[str]] = None,
                           workspace: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDeploymentsResult]:
    """
    Provides a way to fetch data on Deployments.

    OAuth2 Scopes: `none`

    ## Example Usage

    ```python
    import pulumi
    import pulumi_bitbucket as bitbucket

    example = bitbucket.get_deployments(repository="example",
        workspace="example")
    ```


    :param str repository: The repository name.
    :param str workspace: The workspace name.
    """
    ...
