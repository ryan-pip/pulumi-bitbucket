# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProjectUserPermissionArgs', 'ProjectUserPermission']

@pulumi.input_type
class ProjectUserPermissionArgs:
    def __init__(__self__, *,
                 permission: pulumi.Input[str],
                 project_key: pulumi.Input[str],
                 user_id: pulumi.Input[str],
                 workspace: pulumi.Input[str]):
        """
        The set of arguments for constructing a ProjectUserPermission resource.
        :param pulumi.Input[str] permission: Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
        :param pulumi.Input[str] project_key: The project key.
        :param pulumi.Input[str] user_id: The UUID of the user.
        :param pulumi.Input[str] workspace: The workspace id.
        """
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "project_key", project_key)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Input[str]:
        """
        Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Input[str]:
        """
        The project key.
        """
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_key", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        """
        The UUID of the user.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Input[str]:
        """
        The workspace id.
        """
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace", value)


@pulumi.input_type
class _ProjectUserPermissionState:
    def __init__(__self__, *,
                 permission: Optional[pulumi.Input[str]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProjectUserPermission resources.
        :param pulumi.Input[str] permission: Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
        :param pulumi.Input[str] project_key: The project key.
        :param pulumi.Input[str] user_id: The UUID of the user.
        :param pulumi.Input[str] workspace: The workspace id.
        """
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if project_key is not None:
            pulumi.set(__self__, "project_key", project_key)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[str]]:
        """
        Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> Optional[pulumi.Input[str]]:
        """
        The project key.
        """
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_key", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of the user.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter
    def workspace(self) -> Optional[pulumi.Input[str]]:
        """
        The workspace id.
        """
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace", value)


class ProjectUserPermission(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Bitbucket Repository User Permission Resource.

        This allows you set explicit user permission for a project.

        OAuth2 Scopes: `project:admin`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        example = bitbucket.ProjectUserPermission("example",
            workspace="example",
            project_key=bitbucket_project["example"]["key"],
            user_id="user-id",
            permission="read")
        ```

        ## Import

        Repository User Permissions can be imported using their `workspace:project-key:user-id` ID, e.g.

        ```sh
         $ pulumi import bitbucket:index/projectUserPermission:ProjectUserPermission example workspace:project-key:user-id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] permission: Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
        :param pulumi.Input[str] project_key: The project key.
        :param pulumi.Input[str] user_id: The UUID of the user.
        :param pulumi.Input[str] workspace: The workspace id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectUserPermissionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Bitbucket Repository User Permission Resource.

        This allows you set explicit user permission for a project.

        OAuth2 Scopes: `project:admin`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        example = bitbucket.ProjectUserPermission("example",
            workspace="example",
            project_key=bitbucket_project["example"]["key"],
            user_id="user-id",
            permission="read")
        ```

        ## Import

        Repository User Permissions can be imported using their `workspace:project-key:user-id` ID, e.g.

        ```sh
         $ pulumi import bitbucket:index/projectUserPermission:ProjectUserPermission example workspace:project-key:user-id
        ```

        :param str resource_name: The name of the resource.
        :param ProjectUserPermissionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectUserPermissionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 project_key: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectUserPermissionArgs.__new__(ProjectUserPermissionArgs)

            if permission is None and not opts.urn:
                raise TypeError("Missing required property 'permission'")
            __props__.__dict__["permission"] = permission
            if project_key is None and not opts.urn:
                raise TypeError("Missing required property 'project_key'")
            __props__.__dict__["project_key"] = project_key
            if user_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_id'")
            __props__.__dict__["user_id"] = user_id
            if workspace is None and not opts.urn:
                raise TypeError("Missing required property 'workspace'")
            __props__.__dict__["workspace"] = workspace
        super(ProjectUserPermission, __self__).__init__(
            'bitbucket:index/projectUserPermission:ProjectUserPermission',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            permission: Optional[pulumi.Input[str]] = None,
            project_key: Optional[pulumi.Input[str]] = None,
            user_id: Optional[pulumi.Input[str]] = None,
            workspace: Optional[pulumi.Input[str]] = None) -> 'ProjectUserPermission':
        """
        Get an existing ProjectUserPermission resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] permission: Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
        :param pulumi.Input[str] project_key: The project key.
        :param pulumi.Input[str] user_id: The UUID of the user.
        :param pulumi.Input[str] workspace: The workspace id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectUserPermissionState.__new__(_ProjectUserPermissionState)

        __props__.__dict__["permission"] = permission
        __props__.__dict__["project_key"] = project_key
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["workspace"] = workspace
        return ProjectUserPermission(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Output[str]:
        """
        Permissions can be one of `read`, `write`, `create-repo`, and `admin`.
        """
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Output[str]:
        """
        The project key.
        """
        return pulumi.get(self, "project_key")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        """
        The UUID of the user.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Output[str]:
        """
        The workspace id.
        """
        return pulumi.get(self, "workspace")

