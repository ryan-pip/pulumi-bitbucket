# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PipelineSshKnownHostArgs', 'PipelineSshKnownHost']

@pulumi.input_type
class PipelineSshKnownHostArgs:
    def __init__(__self__, *,
                 public_key: pulumi.Input['PipelineSshKnownHostPublicKeyArgs'],
                 repository: pulumi.Input[str],
                 workspace: pulumi.Input[str],
                 hostname: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PipelineSshKnownHost resource.
        """
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "workspace", workspace)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Input['PipelineSshKnownHostPublicKeyArgs']:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: pulumi.Input['PipelineSshKnownHostPublicKeyArgs']):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)


@pulumi.input_type
class _PipelineSshKnownHostState:
    def __init__(__self__, *,
                 hostname: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input['PipelineSshKnownHostPublicKeyArgs']] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PipelineSshKnownHost resources.
        """
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input['PipelineSshKnownHostPublicKeyArgs']]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input['PipelineSshKnownHostPublicKeyArgs']]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def workspace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace", value)


class PipelineSshKnownHost(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[pulumi.InputType['PipelineSshKnownHostPublicKeyArgs']]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a PipelineSshKnownHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PipelineSshKnownHostArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PipelineSshKnownHost resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PipelineSshKnownHostArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PipelineSshKnownHostArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[pulumi.InputType['PipelineSshKnownHostPublicKeyArgs']]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PipelineSshKnownHostArgs.__new__(PipelineSshKnownHostArgs)

            __props__.__dict__["hostname"] = hostname
            if public_key is None and not opts.urn:
                raise TypeError("Missing required property 'public_key'")
            __props__.__dict__["public_key"] = public_key
            if repository is None and not opts.urn:
                raise TypeError("Missing required property 'repository'")
            __props__.__dict__["repository"] = repository
            if workspace is None and not opts.urn:
                raise TypeError("Missing required property 'workspace'")
            __props__.__dict__["workspace"] = workspace
            __props__.__dict__["uuid"] = None
        super(PipelineSshKnownHost, __self__).__init__(
            'bitbucket:index/pipelineSshKnownHost:PipelineSshKnownHost',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            public_key: Optional[pulumi.Input[pulumi.InputType['PipelineSshKnownHostPublicKeyArgs']]] = None,
            repository: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            workspace: Optional[pulumi.Input[str]] = None) -> 'PipelineSshKnownHost':
        """
        Get an existing PipelineSshKnownHost resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PipelineSshKnownHostState.__new__(_PipelineSshKnownHostState)

        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["public_key"] = public_key
        __props__.__dict__["repository"] = repository
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["workspace"] = workspace
        return PipelineSshKnownHost(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Output['outputs.PipelineSshKnownHostPublicKey']:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Output[str]:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Output[str]:
        return pulumi.get(self, "workspace")

