# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BranchingModelArgs', 'BranchingModel']

@pulumi.input_type
class BranchingModelArgs:
    def __init__(__self__, *,
                 development: pulumi.Input['BranchingModelDevelopmentArgs'],
                 owner: pulumi.Input[str],
                 repository: pulumi.Input[str],
                 branch_types: Optional[pulumi.Input[Sequence[pulumi.Input['BranchingModelBranchTypeArgs']]]] = None,
                 production: Optional[pulumi.Input['BranchingModelProductionArgs']] = None):
        """
        The set of arguments for constructing a BranchingModel resource.
        :param pulumi.Input['BranchingModelDevelopmentArgs'] development: The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        :param pulumi.Input[str] owner: The owner of this repository. Can be you or any team you
               have write access to.
        :param pulumi.Input[str] repository: The name of the repository.
        :param pulumi.Input[Sequence[pulumi.Input['BranchingModelBranchTypeArgs']]] branch_types: A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        :param pulumi.Input['BranchingModelProductionArgs'] production: The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        """
        pulumi.set(__self__, "development", development)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "repository", repository)
        if branch_types is not None:
            pulumi.set(__self__, "branch_types", branch_types)
        if production is not None:
            pulumi.set(__self__, "production", production)

    @property
    @pulumi.getter
    def development(self) -> pulumi.Input['BranchingModelDevelopmentArgs']:
        """
        The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        """
        return pulumi.get(self, "development")

    @development.setter
    def development(self, value: pulumi.Input['BranchingModelDevelopmentArgs']):
        pulumi.set(self, "development", value)

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Input[str]:
        """
        The owner of this repository. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[str]:
        """
        The name of the repository.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="branchTypes")
    def branch_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BranchingModelBranchTypeArgs']]]]:
        """
        A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        """
        return pulumi.get(self, "branch_types")

    @branch_types.setter
    def branch_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BranchingModelBranchTypeArgs']]]]):
        pulumi.set(self, "branch_types", value)

    @property
    @pulumi.getter
    def production(self) -> Optional[pulumi.Input['BranchingModelProductionArgs']]:
        """
        The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        """
        return pulumi.get(self, "production")

    @production.setter
    def production(self, value: Optional[pulumi.Input['BranchingModelProductionArgs']]):
        pulumi.set(self, "production", value)


@pulumi.input_type
class _BranchingModelState:
    def __init__(__self__, *,
                 branch_types: Optional[pulumi.Input[Sequence[pulumi.Input['BranchingModelBranchTypeArgs']]]] = None,
                 development: Optional[pulumi.Input['BranchingModelDevelopmentArgs']] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 production: Optional[pulumi.Input['BranchingModelProductionArgs']] = None,
                 repository: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BranchingModel resources.
        :param pulumi.Input[Sequence[pulumi.Input['BranchingModelBranchTypeArgs']]] branch_types: A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        :param pulumi.Input['BranchingModelDevelopmentArgs'] development: The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        :param pulumi.Input[str] owner: The owner of this repository. Can be you or any team you
               have write access to.
        :param pulumi.Input['BranchingModelProductionArgs'] production: The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        :param pulumi.Input[str] repository: The name of the repository.
        """
        if branch_types is not None:
            pulumi.set(__self__, "branch_types", branch_types)
        if development is not None:
            pulumi.set(__self__, "development", development)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if production is not None:
            pulumi.set(__self__, "production", production)
        if repository is not None:
            pulumi.set(__self__, "repository", repository)

    @property
    @pulumi.getter(name="branchTypes")
    def branch_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BranchingModelBranchTypeArgs']]]]:
        """
        A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        """
        return pulumi.get(self, "branch_types")

    @branch_types.setter
    def branch_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BranchingModelBranchTypeArgs']]]]):
        pulumi.set(self, "branch_types", value)

    @property
    @pulumi.getter
    def development(self) -> Optional[pulumi.Input['BranchingModelDevelopmentArgs']]:
        """
        The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        """
        return pulumi.get(self, "development")

    @development.setter
    def development(self, value: Optional[pulumi.Input['BranchingModelDevelopmentArgs']]):
        pulumi.set(self, "development", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        """
        The owner of this repository. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def production(self) -> Optional[pulumi.Input['BranchingModelProductionArgs']]:
        """
        The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        """
        return pulumi.get(self, "production")

    @production.setter
    def production(self, value: Optional[pulumi.Input['BranchingModelProductionArgs']]):
        pulumi.set(self, "production", value)

    @property
    @pulumi.getter
    def repository(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the repository.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repository", value)


class BranchingModel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch_types: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BranchingModelBranchTypeArgs']]]]] = None,
                 development: Optional[pulumi.Input[pulumi.InputType['BranchingModelDevelopmentArgs']]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 production: Optional[pulumi.Input[pulumi.InputType['BranchingModelProductionArgs']]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Bitbucket branching model resource.

        This allows you for setting up branching models for your repository.

        OAuth2 Scopes: `repository:admin`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        # Manage your repositories branching models
        test_repository = bitbucket.Repository("testRepository", owner="example")
        test_branching_model = bitbucket.BranchingModel("testBranchingModel",
            owner="example",
            repository=test_repository.name,
            development=bitbucket.BranchingModelDevelopmentArgs(
                use_mainbranch=True,
            ),
            branch_types=[
                bitbucket.BranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="feature",
                    prefix="test/",
                ),
                bitbucket.BranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="hotfix",
                    prefix="hotfix/",
                ),
                bitbucket.BranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="release",
                    prefix="release/",
                ),
                bitbucket.BranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="bugfix",
                    prefix="bugfix/",
                ),
            ])
        ```

        ## Import

        Branching Models can be imported using the owner and repo separated by a (`/`), e.g.,

        ```sh
         $ pulumi import bitbucket:index/branchingModel:BranchingModel example owner/repo
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BranchingModelBranchTypeArgs']]]] branch_types: A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        :param pulumi.Input[pulumi.InputType['BranchingModelDevelopmentArgs']] development: The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        :param pulumi.Input[str] owner: The owner of this repository. Can be you or any team you
               have write access to.
        :param pulumi.Input[pulumi.InputType['BranchingModelProductionArgs']] production: The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        :param pulumi.Input[str] repository: The name of the repository.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BranchingModelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Bitbucket branching model resource.

        This allows you for setting up branching models for your repository.

        OAuth2 Scopes: `repository:admin`

        ## Example Usage

        ```python
        import pulumi
        import pulumi_bitbucket as bitbucket

        # Manage your repositories branching models
        test_repository = bitbucket.Repository("testRepository", owner="example")
        test_branching_model = bitbucket.BranchingModel("testBranchingModel",
            owner="example",
            repository=test_repository.name,
            development=bitbucket.BranchingModelDevelopmentArgs(
                use_mainbranch=True,
            ),
            branch_types=[
                bitbucket.BranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="feature",
                    prefix="test/",
                ),
                bitbucket.BranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="hotfix",
                    prefix="hotfix/",
                ),
                bitbucket.BranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="release",
                    prefix="release/",
                ),
                bitbucket.BranchingModelBranchTypeArgs(
                    enabled=True,
                    kind="bugfix",
                    prefix="bugfix/",
                ),
            ])
        ```

        ## Import

        Branching Models can be imported using the owner and repo separated by a (`/`), e.g.,

        ```sh
         $ pulumi import bitbucket:index/branchingModel:BranchingModel example owner/repo
        ```

        :param str resource_name: The name of the resource.
        :param BranchingModelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BranchingModelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 branch_types: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BranchingModelBranchTypeArgs']]]]] = None,
                 development: Optional[pulumi.Input[pulumi.InputType['BranchingModelDevelopmentArgs']]] = None,
                 owner: Optional[pulumi.Input[str]] = None,
                 production: Optional[pulumi.Input[pulumi.InputType['BranchingModelProductionArgs']]] = None,
                 repository: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BranchingModelArgs.__new__(BranchingModelArgs)

            __props__.__dict__["branch_types"] = branch_types
            if development is None and not opts.urn:
                raise TypeError("Missing required property 'development'")
            __props__.__dict__["development"] = development
            if owner is None and not opts.urn:
                raise TypeError("Missing required property 'owner'")
            __props__.__dict__["owner"] = owner
            __props__.__dict__["production"] = production
            if repository is None and not opts.urn:
                raise TypeError("Missing required property 'repository'")
            __props__.__dict__["repository"] = repository
        super(BranchingModel, __self__).__init__(
            'bitbucket:index/branchingModel:BranchingModel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            branch_types: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BranchingModelBranchTypeArgs']]]]] = None,
            development: Optional[pulumi.Input[pulumi.InputType['BranchingModelDevelopmentArgs']]] = None,
            owner: Optional[pulumi.Input[str]] = None,
            production: Optional[pulumi.Input[pulumi.InputType['BranchingModelProductionArgs']]] = None,
            repository: Optional[pulumi.Input[str]] = None) -> 'BranchingModel':
        """
        Get an existing BranchingModel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BranchingModelBranchTypeArgs']]]] branch_types: A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        :param pulumi.Input[pulumi.InputType['BranchingModelDevelopmentArgs']] development: The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        :param pulumi.Input[str] owner: The owner of this repository. Can be you or any team you
               have write access to.
        :param pulumi.Input[pulumi.InputType['BranchingModelProductionArgs']] production: The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        :param pulumi.Input[str] repository: The name of the repository.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BranchingModelState.__new__(_BranchingModelState)

        __props__.__dict__["branch_types"] = branch_types
        __props__.__dict__["development"] = development
        __props__.__dict__["owner"] = owner
        __props__.__dict__["production"] = production
        __props__.__dict__["repository"] = repository
        return BranchingModel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="branchTypes")
    def branch_types(self) -> pulumi.Output[Sequence['outputs.BranchingModelBranchType']]:
        """
        A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        """
        return pulumi.get(self, "branch_types")

    @property
    @pulumi.getter
    def development(self) -> pulumi.Output['outputs.BranchingModelDevelopment']:
        """
        The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        """
        return pulumi.get(self, "development")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[str]:
        """
        The owner of this repository. Can be you or any team you
        have write access to.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def production(self) -> pulumi.Output[Optional['outputs.BranchingModelProduction']]:
        """
        The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        """
        return pulumi.get(self, "production")

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Output[str]:
        """
        The name of the repository.
        """
        return pulumi.get(self, "repository")

