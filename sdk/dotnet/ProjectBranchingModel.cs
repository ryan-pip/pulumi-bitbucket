// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Bitbucket
{
    /// <summary>
    /// Provides a Bitbucket project branching model resource.
    /// 
    /// This allows you for setting up branching models for your project.
    /// 
    /// OAuth2 Scopes: `project:admin`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Bitbucket = Pulumi.Bitbucket;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleProject = new Bitbucket.Project("exampleProject", new()
    ///     {
    ///         Owner = "example",
    ///         Key = "FFFFF",
    ///     });
    /// 
    ///     var exampleProjectBranchingModel = new Bitbucket.ProjectBranchingModel("exampleProjectBranchingModel", new()
    ///     {
    ///         Workspace = "example",
    ///         Project = exampleProject.Key,
    ///         Development = new Bitbucket.Inputs.ProjectBranchingModelDevelopmentArgs
    ///         {
    ///             UseMainbranch = true,
    ///         },
    ///         BranchTypes = new[]
    ///         {
    ///             new Bitbucket.Inputs.ProjectBranchingModelBranchTypeArgs
    ///             {
    ///                 Enabled = true,
    ///                 Kind = "feature",
    ///                 Prefix = "example/",
    ///             },
    ///             new Bitbucket.Inputs.ProjectBranchingModelBranchTypeArgs
    ///             {
    ///                 Enabled = true,
    ///                 Kind = "hotfix",
    ///                 Prefix = "hotfix/",
    ///             },
    ///             new Bitbucket.Inputs.ProjectBranchingModelBranchTypeArgs
    ///             {
    ///                 Enabled = true,
    ///                 Kind = "release",
    ///                 Prefix = "release/",
    ///             },
    ///             new Bitbucket.Inputs.ProjectBranchingModelBranchTypeArgs
    ///             {
    ///                 Enabled = true,
    ///                 Kind = "bugfix",
    ///                 Prefix = "bugfix/",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Branching Models can be imported using the workspace and project separated by a (`/`), e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import bitbucket:index/projectBranchingModel:ProjectBranchingModel example workspace/project
    /// ```
    /// </summary>
    [BitbucketResourceType("bitbucket:index/projectBranchingModel:ProjectBranchingModel")]
    public partial class ProjectBranchingModel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        /// </summary>
        [Output("branchTypes")]
        public Output<ImmutableArray<Outputs.ProjectBranchingModelBranchType>> BranchTypes { get; private set; } = null!;

        /// <summary>
        /// The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        /// </summary>
        [Output("development")]
        public Output<Outputs.ProjectBranchingModelDevelopment> Development { get; private set; } = null!;

        /// <summary>
        /// The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        /// </summary>
        [Output("production")]
        public Output<Outputs.ProjectBranchingModelProduction?> Production { get; private set; } = null!;

        /// <summary>
        /// The key of the project.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The workspace of this project. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Output("workspace")]
        public Output<string> Workspace { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectBranchingModel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectBranchingModel(string name, ProjectBranchingModelArgs args, CustomResourceOptions? options = null)
            : base("bitbucket:index/projectBranchingModel:ProjectBranchingModel", name, args ?? new ProjectBranchingModelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectBranchingModel(string name, Input<string> id, ProjectBranchingModelState? state = null, CustomResourceOptions? options = null)
            : base("bitbucket:index/projectBranchingModel:ProjectBranchingModel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ryan-pip",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectBranchingModel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectBranchingModel Get(string name, Input<string> id, ProjectBranchingModelState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectBranchingModel(name, id, state, options);
        }
    }

    public sealed class ProjectBranchingModelArgs : global::Pulumi.ResourceArgs
    {
        [Input("branchTypes")]
        private InputList<Inputs.ProjectBranchingModelBranchTypeArgs>? _branchTypes;

        /// <summary>
        /// A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        /// </summary>
        public InputList<Inputs.ProjectBranchingModelBranchTypeArgs> BranchTypes
        {
            get => _branchTypes ?? (_branchTypes = new InputList<Inputs.ProjectBranchingModelBranchTypeArgs>());
            set => _branchTypes = value;
        }

        /// <summary>
        /// The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        /// </summary>
        [Input("development", required: true)]
        public Input<Inputs.ProjectBranchingModelDevelopmentArgs> Development { get; set; } = null!;

        /// <summary>
        /// The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        /// </summary>
        [Input("production")]
        public Input<Inputs.ProjectBranchingModelProductionArgs>? Production { get; set; }

        /// <summary>
        /// The key of the project.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// The workspace of this project. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Input("workspace", required: true)]
        public Input<string> Workspace { get; set; } = null!;

        public ProjectBranchingModelArgs()
        {
        }
        public static new ProjectBranchingModelArgs Empty => new ProjectBranchingModelArgs();
    }

    public sealed class ProjectBranchingModelState : global::Pulumi.ResourceArgs
    {
        [Input("branchTypes")]
        private InputList<Inputs.ProjectBranchingModelBranchTypeGetArgs>? _branchTypes;

        /// <summary>
        /// A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        /// </summary>
        public InputList<Inputs.ProjectBranchingModelBranchTypeGetArgs> BranchTypes
        {
            get => _branchTypes ?? (_branchTypes = new InputList<Inputs.ProjectBranchingModelBranchTypeGetArgs>());
            set => _branchTypes = value;
        }

        /// <summary>
        /// The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        /// </summary>
        [Input("development")]
        public Input<Inputs.ProjectBranchingModelDevelopmentGetArgs>? Development { get; set; }

        /// <summary>
        /// The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        /// </summary>
        [Input("production")]
        public Input<Inputs.ProjectBranchingModelProductionGetArgs>? Production { get; set; }

        /// <summary>
        /// The key of the project.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The workspace of this project. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Input("workspace")]
        public Input<string>? Workspace { get; set; }

        public ProjectBranchingModelState()
        {
        }
        public static new ProjectBranchingModelState Empty => new ProjectBranchingModelState();
    }
}
