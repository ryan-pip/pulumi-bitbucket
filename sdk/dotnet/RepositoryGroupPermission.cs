// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Bitbucket
{
    /// <summary>
    /// Provides a Bitbucket Repository Group Permission Resource.
    /// 
    /// This allows you set explicit group permission for a repository.
    /// 
    /// OAuth2 Scopes: `repository:admin`
    /// 
    /// Note: can only be used when authenticating with Bitbucket Cloud using an _app password_. Authenticating via an OAuth flow gives a 403 error due to a [restriction in the Bitbucket Cloud API](https://developer.atlassian.com/cloud/bitbucket/rest/api-group-repositories/#api-repositories-workspace-repo-slug-permissions-config-groups-group-slug-put).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Bitbucket = Pulumi.Bitbucket;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Bitbucket.RepositoryGroupPermission("example", new()
    ///     {
    ///         Workspace = "example",
    ///         RepoSlug = bitbucket_repository.Example.Name,
    ///         GroupSlug = bitbucket_group.Example.Slug,
    ///         Permission = "read",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Repository Group Permissions can be imported using their `workspace:repo-slug:group-slug` ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import bitbucket:index/repositoryGroupPermission:RepositoryGroupPermission example workspace:repo-slug:group-slug
    /// ```
    /// </summary>
    [BitbucketResourceType("bitbucket:index/repositoryGroupPermission:RepositoryGroupPermission")]
    public partial class RepositoryGroupPermission : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Slug of the requested group.
        /// </summary>
        [Output("groupSlug")]
        public Output<string> GroupSlug { get; private set; } = null!;

        /// <summary>
        /// Permissions can be one of `read`, `write`, and `admin`.
        /// </summary>
        [Output("permission")]
        public Output<string> Permission { get; private set; } = null!;

        /// <summary>
        /// The repository slug.
        /// </summary>
        [Output("repoSlug")]
        public Output<string> RepoSlug { get; private set; } = null!;

        /// <summary>
        /// The workspace id.
        /// </summary>
        [Output("workspace")]
        public Output<string> Workspace { get; private set; } = null!;


        /// <summary>
        /// Create a RepositoryGroupPermission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RepositoryGroupPermission(string name, RepositoryGroupPermissionArgs args, CustomResourceOptions? options = null)
            : base("bitbucket:index/repositoryGroupPermission:RepositoryGroupPermission", name, args ?? new RepositoryGroupPermissionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RepositoryGroupPermission(string name, Input<string> id, RepositoryGroupPermissionState? state = null, CustomResourceOptions? options = null)
            : base("bitbucket:index/repositoryGroupPermission:RepositoryGroupPermission", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ryan-pip",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RepositoryGroupPermission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RepositoryGroupPermission Get(string name, Input<string> id, RepositoryGroupPermissionState? state = null, CustomResourceOptions? options = null)
        {
            return new RepositoryGroupPermission(name, id, state, options);
        }
    }

    public sealed class RepositoryGroupPermissionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Slug of the requested group.
        /// </summary>
        [Input("groupSlug", required: true)]
        public Input<string> GroupSlug { get; set; } = null!;

        /// <summary>
        /// Permissions can be one of `read`, `write`, and `admin`.
        /// </summary>
        [Input("permission", required: true)]
        public Input<string> Permission { get; set; } = null!;

        /// <summary>
        /// The repository slug.
        /// </summary>
        [Input("repoSlug", required: true)]
        public Input<string> RepoSlug { get; set; } = null!;

        /// <summary>
        /// The workspace id.
        /// </summary>
        [Input("workspace", required: true)]
        public Input<string> Workspace { get; set; } = null!;

        public RepositoryGroupPermissionArgs()
        {
        }
        public static new RepositoryGroupPermissionArgs Empty => new RepositoryGroupPermissionArgs();
    }

    public sealed class RepositoryGroupPermissionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Slug of the requested group.
        /// </summary>
        [Input("groupSlug")]
        public Input<string>? GroupSlug { get; set; }

        /// <summary>
        /// Permissions can be one of `read`, `write`, and `admin`.
        /// </summary>
        [Input("permission")]
        public Input<string>? Permission { get; set; }

        /// <summary>
        /// The repository slug.
        /// </summary>
        [Input("repoSlug")]
        public Input<string>? RepoSlug { get; set; }

        /// <summary>
        /// The workspace id.
        /// </summary>
        [Input("workspace")]
        public Input<string>? Workspace { get; set; }

        public RepositoryGroupPermissionState()
        {
        }
        public static new RepositoryGroupPermissionState Empty => new RepositoryGroupPermissionState();
    }
}
