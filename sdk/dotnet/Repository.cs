// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Bitbucket
{
    /// <summary>
    /// Provides a Bitbucket repository resource.
    /// 
    /// This resource allows you manage your repositories such as scm type, if it is
    /// private, how to fork the repository and other options.
    /// 
    /// OAuth2 Scopes: `repository`, `repository:admin`, and `repository:delete`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Bitbucket = Pulumi.Bitbucket;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var infrastructure = new Bitbucket.Repository("infrastructure", new()
    ///     {
    ///         Owner = "myteam",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// If you want to create a repository with a CamelCase name, you should provide
    /// a separate slug
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Bitbucket = Pulumi.Bitbucket;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var infrastructure = new Bitbucket.Repository("infrastructure", new()
    ///     {
    ///         Owner = "myteam",
    ///         Slug = "terraform-code",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Repositories can be imported using their `owner/name` ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import bitbucket:index/repository:Repository my-repo my-account/my-repo
    /// ```
    /// </summary>
    [BitbucketResourceType("bitbucket:index/repository:Repository")]
    public partial class Repository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The HTTPS clone URL.
        /// </summary>
        [Output("cloneHttps")]
        public Output<string> CloneHttps { get; private set; } = null!;

        /// <summary>
        /// The SSH clone URL.
        /// </summary>
        [Output("cloneSsh")]
        public Output<string> CloneSsh { get; private set; } = null!;

        /// <summary>
        /// What the description of the repo is.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// What the fork policy should be. Defaults to
        /// `allow_forks`. Valid values are `allow_forks`, `no_public_forks`, `no_forks`.
        /// </summary>
        [Output("forkPolicy")]
        public Output<string?> ForkPolicy { get; private set; } = null!;

        /// <summary>
        /// If this should have issues turned on or not.
        /// </summary>
        [Output("hasIssues")]
        public Output<bool?> HasIssues { get; private set; } = null!;

        /// <summary>
        /// If this should have wiki turned on or not.
        /// </summary>
        [Output("hasWiki")]
        public Output<bool?> HasWiki { get; private set; } = null!;

        /// <summary>
        /// Whether to inherit branching model from project.
        /// </summary>
        [Output("inheritBranchingModel")]
        public Output<bool> InheritBranchingModel { get; private set; } = null!;

        /// <summary>
        /// Whether to inherit default merge strategy from project.
        /// </summary>
        [Output("inheritDefaultMergeStrategy")]
        public Output<bool> InheritDefaultMergeStrategy { get; private set; } = null!;

        /// <summary>
        /// If this should be private or not. Defaults to `true`.
        /// </summary>
        [Output("isPrivate")]
        public Output<bool?> IsPrivate { get; private set; } = null!;

        /// <summary>
        /// What the language of this repository should be.
        /// </summary>
        [Output("language")]
        public Output<string?> Language { get; private set; } = null!;

        /// <summary>
        /// A set of links to a resource related to this object. See Link Below.
        /// </summary>
        [Output("link")]
        public Output<Outputs.RepositoryLink> Link { get; private set; } = null!;

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The owner of this repository. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// Turn on to enable pipelines support.
        /// </summary>
        [Output("pipelinesEnabled")]
        public Output<bool?> PipelinesEnabled { get; private set; } = null!;

        /// <summary>
        /// If you want to have this repo associated with a
        /// project.
        /// </summary>
        [Output("projectKey")]
        public Output<string> ProjectKey { get; private set; } = null!;

        /// <summary>
        /// What SCM you want to use. Valid options are `hg` or `git`.
        /// Defaults to `git`.
        /// </summary>
        [Output("scm")]
        public Output<string?> Scm { get; private set; } = null!;

        /// <summary>
        /// The slug of the repository.
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// the uuid of the repository resource.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;

        /// <summary>
        /// URL of website associated with this repository.
        /// </summary>
        [Output("website")]
        public Output<string?> Website { get; private set; } = null!;


        /// <summary>
        /// Create a Repository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Repository(string name, RepositoryArgs args, CustomResourceOptions? options = null)
            : base("bitbucket:index/repository:Repository", name, args ?? new RepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Repository(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
            : base("bitbucket:index/repository:Repository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ryan-pip",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Repository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Repository Get(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new Repository(name, id, state, options);
        }
    }

    public sealed class RepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// What the description of the repo is.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// What the fork policy should be. Defaults to
        /// `allow_forks`. Valid values are `allow_forks`, `no_public_forks`, `no_forks`.
        /// </summary>
        [Input("forkPolicy")]
        public Input<string>? ForkPolicy { get; set; }

        /// <summary>
        /// If this should have issues turned on or not.
        /// </summary>
        [Input("hasIssues")]
        public Input<bool>? HasIssues { get; set; }

        /// <summary>
        /// If this should have wiki turned on or not.
        /// </summary>
        [Input("hasWiki")]
        public Input<bool>? HasWiki { get; set; }

        /// <summary>
        /// Whether to inherit branching model from project.
        /// </summary>
        [Input("inheritBranchingModel")]
        public Input<bool>? InheritBranchingModel { get; set; }

        /// <summary>
        /// Whether to inherit default merge strategy from project.
        /// </summary>
        [Input("inheritDefaultMergeStrategy")]
        public Input<bool>? InheritDefaultMergeStrategy { get; set; }

        /// <summary>
        /// If this should be private or not. Defaults to `true`.
        /// </summary>
        [Input("isPrivate")]
        public Input<bool>? IsPrivate { get; set; }

        /// <summary>
        /// What the language of this repository should be.
        /// </summary>
        [Input("language")]
        public Input<string>? Language { get; set; }

        /// <summary>
        /// A set of links to a resource related to this object. See Link Below.
        /// </summary>
        [Input("link")]
        public Input<Inputs.RepositoryLinkArgs>? Link { get; set; }

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The owner of this repository. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Input("owner", required: true)]
        public Input<string> Owner { get; set; } = null!;

        /// <summary>
        /// Turn on to enable pipelines support.
        /// </summary>
        [Input("pipelinesEnabled")]
        public Input<bool>? PipelinesEnabled { get; set; }

        /// <summary>
        /// If you want to have this repo associated with a
        /// project.
        /// </summary>
        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        /// <summary>
        /// What SCM you want to use. Valid options are `hg` or `git`.
        /// Defaults to `git`.
        /// </summary>
        [Input("scm")]
        public Input<string>? Scm { get; set; }

        /// <summary>
        /// The slug of the repository.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// URL of website associated with this repository.
        /// </summary>
        [Input("website")]
        public Input<string>? Website { get; set; }

        public RepositoryArgs()
        {
        }
        public static new RepositoryArgs Empty => new RepositoryArgs();
    }

    public sealed class RepositoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The HTTPS clone URL.
        /// </summary>
        [Input("cloneHttps")]
        public Input<string>? CloneHttps { get; set; }

        /// <summary>
        /// The SSH clone URL.
        /// </summary>
        [Input("cloneSsh")]
        public Input<string>? CloneSsh { get; set; }

        /// <summary>
        /// What the description of the repo is.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// What the fork policy should be. Defaults to
        /// `allow_forks`. Valid values are `allow_forks`, `no_public_forks`, `no_forks`.
        /// </summary>
        [Input("forkPolicy")]
        public Input<string>? ForkPolicy { get; set; }

        /// <summary>
        /// If this should have issues turned on or not.
        /// </summary>
        [Input("hasIssues")]
        public Input<bool>? HasIssues { get; set; }

        /// <summary>
        /// If this should have wiki turned on or not.
        /// </summary>
        [Input("hasWiki")]
        public Input<bool>? HasWiki { get; set; }

        /// <summary>
        /// Whether to inherit branching model from project.
        /// </summary>
        [Input("inheritBranchingModel")]
        public Input<bool>? InheritBranchingModel { get; set; }

        /// <summary>
        /// Whether to inherit default merge strategy from project.
        /// </summary>
        [Input("inheritDefaultMergeStrategy")]
        public Input<bool>? InheritDefaultMergeStrategy { get; set; }

        /// <summary>
        /// If this should be private or not. Defaults to `true`.
        /// </summary>
        [Input("isPrivate")]
        public Input<bool>? IsPrivate { get; set; }

        /// <summary>
        /// What the language of this repository should be.
        /// </summary>
        [Input("language")]
        public Input<string>? Language { get; set; }

        /// <summary>
        /// A set of links to a resource related to this object. See Link Below.
        /// </summary>
        [Input("link")]
        public Input<Inputs.RepositoryLinkGetArgs>? Link { get; set; }

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The owner of this repository. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Turn on to enable pipelines support.
        /// </summary>
        [Input("pipelinesEnabled")]
        public Input<bool>? PipelinesEnabled { get; set; }

        /// <summary>
        /// If you want to have this repo associated with a
        /// project.
        /// </summary>
        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        /// <summary>
        /// What SCM you want to use. Valid options are `hg` or `git`.
        /// Defaults to `git`.
        /// </summary>
        [Input("scm")]
        public Input<string>? Scm { get; set; }

        /// <summary>
        /// The slug of the repository.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// the uuid of the repository resource.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// URL of website associated with this repository.
        /// </summary>
        [Input("website")]
        public Input<string>? Website { get; set; }

        public RepositoryState()
        {
        }
        public static new RepositoryState Empty => new RepositoryState();
    }
}
