// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Bitbucket
{
    /// <summary>
    /// This resource allows you to configure workspace variables.
    /// 
    /// OAuth2 Scopes: `none`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Bitbucket = Pulumi.Bitbucket;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var country = new Bitbucket.WorkspaceVariable("country", new()
    ///     {
    ///         Workspace = bitbucket_workspace.Test.Id,
    ///         Key = "COUNTRY",
    ///         Value = "Kenya",
    ///         Secured = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Workspace Variables can be imported using their `workspace-id/uuid` ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import bitbucket:index/workspaceVariable:WorkspaceVariable example workspace-id/uuid
    /// ```
    /// </summary>
    [BitbucketResourceType("bitbucket:index/workspaceVariable:WorkspaceVariable")]
    public partial class WorkspaceVariable : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The unique name of the variable.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.
        /// </summary>
        [Output("secured")]
        public Output<bool?> Secured { get; private set; } = null!;

        /// <summary>
        /// (Computed) The UUID identifying the variable.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;

        /// <summary>
        /// The value of the variable.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;

        /// <summary>
        /// The workspace ID you want to assign this variable to.
        /// </summary>
        [Output("workspace")]
        public Output<string> Workspace { get; private set; } = null!;


        /// <summary>
        /// Create a WorkspaceVariable resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkspaceVariable(string name, WorkspaceVariableArgs args, CustomResourceOptions? options = null)
            : base("bitbucket:index/workspaceVariable:WorkspaceVariable", name, args ?? new WorkspaceVariableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkspaceVariable(string name, Input<string> id, WorkspaceVariableState? state = null, CustomResourceOptions? options = null)
            : base("bitbucket:index/workspaceVariable:WorkspaceVariable", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ryan-pip",
                AdditionalSecretOutputs =
                {
                    "value",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkspaceVariable resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkspaceVariable Get(string name, Input<string> id, WorkspaceVariableState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkspaceVariable(name, id, state, options);
        }
    }

    public sealed class WorkspaceVariableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique name of the variable.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.
        /// </summary>
        [Input("secured")]
        public Input<bool>? Secured { get; set; }

        [Input("value", required: true)]
        private Input<string>? _value;

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The workspace ID you want to assign this variable to.
        /// </summary>
        [Input("workspace", required: true)]
        public Input<string> Workspace { get; set; } = null!;

        public WorkspaceVariableArgs()
        {
        }
        public static new WorkspaceVariableArgs Empty => new WorkspaceVariableArgs();
    }

    public sealed class WorkspaceVariableState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique name of the variable.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.
        /// </summary>
        [Input("secured")]
        public Input<bool>? Secured { get; set; }

        /// <summary>
        /// (Computed) The UUID identifying the variable.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        [Input("value")]
        private Input<string>? _value;

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public Input<string>? Value
        {
            get => _value;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _value = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The workspace ID you want to assign this variable to.
        /// </summary>
        [Input("workspace")]
        public Input<string>? Workspace { get; set; }

        public WorkspaceVariableState()
        {
        }
        public static new WorkspaceVariableState Empty => new WorkspaceVariableState();
    }
}
