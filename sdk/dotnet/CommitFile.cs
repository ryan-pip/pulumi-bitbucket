// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Bitbucket
{
    /// <summary>
    /// Commit a file.
    /// 
    /// This resource allows you to create a commit within a Bitbucket repository.
    /// 
    /// OAuth2 Scopes: `repository:write`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Bitbucket = Pulumi.Bitbucket;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Bitbucket.CommitFile("test", new()
    ///     {
    ///         Branch = "main",
    ///         CommitAuthor = "Test &lt;test@test.local&gt;",
    ///         CommitMessage = "test",
    ///         Content = "abc",
    ///         Filename = "README.md",
    ///         RepoSlug = "test",
    ///         Workspace = "test",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [BitbucketResourceType("bitbucket:index/commitFile:CommitFile")]
    public partial class CommitFile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Git branch.
        /// </summary>
        [Output("branch")]
        public Output<string> Branch { get; private set; } = null!;

        /// <summary>
        /// Committer author to use.
        /// </summary>
        [Output("commitAuthor")]
        public Output<string> CommitAuthor { get; private set; } = null!;

        /// <summary>
        /// The message of the commit.
        /// </summary>
        [Output("commitMessage")]
        public Output<string> CommitMessage { get; private set; } = null!;

        /// <summary>
        /// The SHA of the commit that modified the file
        /// </summary>
        [Output("commitSha")]
        public Output<string> CommitSha { get; private set; } = null!;

        /// <summary>
        /// The file content.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// The path of the file to manage.
        /// </summary>
        [Output("filename")]
        public Output<string> Filename { get; private set; } = null!;

        /// <summary>
        /// The repository slug.
        /// </summary>
        [Output("repoSlug")]
        public Output<string> RepoSlug { get; private set; } = null!;

        /// <summary>
        /// The workspace id.
        /// </summary>
        [Output("workspace")]
        public Output<string> Workspace { get; private set; } = null!;


        /// <summary>
        /// Create a CommitFile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CommitFile(string name, CommitFileArgs args, CustomResourceOptions? options = null)
            : base("bitbucket:index/commitFile:CommitFile", name, args ?? new CommitFileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CommitFile(string name, Input<string> id, CommitFileState? state = null, CustomResourceOptions? options = null)
            : base("bitbucket:index/commitFile:CommitFile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ryan-pip",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CommitFile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CommitFile Get(string name, Input<string> id, CommitFileState? state = null, CustomResourceOptions? options = null)
        {
            return new CommitFile(name, id, state, options);
        }
    }

    public sealed class CommitFileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Git branch.
        /// </summary>
        [Input("branch", required: true)]
        public Input<string> Branch { get; set; } = null!;

        /// <summary>
        /// Committer author to use.
        /// </summary>
        [Input("commitAuthor", required: true)]
        public Input<string> CommitAuthor { get; set; } = null!;

        /// <summary>
        /// The message of the commit.
        /// </summary>
        [Input("commitMessage", required: true)]
        public Input<string> CommitMessage { get; set; } = null!;

        /// <summary>
        /// The file content.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// The path of the file to manage.
        /// </summary>
        [Input("filename", required: true)]
        public Input<string> Filename { get; set; } = null!;

        /// <summary>
        /// The repository slug.
        /// </summary>
        [Input("repoSlug", required: true)]
        public Input<string> RepoSlug { get; set; } = null!;

        /// <summary>
        /// The workspace id.
        /// </summary>
        [Input("workspace", required: true)]
        public Input<string> Workspace { get; set; } = null!;

        public CommitFileArgs()
        {
        }
        public static new CommitFileArgs Empty => new CommitFileArgs();
    }

    public sealed class CommitFileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Git branch.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// Committer author to use.
        /// </summary>
        [Input("commitAuthor")]
        public Input<string>? CommitAuthor { get; set; }

        /// <summary>
        /// The message of the commit.
        /// </summary>
        [Input("commitMessage")]
        public Input<string>? CommitMessage { get; set; }

        /// <summary>
        /// The SHA of the commit that modified the file
        /// </summary>
        [Input("commitSha")]
        public Input<string>? CommitSha { get; set; }

        /// <summary>
        /// The file content.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The path of the file to manage.
        /// </summary>
        [Input("filename")]
        public Input<string>? Filename { get; set; }

        /// <summary>
        /// The repository slug.
        /// </summary>
        [Input("repoSlug")]
        public Input<string>? RepoSlug { get; set; }

        /// <summary>
        /// The workspace id.
        /// </summary>
        [Input("workspace")]
        public Input<string>? Workspace { get; set; }

        public CommitFileState()
        {
        }
        public static new CommitFileState Empty => new CommitFileState();
    }
}
