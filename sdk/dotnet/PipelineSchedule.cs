// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Bitbucket
{
    /// <summary>
    /// Provides a Bitbucket Pipeline Schedule resource.
    /// 
    /// This allows you to manage your Pipeline Schedules for a repository.
    /// 
    /// OAuth2 Scopes: `none`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Bitbucket = Pulumi.Bitbucket;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Bitbucket.PipelineSchedule("test", new()
    ///     {
    ///         Workspace = "example",
    ///         Repository = bitbucket_repository.Test.Name,
    ///         CronPattern = "0 30 * * * ? *",
    ///         Enabled = true,
    ///         Target = new Bitbucket.Inputs.PipelineScheduleTargetArgs
    ///         {
    ///             RefName = "master",
    ///             RefType = "branch",
    ///             Selector = new Bitbucket.Inputs.PipelineScheduleTargetSelectorArgs
    ///             {
    ///                 Pattern = "staging",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Pipeline Schedules can be imported using their `workspace/repo-slug/uuid` ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import bitbucket:index/pipelineSchedule:PipelineSchedule schedule workspace/repo-slug/uuid
    /// ```
    /// </summary>
    [BitbucketResourceType("bitbucket:index/pipelineSchedule:PipelineSchedule")]
    public partial class PipelineSchedule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The cron expression that the schedule applies.
        /// </summary>
        [Output("cronPattern")]
        public Output<string> CronPattern { get; private set; } = null!;

        /// <summary>
        /// Whether the schedule is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The Repository to create schedule in.
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        /// <summary>
        /// Schedule Target definition. See Target below.
        /// </summary>
        [Output("target")]
        public Output<Outputs.PipelineScheduleTarget> Target { get; private set; } = null!;

        /// <summary>
        /// The UUID identifying the schedule.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;

        /// <summary>
        /// The Workspace where the repository resides.
        /// </summary>
        [Output("workspace")]
        public Output<string> Workspace { get; private set; } = null!;


        /// <summary>
        /// Create a PipelineSchedule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PipelineSchedule(string name, PipelineScheduleArgs args, CustomResourceOptions? options = null)
            : base("bitbucket:index/pipelineSchedule:PipelineSchedule", name, args ?? new PipelineScheduleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PipelineSchedule(string name, Input<string> id, PipelineScheduleState? state = null, CustomResourceOptions? options = null)
            : base("bitbucket:index/pipelineSchedule:PipelineSchedule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ryan-pip",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PipelineSchedule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PipelineSchedule Get(string name, Input<string> id, PipelineScheduleState? state = null, CustomResourceOptions? options = null)
        {
            return new PipelineSchedule(name, id, state, options);
        }
    }

    public sealed class PipelineScheduleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cron expression that the schedule applies.
        /// </summary>
        [Input("cronPattern", required: true)]
        public Input<string> CronPattern { get; set; } = null!;

        /// <summary>
        /// Whether the schedule is enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The Repository to create schedule in.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        /// <summary>
        /// Schedule Target definition. See Target below.
        /// </summary>
        [Input("target", required: true)]
        public Input<Inputs.PipelineScheduleTargetArgs> Target { get; set; } = null!;

        /// <summary>
        /// The Workspace where the repository resides.
        /// </summary>
        [Input("workspace", required: true)]
        public Input<string> Workspace { get; set; } = null!;

        public PipelineScheduleArgs()
        {
        }
        public static new PipelineScheduleArgs Empty => new PipelineScheduleArgs();
    }

    public sealed class PipelineScheduleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cron expression that the schedule applies.
        /// </summary>
        [Input("cronPattern")]
        public Input<string>? CronPattern { get; set; }

        /// <summary>
        /// Whether the schedule is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The Repository to create schedule in.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// Schedule Target definition. See Target below.
        /// </summary>
        [Input("target")]
        public Input<Inputs.PipelineScheduleTargetGetArgs>? Target { get; set; }

        /// <summary>
        /// The UUID identifying the schedule.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// The Workspace where the repository resides.
        /// </summary>
        [Input("workspace")]
        public Input<string>? Workspace { get; set; }

        public PipelineScheduleState()
        {
        }
        public static new PipelineScheduleState Empty => new PipelineScheduleState();
    }
}
