// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Bitbucket
{
    /// <summary>
    /// Provides support for setting up default reviewers for your repository. You must however have the UUID of the user available. Since Bitbucket has removed usernames from its APIs the best case is to use the UUID via the data provider.
    /// 
    /// OAuth2 Scopes: `pullrequest` and `repository:admin`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Bitbucket = Pulumi.Bitbucket;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var reviewer = Bitbucket.GetUser.Invoke(new()
    ///     {
    ///         Uuid = "{account UUID}",
    ///     });
    /// 
    ///     var infrastructure = new Bitbucket.DefaultReviewers("infrastructure", new()
    ///     {
    ///         Owner = "myteam",
    ///         Repository = "terraform-code",
    ///         Reviewers = new[]
    ///         {
    ///             reviewer.Apply(getUserResult =&gt; getUserResult.Uuid),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Default Reviewers can be imported using the owner and repo separated by a (`/`) and the string `reviewers` and the end, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import bitbucket:index/defaultReviewers:DefaultReviewers example myteam/terraform-code/reviewers
    /// ```
    /// </summary>
    [BitbucketResourceType("bitbucket:index/defaultReviewers:DefaultReviewers")]
    public partial class DefaultReviewers : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The owner of this repository. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        /// <summary>
        /// A list of reviewers to use.
        /// </summary>
        [Output("reviewers")]
        public Output<ImmutableArray<string>> Reviewers { get; private set; } = null!;


        /// <summary>
        /// Create a DefaultReviewers resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DefaultReviewers(string name, DefaultReviewersArgs args, CustomResourceOptions? options = null)
            : base("bitbucket:index/defaultReviewers:DefaultReviewers", name, args ?? new DefaultReviewersArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DefaultReviewers(string name, Input<string> id, DefaultReviewersState? state = null, CustomResourceOptions? options = null)
            : base("bitbucket:index/defaultReviewers:DefaultReviewers", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ryan-pip",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DefaultReviewers resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DefaultReviewers Get(string name, Input<string> id, DefaultReviewersState? state = null, CustomResourceOptions? options = null)
        {
            return new DefaultReviewers(name, id, state, options);
        }
    }

    public sealed class DefaultReviewersArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The owner of this repository. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Input("owner", required: true)]
        public Input<string> Owner { get; set; } = null!;

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        [Input("reviewers", required: true)]
        private InputList<string>? _reviewers;

        /// <summary>
        /// A list of reviewers to use.
        /// </summary>
        public InputList<string> Reviewers
        {
            get => _reviewers ?? (_reviewers = new InputList<string>());
            set => _reviewers = value;
        }

        public DefaultReviewersArgs()
        {
        }
        public static new DefaultReviewersArgs Empty => new DefaultReviewersArgs();
    }

    public sealed class DefaultReviewersState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The owner of this repository. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        [Input("reviewers")]
        private InputList<string>? _reviewers;

        /// <summary>
        /// A list of reviewers to use.
        /// </summary>
        public InputList<string> Reviewers
        {
            get => _reviewers ?? (_reviewers = new InputList<string>());
            set => _reviewers = value;
        }

        public DefaultReviewersState()
        {
        }
        public static new DefaultReviewersState Empty => new DefaultReviewersState();
    }
}
