// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Bitbucket
{
    /// <summary>
    /// Provides support for setting up default reviewers for your project. You must however have the UUID of the user available. Since Bitbucket has removed usernames from its APIs the best case is to use the UUID via the data provider.
    /// 
    /// OAuth2 Scopes: `project:admin`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Bitbucket = Pulumi.Bitbucket;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var reviewer = Bitbucket.GetUser.Invoke(new()
    ///     {
    ///         Uuid = "{account UUID}",
    ///     });
    /// 
    ///     var infrastructure = new Bitbucket.ProjectDefaultReviewers("infrastructure", new()
    ///     {
    ///         Workspace = "myteam",
    ///         Project = "TERRAFORM",
    ///         Reviewers = new[]
    ///         {
    ///             reviewer.Apply(getUserResult =&gt; getUserResult.Uuid),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Project Default Reviewers can be imported using the workspace and project separated by a (`/`) and the end, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers example myteam/terraform-code
    /// ```
    /// </summary>
    [BitbucketResourceType("bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers")]
    public partial class ProjectDefaultReviewers : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The key of the project.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// A list of reviewers to use.
        /// </summary>
        [Output("reviewers")]
        public Output<ImmutableArray<string>> Reviewers { get; private set; } = null!;

        /// <summary>
        /// The workspace of this project. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Output("workspace")]
        public Output<string> Workspace { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectDefaultReviewers resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectDefaultReviewers(string name, ProjectDefaultReviewersArgs args, CustomResourceOptions? options = null)
            : base("bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers", name, args ?? new ProjectDefaultReviewersArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectDefaultReviewers(string name, Input<string> id, ProjectDefaultReviewersState? state = null, CustomResourceOptions? options = null)
            : base("bitbucket:index/projectDefaultReviewers:ProjectDefaultReviewers", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ryan-pip",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectDefaultReviewers resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectDefaultReviewers Get(string name, Input<string> id, ProjectDefaultReviewersState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectDefaultReviewers(name, id, state, options);
        }
    }

    public sealed class ProjectDefaultReviewersArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The key of the project.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        [Input("reviewers", required: true)]
        private InputList<string>? _reviewers;

        /// <summary>
        /// A list of reviewers to use.
        /// </summary>
        public InputList<string> Reviewers
        {
            get => _reviewers ?? (_reviewers = new InputList<string>());
            set => _reviewers = value;
        }

        /// <summary>
        /// The workspace of this project. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Input("workspace", required: true)]
        public Input<string> Workspace { get; set; } = null!;

        public ProjectDefaultReviewersArgs()
        {
        }
        public static new ProjectDefaultReviewersArgs Empty => new ProjectDefaultReviewersArgs();
    }

    public sealed class ProjectDefaultReviewersState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The key of the project.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("reviewers")]
        private InputList<string>? _reviewers;

        /// <summary>
        /// A list of reviewers to use.
        /// </summary>
        public InputList<string> Reviewers
        {
            get => _reviewers ?? (_reviewers = new InputList<string>());
            set => _reviewers = value;
        }

        /// <summary>
        /// The workspace of this project. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Input("workspace")]
        public Input<string>? Workspace { get; set; }

        public ProjectDefaultReviewersState()
        {
        }
        public static new ProjectDefaultReviewersState Empty => new ProjectDefaultReviewersState();
    }
}
