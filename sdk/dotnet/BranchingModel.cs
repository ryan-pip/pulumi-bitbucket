// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Bitbucket
{
    /// <summary>
    /// Provides a Bitbucket branching model resource.
    /// 
    /// This allows you for setting up branching models for your repository.
    /// 
    /// OAuth2 Scopes: `repository:admin`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Bitbucket = Pulumi.Bitbucket;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Manage your repositories branching models
    ///     var testRepository = new Bitbucket.Repository("testRepository", new()
    ///     {
    ///         Owner = "example",
    ///     });
    /// 
    ///     var testBranchingModel = new Bitbucket.BranchingModel("testBranchingModel", new()
    ///     {
    ///         Owner = "example",
    ///         Repository = testRepository.Name,
    ///         Development = new Bitbucket.Inputs.BranchingModelDevelopmentArgs
    ///         {
    ///             UseMainbranch = true,
    ///         },
    ///         BranchTypes = new[]
    ///         {
    ///             new Bitbucket.Inputs.BranchingModelBranchTypeArgs
    ///             {
    ///                 Enabled = true,
    ///                 Kind = "feature",
    ///                 Prefix = "test/",
    ///             },
    ///             new Bitbucket.Inputs.BranchingModelBranchTypeArgs
    ///             {
    ///                 Enabled = true,
    ///                 Kind = "hotfix",
    ///                 Prefix = "hotfix/",
    ///             },
    ///             new Bitbucket.Inputs.BranchingModelBranchTypeArgs
    ///             {
    ///                 Enabled = true,
    ///                 Kind = "release",
    ///                 Prefix = "release/",
    ///             },
    ///             new Bitbucket.Inputs.BranchingModelBranchTypeArgs
    ///             {
    ///                 Enabled = true,
    ///                 Kind = "bugfix",
    ///                 Prefix = "bugfix/",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Branching Models can be imported using the owner and repo separated by a (`/`), e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import bitbucket:index/branchingModel:BranchingModel example owner/repo
    /// ```
    /// </summary>
    [BitbucketResourceType("bitbucket:index/branchingModel:BranchingModel")]
    public partial class BranchingModel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        /// </summary>
        [Output("branchTypes")]
        public Output<ImmutableArray<Outputs.BranchingModelBranchType>> BranchTypes { get; private set; } = null!;

        /// <summary>
        /// The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        /// </summary>
        [Output("development")]
        public Output<Outputs.BranchingModelDevelopment> Development { get; private set; } = null!;

        /// <summary>
        /// The owner of this repository. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        /// </summary>
        [Output("production")]
        public Output<Outputs.BranchingModelProduction?> Production { get; private set; } = null!;

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;


        /// <summary>
        /// Create a BranchingModel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BranchingModel(string name, BranchingModelArgs args, CustomResourceOptions? options = null)
            : base("bitbucket:index/branchingModel:BranchingModel", name, args ?? new BranchingModelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BranchingModel(string name, Input<string> id, BranchingModelState? state = null, CustomResourceOptions? options = null)
            : base("bitbucket:index/branchingModel:BranchingModel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ryan-pip",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BranchingModel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BranchingModel Get(string name, Input<string> id, BranchingModelState? state = null, CustomResourceOptions? options = null)
        {
            return new BranchingModel(name, id, state, options);
        }
    }

    public sealed class BranchingModelArgs : global::Pulumi.ResourceArgs
    {
        [Input("branchTypes")]
        private InputList<Inputs.BranchingModelBranchTypeArgs>? _branchTypes;

        /// <summary>
        /// A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        /// </summary>
        public InputList<Inputs.BranchingModelBranchTypeArgs> BranchTypes
        {
            get => _branchTypes ?? (_branchTypes = new InputList<Inputs.BranchingModelBranchTypeArgs>());
            set => _branchTypes = value;
        }

        /// <summary>
        /// The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        /// </summary>
        [Input("development", required: true)]
        public Input<Inputs.BranchingModelDevelopmentArgs> Development { get; set; } = null!;

        /// <summary>
        /// The owner of this repository. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Input("owner", required: true)]
        public Input<string> Owner { get; set; } = null!;

        /// <summary>
        /// The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        /// </summary>
        [Input("production")]
        public Input<Inputs.BranchingModelProductionArgs>? Production { get; set; }

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        public BranchingModelArgs()
        {
        }
        public static new BranchingModelArgs Empty => new BranchingModelArgs();
    }

    public sealed class BranchingModelState : global::Pulumi.ResourceArgs
    {
        [Input("branchTypes")]
        private InputList<Inputs.BranchingModelBranchTypeGetArgs>? _branchTypes;

        /// <summary>
        /// A set of branch type to define `feature`, `bugfix`, `release`, `hotfix` prefixes. See Branch Type below.
        /// </summary>
        public InputList<Inputs.BranchingModelBranchTypeGetArgs> BranchTypes
        {
            get => _branchTypes ?? (_branchTypes = new InputList<Inputs.BranchingModelBranchTypeGetArgs>());
            set => _branchTypes = value;
        }

        /// <summary>
        /// The development branch can be configured to a specific branch or to track the main branch. When set to a specific branch it must currently exist. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a development property will leave the development branch unchanged. See Development below.
        /// </summary>
        [Input("development")]
        public Input<Inputs.BranchingModelDevelopmentGetArgs>? Development { get; set; }

        /// <summary>
        /// The owner of this repository. Can be you or any team you
        /// have write access to.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// The production branch can be a specific branch, the main branch or disabled. When set to a specific branch it must currently exist. The enabled property can be used to enable (true) or disable (false) it. Only the passed properties will be updated. The properties not passed will be left unchanged. A request without a production property will leave the production branch unchanged. See Production below.
        /// </summary>
        [Input("production")]
        public Input<Inputs.BranchingModelProductionGetArgs>? Production { get; set; }

        /// <summary>
        /// The name of the repository.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        public BranchingModelState()
        {
        }
        public static new BranchingModelState Empty => new BranchingModelState();
    }
}
